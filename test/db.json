{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/thumbnails/SpringData.png","path":"thumbnails/SpringData.png","modified":0,"renderable":0},{"_id":"source/thumbnails/elasticsearch.jpg","path":"thumbnails/elasticsearch.jpg","modified":0,"renderable":0},{"_id":"source/thumbnails/eureka-logo-600.png","path":"thumbnails/eureka-logo-600.png","modified":0,"renderable":0},{"_id":"source/thumbnails/springboot.png","path":"thumbnails/springboot.png","modified":0,"renderable":0},{"_id":"source/thumbnails/harbor_logo.png","path":"thumbnails/harbor_logo.png","modified":0,"renderable":0},{"_id":"source/thumbnails/zixingche.jpg","path":"thumbnails/zixingche.jpg","modified":0,"renderable":0},{"_id":"source/thumbnails/xingbake.jpg","path":"thumbnails/xingbake.jpg","modified":0,"renderable":0},{"_id":"source/thumbnails/idea.png","path":"thumbnails/idea.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar2.png","path":"images/avatar2.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/email.svg","path":"images/email.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon copy.svg","path":"images/favicon copy.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/gitee.svg","path":"images/gitee.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/github.svg","path":"images/github.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/links.svg","path":"images/links.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo copy.svg","path":"images/logo copy.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/maotouying.svg","path":"images/maotouying.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/no.gif","path":"images/no.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/no2.jpg","path":"images/no2.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/search.svg","path":"images/search.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/search2.svg","path":"images/search2.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail copy.svg","path":"images/thumbnail copy.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/weibo.svg","path":"images/weibo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/wechat.jpeg","path":"images/wechat.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/alpay.jpeg","path":"images/alpay.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/coin.png","path":"images/coin.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Google-reCAPTCHA.md","hash":"f16767915199352df6362e319c18515d89896b27","modified":1650434522748},{"_id":"source/_posts/TypeScript 环境.md","hash":"1a1b8630499ec148a2c5b690c2eda673d0e42bb8","modified":1650434990320},{"_id":"source/_posts/ejs 原理实现.md","hash":"d20f012c0f22b841bbe290ba186d75292396d0bb","modified":1650435212304},{"_id":"source/_posts/eslint-集成到-webpack.md","hash":"59007b9644085d328560c400d59bf7b866224cd5","modified":1650434796241},{"_id":"source/_posts/了解 Webpack 中的配置.md","hash":"ecf7b9523fdfa4c9e24c363b8565810e14e03010","modified":1650434751434},{"_id":"source/_posts/性能优化方案.md","hash":"5942046c1095f9f057593a19cf0d2fe16d175557","modified":1650434500750},{"_id":"source/_posts/搭建 webpack 配置.md","hash":"658b39d7d2aae68e65c200ad4b8074f2c956719c","modified":1650434709823},{"_id":"source/_posts/webpack 优化.md","hash":"0a098e1af5baf01847402cd8c3c46c69c3ec3b93","modified":1650434881346},{"_id":"source/_posts/进程与集群.md","hash":"d4fe98b3ca1c439ba59276ef24424536131b7ddb","modified":1650434832545},{"_id":"source/thumbnails/SpringData.png","hash":"17d4a05fa4ba828530b735e30e99b3ff71ad703c","modified":1650271576913},{"_id":"source/thumbnails/elasticsearch.jpg","hash":"b16c5fbedd68d77dd7ef4412202bdb3fe4d9bd16","modified":1650271576914},{"_id":"source/thumbnails/eureka-logo-600.png","hash":"0d907dd80b3f40e0a90fdc2b51eeb1604fdf3ebc","modified":1650271576914},{"_id":"source/thumbnails/springboot.png","hash":"cd2b796ca4d6d841a72139ab957be686c5778e93","modified":1650271576916},{"_id":"source/thumbnails/harbor_logo.png","hash":"0c81c5ec74538ef58fa592652a2e40ce0324ba11","modified":1650271576915},{"_id":"source/thumbnails/xingbake.jpg","hash":"f3c0a4a22844136791d0cf0adad7787408ab1969","modified":1650271576917},{"_id":"source/thumbnails/zixingche.jpg","hash":"a23f508b87fc7ce3f94d15f4b838d41844771b1f","modified":1650271576918},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650272895108},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1650271576918},{"_id":"themes/icarus/README.md","hash":"4409383fbd7422800049d6597e9b26aa8db66b66","modified":1650271576919},{"_id":"themes/icarus/_config.yml","hash":"ed96d58a90b29346378e4079d6b083ea5a876571","modified":1650442801052},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1650271576936},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1650271576924},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1650271576924},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1650271576925},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1650271576925},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1650271576925},{"_id":"themes/icarus/languages/ko.yml","hash":"06d2bb8b66f68f780218e0ba7edffe1e57fac268","modified":1650271576925},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1650271576925},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1650271576925},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1650271576925},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1650271576926},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"ee63490a9f995d93969a48acc95cb9f1c01d9ea0","modified":1650505984786},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1650271576926},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1650271576926},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1650271576926},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1650271576926},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1650271576930},{"_id":"themes/icarus/layout/layout.ejs","hash":"a7ae7cc5a76413dc556c7b2714413c7911a107c3","modified":1650271576930},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1650271576930},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1650271576933},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1650271576934},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1650271576934},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1650271576936},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1650271576919},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1650271576919},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1650271576919},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"fa7a1a4e212bc968fec4b1d49fa3a18bfec9113e","modified":1650442561618},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1650271576920},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1650271576920},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1650271576920},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1650271576920},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1650271576921},{"_id":"themes/icarus/includes/helpers/config.js","hash":"1956e2be88250b4da6a8a9b8d16e125145f66f5f","modified":1650271576921},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"81551fcc8aeeb84cc5e2cec4f2d540e707124597","modified":1650271576921},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1650271576921},{"_id":"themes/icarus/includes/helpers/page.js","hash":"25aeed6449ca381661cec528fe96bbb993026ca9","modified":1650271576921},{"_id":"themes/icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1650271576921},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1650271576922},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"02af67eb87482028b223299b20a129756b1c122b","modified":1650271576922},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1650271576922},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"639b405c9e5dac04c2dc168c2754e50a5c13d197","modified":1650271576922},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"49fabe9c03f3124f0253fa1ee3e69328373ad117","modified":1650271576922},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1650271576922},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1650271576923},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"67ebd05fb378439a094a7906f4ea04fbedd8c1b5","modified":1650271576923},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"0966532dfed54ea2e883e12e3b9284c2a9591618","modified":1650274625456},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"e29473155a35f391fbc53349bdc256cb7600855e","modified":1650271576923},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"d981ad203a2002c35d710d33e304f9e99f31cab0","modified":1650271576923},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"6c04cccec13a656189ab2d917d69d059027d0343","modified":1650271576923},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"bd500be763486918894e731ce14bc9c4047fb76d","modified":1650271576923},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"eeeaae3ed079033788b19e172cd1f83c5ca8bc4f","modified":1650271576924},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1650271576924},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1650271576924},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1650271576924},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1650271576927},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1650271576927},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1650271576927},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"6357dea41b502d2493ce3a762b244de27403675d","modified":1650347673195},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"430416210933b7edcbfcc67ede4aa55539da2750","modified":1650271576927},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1650271576927},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1650271576928},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"f71b918151812475da9ce94def0f8fd006720ba3","modified":1650271576928},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1650271576929},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1650271576929},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1650271576930},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1650271576930},{"_id":"themes/icarus/layout/common/article.ejs","hash":"7d6d782e98a8f9db33e2fb1957260adb3394b676","modified":1650455156865},{"_id":"themes/icarus/layout/common/head.ejs","hash":"996d2c13f13935237d02136c29cc1e86e1e8f724","modified":1650332673409},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"f72740bd6cfb37b35991aaa79ffcb4c6ef23c0e0","modified":1650277621665},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1650271576929},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"22493e04e0e82895a8493e46b3277a09602eee6e","modified":1650276736243},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"31167dca8c0ba6bbff7d4e347dee12196b500a92","modified":1650271576929},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1650271576931},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"133a252e1c025e0e68aaa9baa7eae214e05f779b","modified":1650276843597},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1650271576931},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1650271576931},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1650271576931},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1650271576932},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1650271576932},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1650271576932},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1650271576932},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1650271576933},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"decd9b0e5d306a90e9cf84a61c64b525ae2f8cb7","modified":1650274146984},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"be4c5b9196467559658931ab206d56765c5cfe02","modified":1650275915431},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1650271576933},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1650271576934},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1650271576934},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1650271576934},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1650271576934},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"bed0c581d624bb2e74b4817de0174164875087ff","modified":1650339135856},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1650271576935},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"16b2fb9d2229abc2c322bb665a2079acc20c6572","modified":1650271576935},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"b8b22d9cea936a3ab53e64a5ecd7bd54df2049fb","modified":1650271576935},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1650271576934},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1650271576935},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1650271576935},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1650271576936},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"a91f9cb2b294efa61acb5de73d47ba461e5a7523","modified":1650271576936},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1650271576936},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1650271576937},{"_id":"themes/icarus/source/css/style.styl","hash":"cc8ecbb5b58cc5614068d1e2d6d3de447ff0c605","modified":1650505984788},{"_id":"themes/icarus/source/css/search.css","hash":"77b458d4bdca0dcf330205b250fe9df2ccb841b0","modified":1650276476889},{"_id":"themes/icarus/source/images/email.svg","hash":"f0f48e4846f2059185f6d4cd0673aadcd4e08fc0","modified":1650271576939},{"_id":"themes/icarus/source/images/alipay.jpg","hash":"107d693efe92e2547e1104d0e2c80bdbacd74aae","modified":1650271576938},{"_id":"themes/icarus/source/images/avatar2.png","hash":"276602cb0eaa45e0a775faa7e845cc5dc4411a9d","modified":1650271576939},{"_id":"themes/icarus/source/images/avatar.png","hash":"e805d1b92d0995ecf92165f769df0346f5125de7","modified":1650332673411},{"_id":"themes/icarus/source/css/insight.css","hash":"4e8f9bf53740e8c8b7d1b3ff5cfb2aedd7a7368c","modified":1650276449137},{"_id":"themes/icarus/source/images/favicon copy.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1650271576939},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1650271576939},{"_id":"themes/icarus/source/images/gitee.svg","hash":"a8ca124314807d0acda6e155ba7983403c240598","modified":1650271576939},{"_id":"themes/icarus/source/images/github.png","hash":"bf450c4e45a31f8a4dd6fbf8f9c443e819cc2142","modified":1650271576940},{"_id":"themes/icarus/source/images/github.svg","hash":"c9dcc71440c086ed5b16878efb0d7cce276279f8","modified":1650271576940},{"_id":"themes/icarus/source/images/links.svg","hash":"e31b7e429abb80e5b050d539f253a6620c4d3437","modified":1650271576940},{"_id":"themes/icarus/source/images/logo copy.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1650271576940},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1650271576940},{"_id":"themes/icarus/source/images/maotouying.svg","hash":"b0b45a366522863279ff92afd247f42cf74a9749","modified":1650271576940},{"_id":"themes/icarus/source/images/no2.jpg","hash":"05fc495d2050921392d055146bec5defc9645d68","modified":1650271576941},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1650271576942},{"_id":"themes/icarus/source/images/search.png","hash":"3a2d7373be729b31be9f821b1aca82bea6bca7e1","modified":1650271576942},{"_id":"themes/icarus/source/images/search.svg","hash":"8e87a7b64143c40778fa031b17d6966dd3c23c5a","modified":1650271576942},{"_id":"themes/icarus/source/images/thumbnail copy.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1650271576942},{"_id":"themes/icarus/source/images/search2.svg","hash":"c196024fe206ed5486a87e2b23d5f660d22b65f7","modified":1650271576942},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"fa8b54d30d0b104236428edf1133f0988193b49d","modified":1650271576942},{"_id":"themes/icarus/source/images/weibo.svg","hash":"a9f8399fb0f4275b08a9315400dbbd3810b54b5f","modified":1650271576944},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1650271576945},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"c4b7e9ba8ff401bfa2366e078b54fceca41207c6","modified":1650274488460},{"_id":"themes/icarus/source/js/clipboard.js","hash":"82f7ed54c63f822d835ddd9ec053fbfb200a2475","modified":1650271576945},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1650271576945},{"_id":"themes/icarus/source/js/insight.js","hash":"0c69c46ce32e6d88bb608fde23900d5d564f2c99","modified":1650274505591},{"_id":"themes/icarus/source/js/main.js","hash":"4e34e8bd54e8e6e63f81d943b0583196aba2559b","modified":1650455592760},{"_id":"source/thumbnails/idea.png","hash":"5502cef01fa6383341734a5baa26a9607345b857","modified":1650271576916},{"_id":"themes/icarus/source/images/no.gif","hash":"0371be95c950484c6880365c8513ad5bc846efb5","modified":1650271576941},{"_id":"themes/icarus/source/images/wechatpay.png","hash":"1ff14c901366f499cfc245ff6c533dd1679ef44d","modified":1650271576944},{"_id":"themes/icarus/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1650442848802},{"_id":"themes/icarus/source/.DS_Store","hash":"0bbf01ce33519e7469b912ef7e7e24d2401caf34","modified":1650442829840},{"_id":"themes/icarus/source/images/wechat.jpeg","hash":"23e7c5cbf8f1567a9f0d35c8341fd54dcea06952","modified":1650442680309},{"_id":"themes/icarus/source/images/alpay.jpeg","hash":"92f4fbf01d9ab304da1c54dddd959fd3391bb8cd","modified":1650442891161},{"_id":"source/_posts/discord-bot-开发.md","hash":"4f8dfc633816d8c8fb5e55934f3831d1910cd7ef","modified":1650506286347},{"_id":"themes/icarus/source/images/coin.png","hash":"7609b1612dda3a3afad689bc34710f081d594757","modified":1650454803407}],"Category":[{"name":"互联网产品","_id":"cl27aeoo90002y2u96bdy5bs9"},{"name":"前端","_id":"cl27aeooe0007y2u97u1a0h62"},{"name":"Node","_id":"cl27aeoog000cy2u9h4oe1qry"},{"name":"Google Product","parent":"cl27aeoo90002y2u96bdy5bs9","_id":"cl27aeool000ky2u9f5y2acae"},{"name":"软件基础","_id":"cl27aeoom000qy2u92jq878sz"},{"name":"TypeScript","parent":"cl27aeooe0007y2u97u1a0h62","_id":"cl27aeoon000vy2u9bxk5g3hy"},{"name":"webpack","parent":"cl27aeooe0007y2u97u1a0h62","_id":"cl27aeooo000yy2u91mf56q82"},{"name":"模版引擎","parent":"cl27aeoog000cy2u9h4oe1qry","_id":"cl27aeooq0015y2u9eacx1vic"},{"name":"进程","parent":"cl27aeoog000cy2u9h4oe1qry","_id":"cl27aeoor0019y2u9gq98fgfw"},{"name":"eslint","parent":"cl27aeooe0007y2u97u1a0h62","_id":"cl27aeoor001cy2u940969h32"},{"name":"性能优化","parent":"cl27aeoom000qy2u92jq878sz","_id":"cl27aeoos001hy2u9e27tedq9"},{"name":"机器人脚本","_id":"cl28cv92q0001eou9ffqi66xt"},{"name":"discord","parent":"cl28cv92q0001eou9ffqi66xt","_id":"cl28cv92s0004eou9c9m886um"}],"Data":[],"Page":[],"Post":[{"title":"eslint 集成到 webpack","toc":true,"date":"2019-10-19T14:22:01.000Z","_content":"\neslint 的语法校验功能，已经成了很多框架为了做好规范的必备工具，来看看它在 webpack 中是怎么用的。\n\n<!-- more -->\n\n## 安装依赖\n\n```\nnpm install eslint -D\n```\n\n如果需要支持 `es6` 语法\n\n```js\nnpm install babel-eslint -D\n```\n\n## eslint 配置\n\n```json\n{\n  \"parser\": \"babel-eslint\", // 支持解析 es6 语法校验\n  \"rules\": {\n    \"semi\": [\n      // 结尾分号控制\n      \"error\",\n      \"always\" // 必须加分号\n    ],\n    \"quotes\": [\n      // 引号控制\n      \"error\",\n      \"single\" // 必须是单引号\n    ]\n  }\n}\n```\n\n## webpack 配置\n\n```js\n{\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        enforce: 'pre',\n        use: 'eslint-loader',\n        include: resolve('src'),\n        exclude: resolve('node_modules')\n      }\n    ]\n  },\n    plugins: [\n      new webpack.LoaderOptionsPlugin({\n        options: {\n          eslint: {\n            configFile: resolve('.eslintrc.json'),\n            failOnWarning: true, // eslint 报 warning 就停止 webpack 编译\n            failOnError: false, // eslint 报 error 就停止 webpack 编译\n            cache: true // 开启缓存，加快编译速度\n          }\n        }\n      })\n    ]\n}\n```\n\n## 小结\n\nwebpack 在配置 eslint-loader 的时候，有一个 `inforce: 'pre'` 的配置项。这个和 webpack 的 loader 的执行顺序有关，关于这个就是另一个话题了。\n\n<!-- 555 -->\n","source":"_posts/01_eslint-集成到-webpack.md","raw":"---\ntitle: eslint 集成到 webpack\ntoc: true\ndate: 2019-10-19 22:22:01\ncategories:\n  - 前端\n  - eslint\ntags: NodeJS\n---\n\neslint 的语法校验功能，已经成了很多框架为了做好规范的必备工具，来看看它在 webpack 中是怎么用的。\n\n<!-- more -->\n\n## 安装依赖\n\n```\nnpm install eslint -D\n```\n\n如果需要支持 `es6` 语法\n\n```js\nnpm install babel-eslint -D\n```\n\n## eslint 配置\n\n```json\n{\n  \"parser\": \"babel-eslint\", // 支持解析 es6 语法校验\n  \"rules\": {\n    \"semi\": [\n      // 结尾分号控制\n      \"error\",\n      \"always\" // 必须加分号\n    ],\n    \"quotes\": [\n      // 引号控制\n      \"error\",\n      \"single\" // 必须是单引号\n    ]\n  }\n}\n```\n\n## webpack 配置\n\n```js\n{\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        enforce: 'pre',\n        use: 'eslint-loader',\n        include: resolve('src'),\n        exclude: resolve('node_modules')\n      }\n    ]\n  },\n    plugins: [\n      new webpack.LoaderOptionsPlugin({\n        options: {\n          eslint: {\n            configFile: resolve('.eslintrc.json'),\n            failOnWarning: true, // eslint 报 warning 就停止 webpack 编译\n            failOnError: false, // eslint 报 error 就停止 webpack 编译\n            cache: true // 开启缓存，加快编译速度\n          }\n        }\n      })\n    ]\n}\n```\n\n## 小结\n\nwebpack 在配置 eslint-loader 的时候，有一个 `inforce: 'pre'` 的配置项。这个和 webpack 的 loader 的执行顺序有关，关于这个就是另一个话题了。\n\n<!-- 555 -->\n","slug":"01_eslint-集成到-webpack","published":1,"updated":"2022-04-20T06:06:36.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl28cxhqa0007eou93jdw20aq","content":"<html><head></head><body><p>eslint 的语法校验功能，已经成了很多框架为了做好规范的必备工具，来看看它在 webpack 中是怎么用的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight cmake hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"hljs-keyword\">install</span> eslint -D</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果需要支持 <code>es6</code> 语法</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-eslint -D</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"eslint-配置\"><a href=\"#eslint-配置\" class=\"headerlink\" title=\"eslint 配置\"></a>eslint 配置</h2><figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"parser\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"babel-eslint\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 支持解析 es6 语法校验</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"rules\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">\"semi\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 结尾分号控制</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"error\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"always\"</span> <span class=\"hljs-comment\">// 必须加分号</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">\"quotes\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 引号控制</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"error\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"single\"</span> <span class=\"hljs-comment\">// 必须是单引号</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">}</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h2><figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-attr\">module</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">rules</span>: [</span><br><span class=\"line\">      {</span><br><span class=\"line\">        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">enforce</span>: <span class=\"hljs-string\">'pre'</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">'eslint-loader'</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">include</span>: <span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">'src'</span>),</span><br><span class=\"line\">        <span class=\"hljs-attr\">exclude</span>: <span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">'node_modules'</span>)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  },</span><br><span class=\"line\">    <span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"hljs-keyword\">new</span> webpack.<span class=\"title class_\">LoaderOptionsPlugin</span>({</span><br><span class=\"line\">        <span class=\"hljs-attr\">options</span>: {</span><br><span class=\"line\">          <span class=\"hljs-attr\">eslint</span>: {</span><br><span class=\"line\">            <span class=\"hljs-attr\">configFile</span>: <span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">'.eslintrc.json'</span>),</span><br><span class=\"line\">            <span class=\"hljs-attr\">failOnWarning</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// eslint 报 warning 就停止 webpack 编译</span></span><br><span class=\"line\">            <span class=\"hljs-attr\">failOnError</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// eslint 报 error 就停止 webpack 编译</span></span><br><span class=\"line\">            <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 开启缓存，加快编译速度</span></span><br><span class=\"line\">          }</span><br><span class=\"line\">        }</span><br><span class=\"line\">      })</span><br><span class=\"line\">    ]</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>webpack 在配置 eslint-loader 的时候，有一个 <code>inforce: 'pre'</code> 的配置项。这个和 webpack 的 loader 的执行顺序有关，关于这个就是另一个话题了。</p>\n<!-- 555 -->\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>eslint 的语法校验功能，已经成了很多框架为了做好规范的必备工具，来看看它在 webpack 中是怎么用的。</p></body></html>","more":"<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> eslint -D</span><br></pre></td></tr></table></figure>\n\n<p>如果需要支持 <code>es6</code> 语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-eslint -D</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"eslint-配置\"><a href=\"#eslint-配置\" class=\"headerlink\" title=\"eslint 配置\"></a>eslint 配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;parser&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;babel-eslint&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 支持解析 es6 语法校验</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;semi&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"comment\">// 结尾分号控制</span></span><br><span class=\"line\">      <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;always&quot;</span> <span class=\"comment\">// 必须加分号</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;quotes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"comment\">// 引号控制</span></span><br><span class=\"line\">      <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;single&quot;</span> <span class=\"comment\">// 必须是单引号</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">enforce</span>: <span class=\"string\">&#x27;pre&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"string\">&#x27;eslint-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">include</span>: <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;node_modules&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">LoaderOptionsPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">eslint</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">configFile</span>: <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;.eslintrc.json&#x27;</span>),</span><br><span class=\"line\">            <span class=\"attr\">failOnWarning</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// eslint 报 warning 就停止 webpack 编译</span></span><br><span class=\"line\">            <span class=\"attr\">failOnError</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// eslint 报 error 就停止 webpack 编译</span></span><br><span class=\"line\">            <span class=\"attr\">cache</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 开启缓存，加快编译速度</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>webpack 在配置 eslint-loader 的时候，有一个 <code>inforce: &#39;pre&#39;</code> 的配置项。这个和 webpack 的 loader 的执行顺序有关，关于这个就是另一个话题了。</p>\n<!-- 555 -->"},{"title":"ejs 原理实现","date":"2019-10-29T20:43:05.000Z","_content":"\n模板引擎是前端框架都会实现的技术，作为最早在前端框架中流行起来的模板引起，它的实现原理是怎样的呢？\n\n<!-- more -->\n\n### html 模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <% arr.forEach(item => { %>\n    <li><%=item%></li>\n    <% }) %>\n  </body>\n</html>\n```\n\n### 使用\n\n```javascript\nlet fs = require(\"fs\");\nlet ejs = require(\"ejs\");\n\nlet template = fs.readFileSync(\"上面的模板路径\", \"utf8\");\nejs.render(template, { arr: [1, 2, 3] });\n```\n\n### 渲染结果\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <li>1</li>\n\n    <li>2</li>\n\n    <li>3</li>\n  </body>\n</html>\n```\n\n### 思路分析\n\n- 根据 \"<%\" 或者 \"%>\"，代码可以分为三个部分\n  - <%前面的 html 代码\n  - <% 到 %> 之间的 js 代码\n  - %>后面的 html 代码\n- 处理逻辑\n  - 处理 <% js 代码 %> 之间的代码\n    - 将 <% 和 %>之间的 js 代码取出来\n    - 再把提取出来的 js 代码用一个函数包起来（这里 arr 变量的使用，靠 with 语法实现）\n    - 接着将这个函数，通过 new Function 的形式去声明并调用\n  - 处理 <%= item %>，即取值的情况\n    - 将匹配到的结果，用模板字符串的 ${} 包起来\n\n---\n\n**_with 语法：_**\n\n```html\nlet obj = { name: 1 } //\n传入一个对象，花括号里面可以直接使用这个对象的属性，而不需要用点去调用\nwith(obj){ console.log(name) }\n```\n\n·\n\n### 模拟实现\n\n```javascript\nfunction render(template, obj) {\n  let html = \"let str = '';\\r\\n\";\n  html += \"with(obj){\\r\\n\";\n  html += \"str += `\";\n\n  let content = template.replace(/<%([\\s\\S]+?)%>/g, (souceCode, targetCode) => {\n    return \"`\\r\\n\" + targetCode + \"\\r\\nstr+=`\";\n  });\n\n  template = template.replace(/<%=([\\s\\S]+?)%>/g, (souceCode, targetCode) => {\n    return \"${\" + targetCode + \"}\";\n  });\n\n  let result = html + content + \"`}\\r\\n return str\";\n  let fn = new Function(\"obj\", result);\n  return fn(obj);\n}\n```\n","source":"_posts/02_ejs 原理实现.md","raw":"---\ntitle: ejs 原理实现\ndate: 2019-10-30 04:43:05\ncategories:\n  - Node\n  - 模版引擎\ntags: 模板引擎\n---\n\n模板引擎是前端框架都会实现的技术，作为最早在前端框架中流行起来的模板引起，它的实现原理是怎样的呢？\n\n<!-- more -->\n\n### html 模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <% arr.forEach(item => { %>\n    <li><%=item%></li>\n    <% }) %>\n  </body>\n</html>\n```\n\n### 使用\n\n```javascript\nlet fs = require(\"fs\");\nlet ejs = require(\"ejs\");\n\nlet template = fs.readFileSync(\"上面的模板路径\", \"utf8\");\nejs.render(template, { arr: [1, 2, 3] });\n```\n\n### 渲染结果\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <li>1</li>\n\n    <li>2</li>\n\n    <li>3</li>\n  </body>\n</html>\n```\n\n### 思路分析\n\n- 根据 \"<%\" 或者 \"%>\"，代码可以分为三个部分\n  - <%前面的 html 代码\n  - <% 到 %> 之间的 js 代码\n  - %>后面的 html 代码\n- 处理逻辑\n  - 处理 <% js 代码 %> 之间的代码\n    - 将 <% 和 %>之间的 js 代码取出来\n    - 再把提取出来的 js 代码用一个函数包起来（这里 arr 变量的使用，靠 with 语法实现）\n    - 接着将这个函数，通过 new Function 的形式去声明并调用\n  - 处理 <%= item %>，即取值的情况\n    - 将匹配到的结果，用模板字符串的 ${} 包起来\n\n---\n\n**_with 语法：_**\n\n```html\nlet obj = { name: 1 } //\n传入一个对象，花括号里面可以直接使用这个对象的属性，而不需要用点去调用\nwith(obj){ console.log(name) }\n```\n\n·\n\n### 模拟实现\n\n```javascript\nfunction render(template, obj) {\n  let html = \"let str = '';\\r\\n\";\n  html += \"with(obj){\\r\\n\";\n  html += \"str += `\";\n\n  let content = template.replace(/<%([\\s\\S]+?)%>/g, (souceCode, targetCode) => {\n    return \"`\\r\\n\" + targetCode + \"\\r\\nstr+=`\";\n  });\n\n  template = template.replace(/<%=([\\s\\S]+?)%>/g, (souceCode, targetCode) => {\n    return \"${\" + targetCode + \"}\";\n  });\n\n  let result = html + content + \"`}\\r\\n return str\";\n  let fn = new Function(\"obj\", result);\n  return fn(obj);\n}\n```\n","slug":"02_ejs 原理实现","published":1,"updated":"2022-04-20T06:13:32.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl28cxtk8000beou99sj67mgx","content":"<html><head></head><body><p>模板引擎是前端框架都会实现的技术，作为最早在前端框架中流行起来的模板引起，它的实现原理是怎样的呢？</p>\n<span id=\"more\"></span>\n\n<h3 id=\"html-模板\"><a href=\"#html-模板\" class=\"headerlink\" title=\"html 模板\"></a>html 模板</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"line\">    &lt;% arr.forEach(item =&gt; { %&gt;</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&lt;%=item%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    &lt;% }) %&gt;</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ejs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"ejs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> template = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"hljs-string\">\"上面的模板路径\"</span>, <span class=\"hljs-string\">\"utf8\"</span>);</span><br><span class=\"line\">ejs.<span class=\"title function_\">render</span>(template, { <span class=\"hljs-attr\">arr</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] });</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"渲染结果\"><a href=\"#渲染结果\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><ul>\n<li>根据 “&lt;%” 或者 “%&gt;”，代码可以分为三个部分<ul>\n<li>&lt;%前面的 html 代码</li>\n<li>&lt;% 到 %&gt; 之间的 js 代码</li>\n<li>%&gt;后面的 html 代码</li>\n</ul>\n</li>\n<li>处理逻辑<ul>\n<li>处理 &lt;% js 代码 %&gt; 之间的代码<ul>\n<li>将 &lt;% 和 %&gt;之间的 js 代码取出来</li>\n<li>再把提取出来的 js 代码用一个函数包起来（这里 arr 变量的使用，靠 with 语法实现）</li>\n<li>接着将这个函数，通过 new Function 的形式去声明并调用</li>\n</ul>\n</li>\n<li>处理 &lt;%= item %&gt;，即取值的情况<ul>\n<li>将匹配到的结果，用模板字符串的 ${} 包起来</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong><em>with 语法：</em></strong></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = { name: 1 } //</span><br><span class=\"line\">传入一个对象，花括号里面可以直接使用这个对象的属性，而不需要用点去调用</span><br><span class=\"line\">with(obj){ console.log(name) }</span><br></pre></td></tr></tbody></table></figure>\n\n<p>·</p>\n<h3 id=\"模拟实现\"><a href=\"#模拟实现\" class=\"headerlink\" title=\"模拟实现\"></a>模拟实现</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"hljs-params\">template, obj</span>) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">\"let str = '';\\r\\n\"</span>;</span><br><span class=\"line\">  html += <span class=\"hljs-string\">\"with(obj){\\r\\n\"</span>;</span><br><span class=\"line\">  html += <span class=\"hljs-string\">\"str += `\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> content = template.<span class=\"title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;%([\\s\\S]+?)%&gt;/g</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">souceCode, targetCode</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"`\\r\\n\"</span> + targetCode + <span class=\"hljs-string\">\"\\r\\nstr+=`\"</span>;</span><br><span class=\"line\">  });</span><br><span class=\"line\"></span><br><span class=\"line\">  template = template.<span class=\"title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;%=([\\s\\S]+?)%&gt;/g</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">souceCode, targetCode</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"${\"</span> + targetCode + <span class=\"hljs-string\">\"}\"</span>;</span><br><span class=\"line\">  });</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> result = html + content + <span class=\"hljs-string\">\"`}\\r\\n return str\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"hljs-string\">\"obj\"</span>, result);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">fn</span>(obj);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>模板引擎是前端框架都会实现的技术，作为最早在前端框架中流行起来的模板引起，它的实现原理是怎样的呢？</p></body></html>","more":"<h3 id=\"html-模板\"><a href=\"#html-模板\" class=\"headerlink\" title=\"html 模板\"></a>html 模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    &lt;% arr.forEach(item =&gt; &#123; %&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&lt;%=item%&gt;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    &lt;% &#125;) %&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ejs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ejs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> template = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;上面的模板路径&quot;</span>, <span class=\"string\">&quot;utf8&quot;</span>);</span><br><span class=\"line\">ejs.<span class=\"title function_\">render</span>(template, &#123; <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果\"><a href=\"#渲染结果\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><ul>\n<li>根据 “&lt;%” 或者 “%&gt;”，代码可以分为三个部分<ul>\n<li>&lt;%前面的 html 代码</li>\n<li>&lt;% 到 %&gt; 之间的 js 代码</li>\n<li>%&gt;后面的 html 代码</li>\n</ul>\n</li>\n<li>处理逻辑<ul>\n<li>处理 &lt;% js 代码 %&gt; 之间的代码<ul>\n<li>将 &lt;% 和 %&gt;之间的 js 代码取出来</li>\n<li>再把提取出来的 js 代码用一个函数包起来（这里 arr 变量的使用，靠 with 语法实现）</li>\n<li>接着将这个函数，通过 new Function 的形式去声明并调用</li>\n</ul>\n</li>\n<li>处理 &lt;%&#x3D; item %&gt;，即取值的情况<ul>\n<li>将匹配到的结果，用模板字符串的 ${} 包起来</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong><em>with 语法：</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123; name: 1 &#125; //</span><br><span class=\"line\">传入一个对象，花括号里面可以直接使用这个对象的属性，而不需要用点去调用</span><br><span class=\"line\">with(obj)&#123; console.log(name) &#125;</span><br></pre></td></tr></table></figure>\n\n<p>·</p>\n<h3 id=\"模拟实现\"><a href=\"#模拟实现\" class=\"headerlink\" title=\"模拟实现\"></a>模拟实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">template, obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> html = <span class=\"string\">&quot;let str = &#x27;&#x27;;\\r\\n&quot;</span>;</span><br><span class=\"line\">  html += <span class=\"string\">&quot;with(obj)&#123;\\r\\n&quot;</span>;</span><br><span class=\"line\">  html += <span class=\"string\">&quot;str += `&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = template.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&lt;%([\\s\\S]+?)%&gt;/g</span>, <span class=\"function\">(<span class=\"params\">souceCode, targetCode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;`\\r\\n&quot;</span> + targetCode + <span class=\"string\">&quot;\\r\\nstr+=`&quot;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  template = template.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&lt;%=([\\s\\S]+?)%&gt;/g</span>, <span class=\"function\">(<span class=\"params\">souceCode, targetCode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;$&#123;&quot;</span> + targetCode + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = html + content + <span class=\"string\">&quot;`&#125;\\r\\n return str&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;obj&quot;</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"搭建 webpack 配置","toc":true,"date":"2019-11-02T11:30:04.000Z","_content":"\n## 什么是 Webpack？\n\nwebpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler),当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle\n\n<!-- more -->\n\n使用 Webpack 作为前端构建工具：\n\n- 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。\n- 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。\n- 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。\n- 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。\n- 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。\n- 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。\n- 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n**在`webpack`应用中有两个核心**:\n\n- 1. 模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块\n\n- 1. 扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n\n## 初始化项目\n\n```bash\n├── src   # 源码目录\n│   ├── a-module.js\n│   └── index.js\n```\n\n编写 _a-module.js_\n\n```javascript\nmodule.exports = \"hello\";\n```\n\n编写 _index.js_\n\n```javascript\nlet a = require(\"./a-module\");\nconsole.log(a);\n```\n\n> 这里我们使用`CommonJS`模块的方式引入，这种方式默认在浏览器上是无法运行的，我们希望通过  `webpack` 来进行打包！\n\n## webpack 快速上手\n\n### 安装\n\n```bash\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n```\n\n`webpack`默认支持 0 配置,配置`scripts`脚本\n\n```json\n\"scripts\": {\n  \"build\": \"webpack\"\n}\n```\n\n执行`npm run build`,默认会调用 `node_modules/.bin`下的`webpack`命令，内部会调用`webpack-cli`解析用户参数进行打包。默认会以 `src/index.js` 作为入口文件。\n\n> 这里也可以使用`npx webpack`,`npx` 是 5.2 版本之后`npm`提供的命令可以执行`.bin`下的可执行文件\n\n我们可以发现已经产生了`dist`目录，此目录为最终打包出的结果。`main.js`可以在 html 中直接引用,这里还提示我们默认`mode` 为`production`\n\n### webpack.config.js\n\n我们打包时一般不会采用 0 配置，`webpack`在打包时默认会查找当前目录下的 `webpack.config.js or webpackfile.js` 文件。\n\n通过配置文件进行打包\n\n```javascript\nconst path = require(\"path\");\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"bundle.js\", // 打包出的结果文件\n    path: path.resolve(__dirname, \"dist\"), // 打包到dist目录下\n  },\n};\n```\n\n## webpack-dev-server\n\n配置开发服务器，可以在实现在内存中打包,并且自动启动服务\n\n```bash\nnpm install webpack-dev-server --save-dev\n```\n\n```json\n\"scripts\": {\n    \"build\": \"webpack --env.production --config ./build/webpack.base\",\n    \"dev\": \"webpack-dev-server --env.development --config ./build/webpack.base\"\n}\n```\n\n通过执行`npm run dev`来启启动开发环境\n\n默认会在当前根目录下启动服务\n\n**配置开发服务的配置**\n\n```javascript\nconst path = require(\"path\");\nmodule.exports = {\n  mode: \"development\",\n  devServer: {\n    // 更改静态文件目录位置\n    contentBase: path.resolve(__dirname, \"../dist\"),\n    compress: true, // 开启gzip\n    port: 3000, // 更改端口号\n  },\n};\n```\n\n## 打包 Html 插件\n\n### 单入口打包\n\n自动产生 html，并引入打包后的文件\n\n编辑`webpack.base`文件\n\n```javascript\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: \"index.html\", // 打包出来的文件名\n    template: path.resolve(__dirname, \"../public/index.html\"),\n    hash: true, // 在引用资源的后面增加hash戳\n    minify: {\n      removeAttributeQuotes: true, // 删除属性双引号\n    },\n  }),\n];\n```\n\n### 多入口打包\n\n根据不同入口 生成多个 js 文件，引入到不同 html 中\n\n```bash\n── src\n    ├── entry-1.js\n    └── entry-2.js\n```\n\n多入口需要配置多个 entry\n\n```javascript\nentry:{\n    jquery:['jquery'], // 打包jquery\n    entry1:path.resolve(__dirname,'../src/entry-1.js'),\n    entry2:path.resolve(__dirname,'../src/entry-2.js')\n},\noutput:{\n    filename:'[name].js',\n    path:path.resolve(__dirname,'../dist')\n},\n```\n\n产生多个 Html 文件\n\n```javascript\nnew HtmlWebpackPlugin({\n  filename: \"index.html\",\n  template: path.resolve(__dirname, \"../public/template.html\"),\n  hash: true,\n  minify: {\n    removeAttributeQuotes: true,\n  },\n  chunks: [\"jquery\", \"entry1\"], // 引入的chunk 有jquery,entry\n}),\n  new HtmlWebpackPlugin({\n    filename: \"login.html\",\n    template: path.resolve(__dirname, \"../public/template.html\"),\n    hash: true,\n    minify: {\n      removeAttributeQuotes: true,\n    },\n    inject: false, // inject 为false表示不注入js文件\n    // 默认打包后引入文件的顺序，是根据入口的顺序来的。可以在这里设置 chunksSortMode，指定顺序为 chunks 里的顺序来\n    chunksSortMode: \"manual\",\n    chunks: [\"entry2\", \"jquery\"],\n  });\n```\n\n以上的方式不是很优雅，每次都需要手动添加`HtmlPlugin`应该动态产生`html`文件，可以像这样优化:\n\n```javascript\nlet htmlPlugins = [\n  {\n    entry: \"entry1\",\n    html: \"index.html\",\n  },\n  {\n    entry: \"entry2\",\n    html: \"login.html\",\n  },\n].map(\n  (item) =>\n    new HtmlWebpackPlugin({\n      filename: item.html,\n      template: path.resolve(__dirname, \"../public/template.html\"),\n      hash: true,\n      minify: {\n        removeAttributeQuotes: true,\n      },\n      chunks: [\"jquery\", item.entry],\n    })\n);\n\nplugins: [...htmlPlugins];\n```\n\n## 清空打包结果\n\n可以使用`clean-webpack-plugin`手动清除某个文件夹内容:\n\n**安装**\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n```javascript\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nnew CleanWebpackPlugin({\n  // 清空匹配的路径\n  cleanOnceBeforeBuildPatterns: [path.resolve(\"xxxx/*\"), \"**/*\"],\n});\n```\n\n这样就可以清空指定的目录了,我们可以看到`webpack`插件的基本用法就是 `new Plugin`并且放到`plugins`中\n","source":"_posts/03_搭建 webpack 配置.md","raw":"---\ntitle: 搭建 webpack 配置\ntoc: true\ndate: 2019-11-2 19:30:04\ncategories:\n  - 前端\n  - webpack\ntags: webpack\n---\n\n## 什么是 Webpack？\n\nwebpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler),当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle\n\n<!-- more -->\n\n使用 Webpack 作为前端构建工具：\n\n- 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。\n- 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。\n- 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。\n- 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。\n- 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。\n- 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。\n- 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n**在`webpack`应用中有两个核心**:\n\n- 1. 模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块\n\n- 1. 扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n\n## 初始化项目\n\n```bash\n├── src   # 源码目录\n│   ├── a-module.js\n│   └── index.js\n```\n\n编写 _a-module.js_\n\n```javascript\nmodule.exports = \"hello\";\n```\n\n编写 _index.js_\n\n```javascript\nlet a = require(\"./a-module\");\nconsole.log(a);\n```\n\n> 这里我们使用`CommonJS`模块的方式引入，这种方式默认在浏览器上是无法运行的，我们希望通过  `webpack` 来进行打包！\n\n## webpack 快速上手\n\n### 安装\n\n```bash\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n```\n\n`webpack`默认支持 0 配置,配置`scripts`脚本\n\n```json\n\"scripts\": {\n  \"build\": \"webpack\"\n}\n```\n\n执行`npm run build`,默认会调用 `node_modules/.bin`下的`webpack`命令，内部会调用`webpack-cli`解析用户参数进行打包。默认会以 `src/index.js` 作为入口文件。\n\n> 这里也可以使用`npx webpack`,`npx` 是 5.2 版本之后`npm`提供的命令可以执行`.bin`下的可执行文件\n\n我们可以发现已经产生了`dist`目录，此目录为最终打包出的结果。`main.js`可以在 html 中直接引用,这里还提示我们默认`mode` 为`production`\n\n### webpack.config.js\n\n我们打包时一般不会采用 0 配置，`webpack`在打包时默认会查找当前目录下的 `webpack.config.js or webpackfile.js` 文件。\n\n通过配置文件进行打包\n\n```javascript\nconst path = require(\"path\");\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"bundle.js\", // 打包出的结果文件\n    path: path.resolve(__dirname, \"dist\"), // 打包到dist目录下\n  },\n};\n```\n\n## webpack-dev-server\n\n配置开发服务器，可以在实现在内存中打包,并且自动启动服务\n\n```bash\nnpm install webpack-dev-server --save-dev\n```\n\n```json\n\"scripts\": {\n    \"build\": \"webpack --env.production --config ./build/webpack.base\",\n    \"dev\": \"webpack-dev-server --env.development --config ./build/webpack.base\"\n}\n```\n\n通过执行`npm run dev`来启启动开发环境\n\n默认会在当前根目录下启动服务\n\n**配置开发服务的配置**\n\n```javascript\nconst path = require(\"path\");\nmodule.exports = {\n  mode: \"development\",\n  devServer: {\n    // 更改静态文件目录位置\n    contentBase: path.resolve(__dirname, \"../dist\"),\n    compress: true, // 开启gzip\n    port: 3000, // 更改端口号\n  },\n};\n```\n\n## 打包 Html 插件\n\n### 单入口打包\n\n自动产生 html，并引入打包后的文件\n\n编辑`webpack.base`文件\n\n```javascript\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nplugins: [\n  new HtmlWebpackPlugin({\n    filename: \"index.html\", // 打包出来的文件名\n    template: path.resolve(__dirname, \"../public/index.html\"),\n    hash: true, // 在引用资源的后面增加hash戳\n    minify: {\n      removeAttributeQuotes: true, // 删除属性双引号\n    },\n  }),\n];\n```\n\n### 多入口打包\n\n根据不同入口 生成多个 js 文件，引入到不同 html 中\n\n```bash\n── src\n    ├── entry-1.js\n    └── entry-2.js\n```\n\n多入口需要配置多个 entry\n\n```javascript\nentry:{\n    jquery:['jquery'], // 打包jquery\n    entry1:path.resolve(__dirname,'../src/entry-1.js'),\n    entry2:path.resolve(__dirname,'../src/entry-2.js')\n},\noutput:{\n    filename:'[name].js',\n    path:path.resolve(__dirname,'../dist')\n},\n```\n\n产生多个 Html 文件\n\n```javascript\nnew HtmlWebpackPlugin({\n  filename: \"index.html\",\n  template: path.resolve(__dirname, \"../public/template.html\"),\n  hash: true,\n  minify: {\n    removeAttributeQuotes: true,\n  },\n  chunks: [\"jquery\", \"entry1\"], // 引入的chunk 有jquery,entry\n}),\n  new HtmlWebpackPlugin({\n    filename: \"login.html\",\n    template: path.resolve(__dirname, \"../public/template.html\"),\n    hash: true,\n    minify: {\n      removeAttributeQuotes: true,\n    },\n    inject: false, // inject 为false表示不注入js文件\n    // 默认打包后引入文件的顺序，是根据入口的顺序来的。可以在这里设置 chunksSortMode，指定顺序为 chunks 里的顺序来\n    chunksSortMode: \"manual\",\n    chunks: [\"entry2\", \"jquery\"],\n  });\n```\n\n以上的方式不是很优雅，每次都需要手动添加`HtmlPlugin`应该动态产生`html`文件，可以像这样优化:\n\n```javascript\nlet htmlPlugins = [\n  {\n    entry: \"entry1\",\n    html: \"index.html\",\n  },\n  {\n    entry: \"entry2\",\n    html: \"login.html\",\n  },\n].map(\n  (item) =>\n    new HtmlWebpackPlugin({\n      filename: item.html,\n      template: path.resolve(__dirname, \"../public/template.html\"),\n      hash: true,\n      minify: {\n        removeAttributeQuotes: true,\n      },\n      chunks: [\"jquery\", item.entry],\n    })\n);\n\nplugins: [...htmlPlugins];\n```\n\n## 清空打包结果\n\n可以使用`clean-webpack-plugin`手动清除某个文件夹内容:\n\n**安装**\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n```javascript\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nnew CleanWebpackPlugin({\n  // 清空匹配的路径\n  cleanOnceBeforeBuildPatterns: [path.resolve(\"xxxx/*\"), \"**/*\"],\n});\n```\n\n这样就可以清空指定的目录了,我们可以看到`webpack`插件的基本用法就是 `new Plugin`并且放到`plugins`中\n","slug":"03_搭建 webpack 配置","published":1,"updated":"2022-04-20T06:05:09.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl28cy3uz000feou9294naege","content":"<html><head></head><body><h2 id=\"什么是-Webpack？\"><a href=\"#什么是-Webpack？\" class=\"headerlink\" title=\"什么是 Webpack？\"></a>什么是 Webpack？</h2><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler),当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle</p>\n<span id=\"more\"></span>\n\n<p>使用 Webpack 作为前端构建工具：</p>\n<ul>\n<li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<p><strong>在<code>webpack</code>应用中有两个核心</strong>:</p>\n<ul>\n<li><ol>\n<li>模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块</li>\n</ol>\n</li>\n<li><ol>\n<li>扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── src   <span class=\"hljs-comment\"># 源码目录</span></span><br><span class=\"line\">│&nbsp;&nbsp; ├── a-module.js</span><br><span class=\"line\">│&nbsp;&nbsp; └── index.js</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编写 <em>a-module.js</em></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-string\">\"hello\"</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编写 <em>index.js</em></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./a-module\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>这里我们使用<code>CommonJS</code>模块的方式引入，这种方式默认在浏览器上是无法运行的，我们希望通过 &nbsp;<code>webpack</code> 来进行打包！</p>\n</blockquote>\n<h2 id=\"webpack-快速上手\"><a href=\"#webpack-快速上手\" class=\"headerlink\" title=\"webpack 快速上手\"></a>webpack 快速上手</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>webpack</code>默认支持 0 配置,配置<code>scripts</code>脚本</p>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"build\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"webpack\"</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>执行<code>npm run build</code>,默认会调用 <code>node_modules/.bin</code>下的<code>webpack</code>命令，内部会调用<code>webpack-cli</code>解析用户参数进行打包。默认会以 <code>src/index.js</code> 作为入口文件。</p>\n<blockquote>\n<p>这里也可以使用<code>npx webpack</code>,<code>npx</code> 是 5.2 版本之后<code>npm</code>提供的命令可以执行<code>.bin</code>下的可执行文件</p>\n</blockquote>\n<p>我们可以发现已经产生了<code>dist</code>目录，此目录为最终打包出的结果。<code>main.js</code>可以在 html 中直接引用,这里还提示我们默认<code>mode</code> 为<code>production</code></p>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><p>我们打包时一般不会采用 0 配置，<code>webpack</code>在打包时默认会查找当前目录下的 <code>webpack.config.js or webpackfile.js</code> 文件。</p>\n<p>通过配置文件进行打包</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">output</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"bundle.js\"</span>, <span class=\"hljs-comment\">// 打包出的结果文件</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"dist\"</span>), <span class=\"hljs-comment\">// 打包到dist目录下</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h2><p>配置开发服务器，可以在实现在内存中打包,并且自动启动服务</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">\"build\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"webpack --env.production --config ./build/webpack.base\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">\"dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"webpack-dev-server --env.development --config ./build/webpack.base\"</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>通过执行<code>npm run dev</code>来启启动开发环境</p>\n<p>默认会在当前根目录下启动服务</p>\n<p><strong>配置开发服务的配置</strong></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"development\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">devServer</span>: {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 更改静态文件目录位置</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">contentBase</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../dist\"</span>),</span><br><span class=\"line\">    <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 开启gzip</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>, <span class=\"hljs-comment\">// 更改端口号</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"打包-Html-插件\"><a href=\"#打包-Html-插件\" class=\"headerlink\" title=\"打包 Html 插件\"></a>打包 Html 插件</h2><h3 id=\"单入口打包\"><a href=\"#单入口打包\" class=\"headerlink\" title=\"单入口打包\"></a>单入口打包</h3><p>自动产生 html，并引入打包后的文件</p>\n<p>编辑<code>webpack.base</code>文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"index.html\"</span>, <span class=\"hljs-comment\">// 打包出来的文件名</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../public/index.html\"</span>),</span><br><span class=\"line\">    <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 在引用资源的后面增加hash戳</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">minify</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 删除属性双引号</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  }),</span><br><span class=\"line\">];</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"多入口打包\"><a href=\"#多入口打包\" class=\"headerlink\" title=\"多入口打包\"></a>多入口打包</h3><p>根据不同入口 生成多个 js 文件，引入到不同 html 中</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">── src</span><br><span class=\"line\">    ├── entry-1.js</span><br><span class=\"line\">    └── entry-2.js</span><br></pre></td></tr></tbody></table></figure>\n\n<p>多入口需要配置多个 entry</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">entry</span>:{</span><br><span class=\"line\">    <span class=\"hljs-attr\">jquery</span>:[<span class=\"hljs-string\">'jquery'</span>], <span class=\"hljs-comment\">// 打包jquery</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">entry1</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"hljs-string\">'../src/entry-1.js'</span>),</span><br><span class=\"line\">    <span class=\"hljs-attr\">entry2</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"hljs-string\">'../src/entry-2.js'</span>)</span><br><span class=\"line\">},</span><br><span class=\"line\"><span class=\"hljs-attr\">output</span>:{</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">'[name].js'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">path</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"hljs-string\">'../dist'</span>)</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>产生多个 Html 文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"index.html\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../public/template.html\"</span>),</span><br><span class=\"line\">  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">minify</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"hljs-attr\">chunks</span>: [<span class=\"hljs-string\">\"jquery\"</span>, <span class=\"hljs-string\">\"entry1\"</span>], <span class=\"hljs-comment\">// 引入的chunk 有jquery,entry</span></span><br><span class=\"line\">}),</span><br><span class=\"line\">  <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"login.html\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../public/template.html\"</span>),</span><br><span class=\"line\">    <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">minify</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">inject</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// inject 为false表示不注入js文件</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 默认打包后引入文件的顺序，是根据入口的顺序来的。可以在这里设置 chunksSortMode，指定顺序为 chunks 里的顺序来</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">chunksSortMode</span>: <span class=\"hljs-string\">\"manual\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">chunks</span>: [<span class=\"hljs-string\">\"entry2\"</span>, <span class=\"hljs-string\">\"jquery\"</span>],</span><br><span class=\"line\">  });</span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上的方式不是很优雅，每次都需要手动添加<code>HtmlPlugin</code>应该动态产生<code>html</code>文件，可以像这样优化:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> htmlPlugins = [</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"entry1\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-string\">\"index.html\"</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"entry2\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-string\">\"login.html\"</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">].<span class=\"title function_\">map</span>(</span><br><span class=\"line\">  <span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">filename</span>: item.<span class=\"hljs-property\">html</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../public/template.html\"</span>),</span><br><span class=\"line\">      <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">minify</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      },</span><br><span class=\"line\">      <span class=\"hljs-attr\">chunks</span>: [<span class=\"hljs-string\">\"jquery\"</span>, item.<span class=\"hljs-property\">entry</span>],</span><br><span class=\"line\">    })</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">plugins</span>: [...htmlPlugins];</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"清空打包结果\"><a href=\"#清空打包结果\" class=\"headerlink\" title=\"清空打包结果\"></a>清空打包结果</h2><p>可以使用<code>clean-webpack-plugin</code>手动清除某个文件夹内容:</p>\n<p><strong>安装</strong></p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> { <span class=\"title class_\">CleanWebpackPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>({</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 清空匹配的路径</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">cleanOnceBeforeBuildPatterns</span>: [path.<span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">\"xxxx/*\"</span>), <span class=\"hljs-string\">\"**/*\"</span>],</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这样就可以清空指定的目录了,我们可以看到<code>webpack</code>插件的基本用法就是 <code>new Plugin</code>并且放到<code>plugins</code>中</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><h2 id=\"什么是-Webpack？\"><a href=\"#什么是-Webpack？\" class=\"headerlink\" title=\"什么是 Webpack？\"></a>什么是 Webpack？</h2><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler),当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle</p></body></html>","more":"<p>使用 Webpack 作为前端构建工具：</p>\n<ul>\n<li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<p><strong>在<code>webpack</code>应用中有两个核心</strong>:</p>\n<ul>\n<li><ol>\n<li>模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块</li>\n</ol>\n</li>\n<li><ol>\n<li>扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── src   <span class=\"comment\"># 源码目录</span></span><br><span class=\"line\">│   ├── a-module.js</span><br><span class=\"line\">│   └── index.js</span><br></pre></td></tr></table></figure>\n\n<p>编写 <em>a-module.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>编写 <em>index.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./a-module&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里我们使用<code>CommonJS</code>模块的方式引入，这种方式默认在浏览器上是无法运行的，我们希望通过  <code>webpack</code> 来进行打包！</p>\n</blockquote>\n<h2 id=\"webpack-快速上手\"><a href=\"#webpack-快速上手\" class=\"headerlink\" title=\"webpack 快速上手\"></a>webpack 快速上手</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack</code>默认支持 0 配置,配置<code>scripts</code>脚本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行<code>npm run build</code>,默认会调用 <code>node_modules/.bin</code>下的<code>webpack</code>命令，内部会调用<code>webpack-cli</code>解析用户参数进行打包。默认会以 <code>src/index.js</code> 作为入口文件。</p>\n<blockquote>\n<p>这里也可以使用<code>npx webpack</code>,<code>npx</code> 是 5.2 版本之后<code>npm</code>提供的命令可以执行<code>.bin</code>下的可执行文件</p>\n</blockquote>\n<p>我们可以发现已经产生了<code>dist</code>目录，此目录为最终打包出的结果。<code>main.js</code>可以在 html 中直接引用,这里还提示我们默认<code>mode</code> 为<code>production</code></p>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><p>我们打包时一般不会采用 0 配置，<code>webpack</code>在打包时默认会查找当前目录下的 <code>webpack.config.js or webpackfile.js</code> 文件。</p>\n<p>通过配置文件进行打包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span>, <span class=\"comment\">// 打包出的结果文件</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>), <span class=\"comment\">// 打包到dist目录下</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h2><p>配置开发服务器，可以在实现在内存中打包,并且自动启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --env.production --config ./build/webpack.base&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack-dev-server --env.development --config ./build/webpack.base&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过执行<code>npm run dev</code>来启启动开发环境</p>\n<p>默认会在当前根目录下启动服务</p>\n<p><strong>配置开发服务的配置</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更改静态文件目录位置</span></span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启gzip</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"comment\">// 更改端口号</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包-Html-插件\"><a href=\"#打包-Html-插件\" class=\"headerlink\" title=\"打包 Html 插件\"></a>打包 Html 插件</h2><h3 id=\"单入口打包\"><a href=\"#单入口打包\" class=\"headerlink\" title=\"单入口打包\"></a>单入口打包</h3><p>自动产生 html，并引入打包后的文件</p>\n<p>编辑<code>webpack.base</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.html&quot;</span>, <span class=\"comment\">// 打包出来的文件名</span></span><br><span class=\"line\">    <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../public/index.html&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在引用资源的后面增加hash戳</span></span><br><span class=\"line\">    <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 删除属性双引号</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多入口打包\"><a href=\"#多入口打包\" class=\"headerlink\" title=\"多入口打包\"></a>多入口打包</h3><p>根据不同入口 生成多个 js 文件，引入到不同 html 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">── src</span><br><span class=\"line\">    ├── entry-1.js</span><br><span class=\"line\">    └── entry-2.js</span><br></pre></td></tr></table></figure>\n\n<p>多入口需要配置多个 entry</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">jquery</span>:[<span class=\"string\">&#x27;jquery&#x27;</span>], <span class=\"comment\">// 打包jquery</span></span><br><span class=\"line\">    <span class=\"attr\">entry1</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../src/entry-1.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">entry2</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../src/entry-2.js&#x27;</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../dist&#x27;</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>产生多个 Html 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.html&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">chunks</span>: [<span class=\"string\">&quot;jquery&quot;</span>, <span class=\"string\">&quot;entry1&quot;</span>], <span class=\"comment\">// 引入的chunk 有jquery,entry</span></span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;login.html&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">inject</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// inject 为false表示不注入js文件</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认打包后引入文件的顺序，是根据入口的顺序来的。可以在这里设置 chunksSortMode，指定顺序为 chunks 里的顺序来</span></span><br><span class=\"line\">    <span class=\"attr\">chunksSortMode</span>: <span class=\"string\">&quot;manual&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunks</span>: [<span class=\"string\">&quot;entry2&quot;</span>, <span class=\"string\">&quot;jquery&quot;</span>],</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上的方式不是很优雅，每次都需要手动添加<code>HtmlPlugin</code>应该动态产生<code>html</code>文件，可以像这样优化:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> htmlPlugins = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;entry1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">html</span>: <span class=\"string\">&quot;index.html&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;entry2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">html</span>: <span class=\"string\">&quot;login.html&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">].<span class=\"title function_\">map</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: item.<span class=\"property\">html</span>,</span><br><span class=\"line\">      <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">      <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: [<span class=\"string\">&quot;jquery&quot;</span>, item.<span class=\"property\">entry</span>],</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [...htmlPlugins];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清空打包结果\"><a href=\"#清空打包结果\" class=\"headerlink\" title=\"清空打包结果\"></a>清空打包结果</h2><p>可以使用<code>clean-webpack-plugin</code>手动清除某个文件夹内容:</p>\n<p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清空匹配的路径</span></span><br><span class=\"line\">  <span class=\"attr\">cleanOnceBeforeBuildPatterns</span>: [path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;xxxx/*&quot;</span>), <span class=\"string\">&quot;**/*&quot;</span>],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以清空指定的目录了,我们可以看到<code>webpack</code>插件的基本用法就是 <code>new Plugin</code>并且放到<code>plugins</code>中</p>"},{"title":"webpack 优化","toc":true,"date":"2019-11-07T11:26:42.000Z","_content":"\n了解 webpack 常见的配置之后，再来看看如何实现 webpack 中的优化\n\n<!-- more -->\n\n```javascript\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst path = require(\"path\");\nmodule.exports = (mode) => {\n  return {\n    mode: mode,\n    entry: \"./src/main.js\",\n    output: {\n      filename: \"bundle.js\",\n      path: path.resolve(__dirname, \"dist\"),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.(png|jpg|gif)$/,\n          use: \"file-loader\",\n        },\n        {\n          test: /\\.js$/,\n          use: \"babel-loader\", // .babelrc已经配置支持react\n        },\n        {\n          test: /\\.css$/,\n          use: [\n            mode !== \"development\"\n              ? MiniCssExtractPlugin.loader\n              : \"style-loader\",\n            \"css-loader\",\n          ],\n        },\n      ],\n    },\n    plugins: [\n      new PurgecssPlugin({\n        paths: glob.sync(`${path.join(__dirname, \"src\")}/**/*`, {\n          nodir: true,\n        }), // 不匹配目录，只匹配文件\n      }),\n      mode !== \"development\" &&\n        new MiniCssExtractPlugin({\n          filename: \"css/[name].css\",\n        }),\n      new HtmlWebpackPlugin({\n        template: \"./src/template.html\",\n        filename: \"index.html\",\n      }),\n    ].filter(Boolean),\n  };\n};\n```\n\n`.babelrc`配置文件\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```\n\n## 1.删除无用的 Css 样式\n\n先来看编写的代码\n\n```javascript\nimport \"./style.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<div>hello</div>, document.getElementById(\"root\"));\n```\n\n```css\nbody {\n  background: red;\n}\n\n.class1 {\n  background: red;\n}\n```\n\n> 这里的`.class1`显然是无用的，我们可以搜索`src`目录下的文件，删除无用的样式\n\n```javascript\nconst glob = require('glob');\nconst PurgecssPlugin = require('purgecss-webpack-plugin');\n\n// 需要配合mini-css-extract-plugin插件\nmode !== \"development\" && new PurgecssPlugin({\n    paths: glob.sync(`${path.join(__dirname, \"src\")}/**/*`, { nodir: true }) // 不匹配目录，只匹配文件\n}),\n```\n\n> **注意：动态 class 会被删掉**\n\n## 2.图片压缩插件\n\n将打包后的图片进行优化\n\n```\nnpm install image-webpack-loader --save-dev\n```\n\n在 file-loader 之前使用压缩图片插件\n\n```javascript\n{\n\tloader: \"image-webpack-loader\",\n  options: {\n    mozjpeg: {\n      progressive: true,\n      quality: 65\n    },\n    optipng: {\n      enabled: false,\n    },\n    pngquant: {\n      quality: [0.90, 0.95],\n      speed: 4\n    },\n    gifsicle: {\n      interlaced: false,\n    },\n    webp: {\n      quality: 75\n    }\n  }\n}\n```\n\n> 可以发现图片大小是有了明显的变化\n\n## 3.CDN 加载文件\n\n我们希望通过 cdn 的方式引入资源\n\n```javascript\nconst AddAssetHtmlCdnPlugin = require(\"add-asset-html-cdn-webpack-plugin\");\nnew AddAssetHtmlCdnPlugin(true, {\n  jquery: \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\",\n});\n```\n\n但是在代码中还希望引入`jquery`来获得提示\n\n```javascript\nimport $ from \"jquery\";\nconsole.log(\"$\", $);\n```\n\n但是打包时依然会将`jquery`进行打包\n\n```javascript\nexternals:{\n  'jquery':'$'\n}\n```\n\n那么就在配置文件中设置 `externals` ，标注`jquery`是外部的，这样打包时就不会将 jquery 进行打包了\n\n## 4.Tree-shaking && Scope-Hoisting\n\n### 4.1 Tree-shaking\n\n顾名思义就是将没用的内容摇晃掉,来看下面代码\n\n`main.js`\n\n```javascript\nimport { minus } from \"./calc\";\nconsole.log(minus(1, 1));\n```\n\n`calc.js`\n\n```javascript\nimport { test } from \"./test\";\n\nexport const sum = (a, b) => {\n  return a + b + \"sum\";\n};\n\nexport const minus = (a, b) => {\n  return a - b + \"minus\";\n};\n```\n\n`test.js`\n\n```javascript\nexport const test = () => {\n  console.log(\"hello\");\n};\nconsole.log(test());\n```\n\n> 观察上述代码其实我们主要使用`minus`方法,`test.js`代码属于副作用代码!\n\n默认`mode:production`时，会自动`tree-shaking`,但是副作用代码却不会清除掉。打包后`'hello'`依然会被打印出来,这时候我们需要在`package.json`中，配置不使用副作用。\n\n```json\n\"sideEffects\":false,\n```\n\n这样设置后，副作用代码就不会被打包，但是对于`css`文件就会有影响了，因为我们 `css` 也是通过`import './style.css'`来引入的。\n\n这里重点就来了,`tree-shaking`主要针对**es6 模块**,我们可以使用`require`语法导入 css,但是这样用起来有点格格不入,所以我们可以配置`css`文件不是副作用\n\n```javascript\n\"sideEffects\":[\n    \"**/*.css\"\n]\n```\n\n在开发环境下默认`tree-shaking`不会生效, 可以配置标识提示只能在开发模式下使用。\n\n```javascript\noptimization: {\n  usedExports: true;\n}\n```\n\n### 4.2 Scope Hoisting\n\n作用域提升,可以减少代码体积，节约内存。（webpack 自带了，无需配置）\n\n```javascript\nlet a = 1;\nlet b = 2;\nlet c = 3;\nlet d = a + b + c;\n\nexport default d;\n\n// 引入d\nimport d from \"./d\";\nconsole.log(d);\n```\n\n> 最终打包后的结果会变成 `console.log(6)`\n\n- 代码量明显减少\n- 减少多个函数后内存占用也将减少\n\n## 5.DllPlugin && DllReferencePlugin\n\n每次构建时第三方模块都需要重新构建，这个性能消耗比较大，我们可以先把第三方库打包成动态链接库，以后构建时只需要查找构建好的库就好了，这样可以大大节约构建时间\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<h1>hello</h1>, document.getElementById(\"root\"));\n```\n\n### 5.1 DllPlugin\n\n> 这里我们可以先将`react`、`react-dom`单独进行打包\n\n单独打包创建`webpack.dll.js`\n\n```javascript\nconst path = require(\"path\");\nconst DllPlugin = require(\"webpack/lib/DllPlugin\");\n\nmodule.exports = {\n  entry: [\"react\", \"react-dom\"],\n  mode: \"production\",\n  output: {\n    filename: \"react.dll.js\",\n    path: path.resolve(__dirname, \"dll\"),\n    library: \"react\",\n  },\n  plugins: [\n    new DllPlugin({\n      name: \"react\",\n\n      // 生成的第三方模块映射表，便于快速查找\n      path: path.resolve(__dirname, \"dll/manifest.json\"),\n    }),\n  ],\n};\n```\n\n执行`\"webpack --config webpack.dll.js`命令，可以看到 dll 目录下创建了两个文件分别是`manifest.json`,`react.dll.js`\n\n关系是这个酱紫的，到时候我们会通过`manifest.json`找到`react.dll.js`文件中的模块进行加载\n\n### 5.2 DllReferencePlugin\n\n在我们的项目中可以引用刚才打包好的动态链接库\n\n```javascript\nconst DllReferencePlugin = require(\"webpack/lib/DllReferencePlugin\");\nconst AddAssetHtmlWebpackPlugin = require(\"add-asset-html-webpack-plugin\");\n\nplugins: [\n  // 构建时会引用动态链接库的内容\n  new DllReferencePlugin({\n    manifest: path.resolve(__dirname, \"dll/manifest.json\"),\n  }),\n\n  // 需要手动引入react.dll.js\n  new AddAssetHtmlWebpackPlugin({\n    filepath: path.resolve(__dirname, \"dll/react.dll.js\"),\n  }),\n];\n```\n\n使用 DllPlugin 可以大幅度提高构建速度\n\n## 6.动态加载\n\n实现点击后动态加载文件\n\n```javascript\nlet btn = document.createElement(\"button\");\nbtn.innerHTML = \"点击加载视频\";\nbtn.addEventListener(\"click\", () => {\n  import(\"./video\").then((res) => {\n    console.log(res.default);\n  });\n});\ndocument.body.appendChild(btn);\n```\n\n给动态引入的文件增加名字\n\n```javascript\noutput: {\n  chunkFilename: \"[name].min.js\";\n}\n\n// 下面的注释是魔术字符串\nimport(/* webpackChunkName: \"video\" */ \"./video\").then((res) => {\n  console.log(res.default);\n});\n```\n\n> 这样打包后的结果最终的文件就是 `video.min.js`\n\n## 7.打包文件分析工具\n\n安装`webpack-bundle-analyzer`插件\n\n```\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n使用插件\n\n```javascript\nconst { BundleAnalyzerPlugin } = require(\"webpack-bundle-analyzer\");\n\nmode !== \"development\" && new BundleAnalyzerPlugin();\n```\n\n默认就会展现当前应用的分析图表\n\n## 8.SplitChunks\n\n> **注意：不要和动态链接库的配置一起写，会有冲突。一般动态链接库在开发模式下用，代码分割在生产模式下用。**\n\n我们在来看下 SplitChunks 这个配置，他可以在编译时抽离第三方模块、公共模块\n\n将项目配置成多入口文件\n\n```javascript\nentry:{\n  a:'./src/a.js',\n  b:'./src/b.js'\n}\n```\n\n我们让 a,b 两个模块同时引用`jquery`, 别忘了去掉之前的`externals`配置\n\n`SplitChunks`插件的默认配置\n\n```javascript\noptimization: {\n\tsplitChunks: {\n    chunks: 'async', // 分割异步模块。可选参数：inital 同步、async 异步、all 所有\n    minSize: 30000, // 分割的文件最小大小，单位：字节\n    maxSize: 0,\n    minChunks: 1, // 引用次数\n    maxAsyncRequests: 5, // 最大异步请求数，简单来说，不能用超过五个 script 加载\n    maxInitialRequests: 3, // 最大初始化请求数\n    automaticNameDelimiter: '~', // 抽离的命名分隔符\n    automaticNameMaxLength: 30, // 名字最大长度\n    name: true,\n\n    /*\n      缓存组：主要用于匹配抽离模块的位置。\n      下面的 vendors 配置，如果在 node_modules 里找不到，就会去 default 里找\n    */\n\n    cacheGroups: {\n      // 指定分割 react、react-dom\n      react: {\n        test: /[\\\\/]node_modules[\\\\/](react)|(react-dom)/,\n        priority: 1 // 优先级\n      }\n      ,\n      // 分割第三方\n      vendors: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        priority: -10\n      },\n\n      // 再分割自定义模块\n      default: {\n        minChunks: 2, // 覆盖原来的配置，至少引用2次才分割\n        priority: -20,\n        reuseExistingChunk: true\n      }\n    }\n  }\n}\n```\n\n> 我们将`async`改为`initial`\n\n我们在为每个文件动态导入`lodash`库,并且改成`async`\n\n```javascript\nimport(\"lodash\");\n```\n\n> 为每个入口引入`c.js`,并且改造配置文件\n\n```javascript\nsplitChunks: {\n  chunks: 'all',\n  name: true,\n  cacheGroups: {\n    vendors: {\n      test: /[\\\\/]node_modules[\\\\/]/,\n      priority: -10\n    },\n    default: {\n      minSize:1, // 不是第三方模块，被引入两次也会被抽离\n      minChunks: 2,\n      priority: -20,\n    }\n  }\n}\n```\n\n> 这样再反过来看`chunks`的参数是不是就了然于胸啦！\n\n## 9.热更新\n\n模块热替换（HMR - Hot Module Replacement）是 webpack 提供的最有用的功能之一。它允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面\n\n- 保留在完全重新加载页面时丢失的应用程序的状态\n- 只更新改变的内容，以节省开发时间\n- 调整样式更加快速，几乎等同于就在浏览器调试器中更改样式\n\n启用热更新，默认样式可以支持热更新，如果不支持热更新则采用强制刷新\n\n```javascript\ndevServer:{\n  hot:true\n}\nnew webpack.NamedModulesPlugin(),\n```\n\n让`js`支持热更新\n\n```javascript\nimport sum from \"./sum\";\nconsole.log(sum(1, 2));\nif (module.hot) {\n  // 如果支持热更新\n  module.hot.accept(); // 当入口文件变化后重新执行当前入口文件\n}\n```\n\n## 10.IgnorePlugin\n\n忽略 `import`和`require`语法\n\n```javascript\nnew webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/);\n```\n\n## 11.费时分析\n\n可以计算每一步模块执行的运行速度\n\n```javascript\nconst SpeedMeasureWebpackPlugin = require(\"speed-measure-webpack-plugin\");\nconst smw = new SpeedMeasureWebpackPlugin();\n\n// 包裹所有配置\nmodule.exports = smw.wrap({});\n```\n\n## 12.noParse\n\n`module.noParse`，对类似 jq 这类依赖库，内部不会引用其他库，我们在打包的时候就没有必要去解析，这样能够增加打包速率\n\n```javascript\nnoParse: /jquery/;\n```\n\n## 13.resolve\n\n```javascript\nresolve: {\n  extensions: [\".js\",\".jsx\",\".json\",\".css\"],\n  alias:{}, // 配置别名\n  modules:['node_modules']\n},\n```\n\n## 14.include/exclude\n\n在使用`loader`时,可以指定哪些文件不通过`loader`,或者指定哪些文件通过`loader`\n\n```javascript\n{\n  test: /\\.js$/,\n  use: \"babel-loader\",\n  // include:path.resolve(__dirname,'src'),\n  exclude:/node_modules/\n},\n```\n\n## 15.多线程打包\n\n多线程打包，我们可以将不同的逻辑交给不同的线程来处理。\n\n> **注意：当项目比较大的时候使用比较和好，因为分配线程本身就需要消耗内存的，如果项目规模很小，一个线程就足够了，那么用更多的线程反而更加浪费。**\n\n```bash\nnpm install --save-dev happypack\n```\n\n使用插件\n\n```javascript\nconst HappyPack = require(\"happypack\");\n\nrules: [\n  {\n    test: /\\.js$/,\n    use: \"happypack/loader?id=jsx\",\n  },\n\n  {\n    test: /\\.less$/,\n    use: \"happypack/loader?id=styles\",\n  },\n];\n\nnew HappyPack({\n  id: \"jsx\",\n  threads: 4,\n  loaders: [\"babel-loader\"],\n}),\n  new HappyPack({\n    id: \"styles\",\n    threads: 2,\n    loaders: [\"style-loader\", \"css-loader\", \"less-loader\"],\n  });\n```\n","source":"_posts/05_webpack 优化.md","raw":"---\ntitle: webpack 优化\ntoc: true\ndate: 2019-11-7 19:26:42\ncategories:\n  - 前端\n  - webpack\ntags: webpack\n---\n\n了解 webpack 常见的配置之后，再来看看如何实现 webpack 中的优化\n\n<!-- more -->\n\n```javascript\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst path = require(\"path\");\nmodule.exports = (mode) => {\n  return {\n    mode: mode,\n    entry: \"./src/main.js\",\n    output: {\n      filename: \"bundle.js\",\n      path: path.resolve(__dirname, \"dist\"),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.(png|jpg|gif)$/,\n          use: \"file-loader\",\n        },\n        {\n          test: /\\.js$/,\n          use: \"babel-loader\", // .babelrc已经配置支持react\n        },\n        {\n          test: /\\.css$/,\n          use: [\n            mode !== \"development\"\n              ? MiniCssExtractPlugin.loader\n              : \"style-loader\",\n            \"css-loader\",\n          ],\n        },\n      ],\n    },\n    plugins: [\n      new PurgecssPlugin({\n        paths: glob.sync(`${path.join(__dirname, \"src\")}/**/*`, {\n          nodir: true,\n        }), // 不匹配目录，只匹配文件\n      }),\n      mode !== \"development\" &&\n        new MiniCssExtractPlugin({\n          filename: \"css/[name].css\",\n        }),\n      new HtmlWebpackPlugin({\n        template: \"./src/template.html\",\n        filename: \"index.html\",\n      }),\n    ].filter(Boolean),\n  };\n};\n```\n\n`.babelrc`配置文件\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```\n\n## 1.删除无用的 Css 样式\n\n先来看编写的代码\n\n```javascript\nimport \"./style.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<div>hello</div>, document.getElementById(\"root\"));\n```\n\n```css\nbody {\n  background: red;\n}\n\n.class1 {\n  background: red;\n}\n```\n\n> 这里的`.class1`显然是无用的，我们可以搜索`src`目录下的文件，删除无用的样式\n\n```javascript\nconst glob = require('glob');\nconst PurgecssPlugin = require('purgecss-webpack-plugin');\n\n// 需要配合mini-css-extract-plugin插件\nmode !== \"development\" && new PurgecssPlugin({\n    paths: glob.sync(`${path.join(__dirname, \"src\")}/**/*`, { nodir: true }) // 不匹配目录，只匹配文件\n}),\n```\n\n> **注意：动态 class 会被删掉**\n\n## 2.图片压缩插件\n\n将打包后的图片进行优化\n\n```\nnpm install image-webpack-loader --save-dev\n```\n\n在 file-loader 之前使用压缩图片插件\n\n```javascript\n{\n\tloader: \"image-webpack-loader\",\n  options: {\n    mozjpeg: {\n      progressive: true,\n      quality: 65\n    },\n    optipng: {\n      enabled: false,\n    },\n    pngquant: {\n      quality: [0.90, 0.95],\n      speed: 4\n    },\n    gifsicle: {\n      interlaced: false,\n    },\n    webp: {\n      quality: 75\n    }\n  }\n}\n```\n\n> 可以发现图片大小是有了明显的变化\n\n## 3.CDN 加载文件\n\n我们希望通过 cdn 的方式引入资源\n\n```javascript\nconst AddAssetHtmlCdnPlugin = require(\"add-asset-html-cdn-webpack-plugin\");\nnew AddAssetHtmlCdnPlugin(true, {\n  jquery: \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\",\n});\n```\n\n但是在代码中还希望引入`jquery`来获得提示\n\n```javascript\nimport $ from \"jquery\";\nconsole.log(\"$\", $);\n```\n\n但是打包时依然会将`jquery`进行打包\n\n```javascript\nexternals:{\n  'jquery':'$'\n}\n```\n\n那么就在配置文件中设置 `externals` ，标注`jquery`是外部的，这样打包时就不会将 jquery 进行打包了\n\n## 4.Tree-shaking && Scope-Hoisting\n\n### 4.1 Tree-shaking\n\n顾名思义就是将没用的内容摇晃掉,来看下面代码\n\n`main.js`\n\n```javascript\nimport { minus } from \"./calc\";\nconsole.log(minus(1, 1));\n```\n\n`calc.js`\n\n```javascript\nimport { test } from \"./test\";\n\nexport const sum = (a, b) => {\n  return a + b + \"sum\";\n};\n\nexport const minus = (a, b) => {\n  return a - b + \"minus\";\n};\n```\n\n`test.js`\n\n```javascript\nexport const test = () => {\n  console.log(\"hello\");\n};\nconsole.log(test());\n```\n\n> 观察上述代码其实我们主要使用`minus`方法,`test.js`代码属于副作用代码!\n\n默认`mode:production`时，会自动`tree-shaking`,但是副作用代码却不会清除掉。打包后`'hello'`依然会被打印出来,这时候我们需要在`package.json`中，配置不使用副作用。\n\n```json\n\"sideEffects\":false,\n```\n\n这样设置后，副作用代码就不会被打包，但是对于`css`文件就会有影响了，因为我们 `css` 也是通过`import './style.css'`来引入的。\n\n这里重点就来了,`tree-shaking`主要针对**es6 模块**,我们可以使用`require`语法导入 css,但是这样用起来有点格格不入,所以我们可以配置`css`文件不是副作用\n\n```javascript\n\"sideEffects\":[\n    \"**/*.css\"\n]\n```\n\n在开发环境下默认`tree-shaking`不会生效, 可以配置标识提示只能在开发模式下使用。\n\n```javascript\noptimization: {\n  usedExports: true;\n}\n```\n\n### 4.2 Scope Hoisting\n\n作用域提升,可以减少代码体积，节约内存。（webpack 自带了，无需配置）\n\n```javascript\nlet a = 1;\nlet b = 2;\nlet c = 3;\nlet d = a + b + c;\n\nexport default d;\n\n// 引入d\nimport d from \"./d\";\nconsole.log(d);\n```\n\n> 最终打包后的结果会变成 `console.log(6)`\n\n- 代码量明显减少\n- 减少多个函数后内存占用也将减少\n\n## 5.DllPlugin && DllReferencePlugin\n\n每次构建时第三方模块都需要重新构建，这个性能消耗比较大，我们可以先把第三方库打包成动态链接库，以后构建时只需要查找构建好的库就好了，这样可以大大节约构建时间\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<h1>hello</h1>, document.getElementById(\"root\"));\n```\n\n### 5.1 DllPlugin\n\n> 这里我们可以先将`react`、`react-dom`单独进行打包\n\n单独打包创建`webpack.dll.js`\n\n```javascript\nconst path = require(\"path\");\nconst DllPlugin = require(\"webpack/lib/DllPlugin\");\n\nmodule.exports = {\n  entry: [\"react\", \"react-dom\"],\n  mode: \"production\",\n  output: {\n    filename: \"react.dll.js\",\n    path: path.resolve(__dirname, \"dll\"),\n    library: \"react\",\n  },\n  plugins: [\n    new DllPlugin({\n      name: \"react\",\n\n      // 生成的第三方模块映射表，便于快速查找\n      path: path.resolve(__dirname, \"dll/manifest.json\"),\n    }),\n  ],\n};\n```\n\n执行`\"webpack --config webpack.dll.js`命令，可以看到 dll 目录下创建了两个文件分别是`manifest.json`,`react.dll.js`\n\n关系是这个酱紫的，到时候我们会通过`manifest.json`找到`react.dll.js`文件中的模块进行加载\n\n### 5.2 DllReferencePlugin\n\n在我们的项目中可以引用刚才打包好的动态链接库\n\n```javascript\nconst DllReferencePlugin = require(\"webpack/lib/DllReferencePlugin\");\nconst AddAssetHtmlWebpackPlugin = require(\"add-asset-html-webpack-plugin\");\n\nplugins: [\n  // 构建时会引用动态链接库的内容\n  new DllReferencePlugin({\n    manifest: path.resolve(__dirname, \"dll/manifest.json\"),\n  }),\n\n  // 需要手动引入react.dll.js\n  new AddAssetHtmlWebpackPlugin({\n    filepath: path.resolve(__dirname, \"dll/react.dll.js\"),\n  }),\n];\n```\n\n使用 DllPlugin 可以大幅度提高构建速度\n\n## 6.动态加载\n\n实现点击后动态加载文件\n\n```javascript\nlet btn = document.createElement(\"button\");\nbtn.innerHTML = \"点击加载视频\";\nbtn.addEventListener(\"click\", () => {\n  import(\"./video\").then((res) => {\n    console.log(res.default);\n  });\n});\ndocument.body.appendChild(btn);\n```\n\n给动态引入的文件增加名字\n\n```javascript\noutput: {\n  chunkFilename: \"[name].min.js\";\n}\n\n// 下面的注释是魔术字符串\nimport(/* webpackChunkName: \"video\" */ \"./video\").then((res) => {\n  console.log(res.default);\n});\n```\n\n> 这样打包后的结果最终的文件就是 `video.min.js`\n\n## 7.打包文件分析工具\n\n安装`webpack-bundle-analyzer`插件\n\n```\nnpm install --save-dev webpack-bundle-analyzer\n```\n\n使用插件\n\n```javascript\nconst { BundleAnalyzerPlugin } = require(\"webpack-bundle-analyzer\");\n\nmode !== \"development\" && new BundleAnalyzerPlugin();\n```\n\n默认就会展现当前应用的分析图表\n\n## 8.SplitChunks\n\n> **注意：不要和动态链接库的配置一起写，会有冲突。一般动态链接库在开发模式下用，代码分割在生产模式下用。**\n\n我们在来看下 SplitChunks 这个配置，他可以在编译时抽离第三方模块、公共模块\n\n将项目配置成多入口文件\n\n```javascript\nentry:{\n  a:'./src/a.js',\n  b:'./src/b.js'\n}\n```\n\n我们让 a,b 两个模块同时引用`jquery`, 别忘了去掉之前的`externals`配置\n\n`SplitChunks`插件的默认配置\n\n```javascript\noptimization: {\n\tsplitChunks: {\n    chunks: 'async', // 分割异步模块。可选参数：inital 同步、async 异步、all 所有\n    minSize: 30000, // 分割的文件最小大小，单位：字节\n    maxSize: 0,\n    minChunks: 1, // 引用次数\n    maxAsyncRequests: 5, // 最大异步请求数，简单来说，不能用超过五个 script 加载\n    maxInitialRequests: 3, // 最大初始化请求数\n    automaticNameDelimiter: '~', // 抽离的命名分隔符\n    automaticNameMaxLength: 30, // 名字最大长度\n    name: true,\n\n    /*\n      缓存组：主要用于匹配抽离模块的位置。\n      下面的 vendors 配置，如果在 node_modules 里找不到，就会去 default 里找\n    */\n\n    cacheGroups: {\n      // 指定分割 react、react-dom\n      react: {\n        test: /[\\\\/]node_modules[\\\\/](react)|(react-dom)/,\n        priority: 1 // 优先级\n      }\n      ,\n      // 分割第三方\n      vendors: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        priority: -10\n      },\n\n      // 再分割自定义模块\n      default: {\n        minChunks: 2, // 覆盖原来的配置，至少引用2次才分割\n        priority: -20,\n        reuseExistingChunk: true\n      }\n    }\n  }\n}\n```\n\n> 我们将`async`改为`initial`\n\n我们在为每个文件动态导入`lodash`库,并且改成`async`\n\n```javascript\nimport(\"lodash\");\n```\n\n> 为每个入口引入`c.js`,并且改造配置文件\n\n```javascript\nsplitChunks: {\n  chunks: 'all',\n  name: true,\n  cacheGroups: {\n    vendors: {\n      test: /[\\\\/]node_modules[\\\\/]/,\n      priority: -10\n    },\n    default: {\n      minSize:1, // 不是第三方模块，被引入两次也会被抽离\n      minChunks: 2,\n      priority: -20,\n    }\n  }\n}\n```\n\n> 这样再反过来看`chunks`的参数是不是就了然于胸啦！\n\n## 9.热更新\n\n模块热替换（HMR - Hot Module Replacement）是 webpack 提供的最有用的功能之一。它允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面\n\n- 保留在完全重新加载页面时丢失的应用程序的状态\n- 只更新改变的内容，以节省开发时间\n- 调整样式更加快速，几乎等同于就在浏览器调试器中更改样式\n\n启用热更新，默认样式可以支持热更新，如果不支持热更新则采用强制刷新\n\n```javascript\ndevServer:{\n  hot:true\n}\nnew webpack.NamedModulesPlugin(),\n```\n\n让`js`支持热更新\n\n```javascript\nimport sum from \"./sum\";\nconsole.log(sum(1, 2));\nif (module.hot) {\n  // 如果支持热更新\n  module.hot.accept(); // 当入口文件变化后重新执行当前入口文件\n}\n```\n\n## 10.IgnorePlugin\n\n忽略 `import`和`require`语法\n\n```javascript\nnew webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/);\n```\n\n## 11.费时分析\n\n可以计算每一步模块执行的运行速度\n\n```javascript\nconst SpeedMeasureWebpackPlugin = require(\"speed-measure-webpack-plugin\");\nconst smw = new SpeedMeasureWebpackPlugin();\n\n// 包裹所有配置\nmodule.exports = smw.wrap({});\n```\n\n## 12.noParse\n\n`module.noParse`，对类似 jq 这类依赖库，内部不会引用其他库，我们在打包的时候就没有必要去解析，这样能够增加打包速率\n\n```javascript\nnoParse: /jquery/;\n```\n\n## 13.resolve\n\n```javascript\nresolve: {\n  extensions: [\".js\",\".jsx\",\".json\",\".css\"],\n  alias:{}, // 配置别名\n  modules:['node_modules']\n},\n```\n\n## 14.include/exclude\n\n在使用`loader`时,可以指定哪些文件不通过`loader`,或者指定哪些文件通过`loader`\n\n```javascript\n{\n  test: /\\.js$/,\n  use: \"babel-loader\",\n  // include:path.resolve(__dirname,'src'),\n  exclude:/node_modules/\n},\n```\n\n## 15.多线程打包\n\n多线程打包，我们可以将不同的逻辑交给不同的线程来处理。\n\n> **注意：当项目比较大的时候使用比较和好，因为分配线程本身就需要消耗内存的，如果项目规模很小，一个线程就足够了，那么用更多的线程反而更加浪费。**\n\n```bash\nnpm install --save-dev happypack\n```\n\n使用插件\n\n```javascript\nconst HappyPack = require(\"happypack\");\n\nrules: [\n  {\n    test: /\\.js$/,\n    use: \"happypack/loader?id=jsx\",\n  },\n\n  {\n    test: /\\.less$/,\n    use: \"happypack/loader?id=styles\",\n  },\n];\n\nnew HappyPack({\n  id: \"jsx\",\n  threads: 4,\n  loaders: [\"babel-loader\"],\n}),\n  new HappyPack({\n    id: \"styles\",\n    threads: 2,\n    loaders: [\"style-loader\", \"css-loader\", \"less-loader\"],\n  });\n```\n","slug":"05_webpack 优化","published":1,"updated":"2022-04-21T02:02:38.839Z","_id":"cl28cyc8o000reou9g1nace7s","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>了解 webpack 常见的配置之后，再来看看如何实现 webpack 中的优化</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mini-css-extract-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">    <span class=\"hljs-attr\">mode</span>: mode,</span><br><span class=\"line\">    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/main.js\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">output</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"bundle.js\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"dist\"</span>),</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">module</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">rules</span>: [</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">          <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">\"file-loader\"</span>,</span><br><span class=\"line\">        },</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,</span><br><span class=\"line\">          <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">\"babel-loader\"</span>, <span class=\"hljs-comment\">// .babelrc已经配置支持react</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          <span class=\"hljs-attr\">use</span>: [</span><br><span class=\"line\">            mode !== <span class=\"hljs-string\">\"development\"</span></span><br><span class=\"line\">              ? <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span></span><br><span class=\"line\">              : <span class=\"hljs-string\">\"style-loader\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"css-loader\"</span>,</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        },</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">PurgecssPlugin</span>({</span><br><span class=\"line\">        <span class=\"hljs-attr\">paths</span>: glob.<span class=\"title function_\">sync</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${path.join(__dirname, <span class=\"hljs-string\">\"src\"</span>)}</span>/**/*`</span>, {</span><br><span class=\"line\">          <span class=\"hljs-attr\">nodir</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">        }), <span class=\"hljs-comment\">// 不匹配目录，只匹配文件</span></span><br><span class=\"line\">      }),</span><br><span class=\"line\">      mode !== <span class=\"hljs-string\">\"development\"</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>({</span><br><span class=\"line\">          <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"css/[name].css\"</span>,</span><br><span class=\"line\">        }),</span><br><span class=\"line\">      <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\"./src/template.html\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"index.html\"</span>,</span><br><span class=\"line\">      }),</span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>),</span><br><span class=\"line\">  };</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>.babelrc</code>配置文件</p>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"presets\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@babel/preset-env\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">\"@babel/preset-react\"</span><span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"1-删除无用的-Css-样式\"><a href=\"#1-删除无用的-Css-样式\" class=\"headerlink\" title=\"1.删除无用的 Css 样式\"></a>1.删除无用的 Css 样式</h2><p>先来看编写的代码</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./style.css\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"hljs-string\">\"root\"</span>));</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: red;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.class1</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: red;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>这里的<code>.class1</code>显然是无用的，我们可以搜索<code>src</code>目录下的文件，删除无用的样式</p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> glob = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'glob'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">PurgecssPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'purgecss-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 需要配合mini-css-extract-plugin插件</span></span><br><span class=\"line\">mode !== <span class=\"hljs-string\">\"development\"</span> &amp;&amp; <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">PurgecssPlugin</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">paths</span>: glob.<span class=\"title function_\">sync</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${path.join(__dirname, <span class=\"hljs-string\">\"src\"</span>)}</span>/**/*`</span>, { <span class=\"hljs-attr\">nodir</span>: <span class=\"hljs-literal\">true</span> }) <span class=\"hljs-comment\">// 不匹配目录，只匹配文件</span></span><br><span class=\"line\">}),</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><strong>注意：动态 class 会被删掉</strong></p>\n</blockquote>\n<h2 id=\"2-图片压缩插件\"><a href=\"#2-图片压缩插件\" class=\"headerlink\" title=\"2.图片压缩插件\"></a>2.图片压缩插件</h2><p>将打包后的图片进行优化</p>\n<figure class=\"highlight maxima hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install <span class=\"hljs-built_in\">image</span>-webpack-loader --<span class=\"hljs-built_in\">save</span>-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 file-loader 之前使用压缩图片插件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">\"image-webpack-loader\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">options</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">mozjpeg</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">progressive</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">65</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">optipng</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">pngquant</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">quality</span>: [<span class=\"hljs-number\">0.90</span>, <span class=\"hljs-number\">0.95</span>],</span><br><span class=\"line\">      <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">4</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">gifsicle</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">interlaced</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">webp</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">75</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>可以发现图片大小是有了明显的变化</p>\n</blockquote>\n<h2 id=\"3-CDN-加载文件\"><a href=\"#3-CDN-加载文件\" class=\"headerlink\" title=\"3.CDN 加载文件\"></a>3.CDN 加载文件</h2><p>我们希望通过 cdn 的方式引入资源</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">AddAssetHtmlCdnPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"add-asset-html-cdn-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> <span class=\"title class_\">AddAssetHtmlCdnPlugin</span>(<span class=\"hljs-literal\">true</span>, {</span><br><span class=\"line\">  <span class=\"hljs-attr\">jquery</span>: <span class=\"hljs-string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"</span>,</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>但是在代码中还希望引入<code>jquery</code>来获得提示</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> $ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">\"$\"</span>, $);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>但是打包时依然会将<code>jquery</code>进行打包</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">externals</span>:{</span><br><span class=\"line\">  <span class=\"hljs-string\">'jquery'</span>:<span class=\"hljs-string\">'$'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>那么就在配置文件中设置 <code>externals</code>&nbsp;，标注<code>jquery</code>是外部的，这样打包时就不会将 jquery 进行打包了</p>\n<h2 id=\"4-Tree-shaking-amp-amp-Scope-Hoisting\"><a href=\"#4-Tree-shaking-amp-amp-Scope-Hoisting\" class=\"headerlink\" title=\"4.Tree-shaking &amp;&amp; Scope-Hoisting\"></a>4.Tree-shaking &amp;&amp; Scope-Hoisting</h2><h3 id=\"4-1-Tree-shaking\"><a href=\"#4-1-Tree-shaking\" class=\"headerlink\" title=\"4.1 Tree-shaking\"></a>4.1 Tree-shaking</h3><p>顾名思义就是将没用的内容摇晃掉,来看下面代码</p>\n<p><code>main.js</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { minus } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./calc\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">minus</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>calc.js</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { test } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> a + b + <span class=\"hljs-string\">\"sum\"</span>;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"title function_\">minus</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> a - b + <span class=\"hljs-string\">\"minus\"</span>;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>test.js</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"hljs-params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">\"hello\"</span>);</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">test</span>());</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>观察上述代码其实我们主要使用<code>minus</code>方法,<code>test.js</code>代码属于副作用代码!</p>\n</blockquote>\n<p>默认<code>mode:production</code>时，会自动<code>tree-shaking</code>,但是副作用代码却不会清除掉。打包后<code>'hello'</code>依然会被打印出来,这时候我们需要在<code>package.json</code>中，配置不使用副作用。</p>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">\"sideEffects\"</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这样设置后，副作用代码就不会被打包，但是对于<code>css</code>文件就会有影响了，因为我们 <code>css</code> 也是通过<code>import './style.css'</code>来引入的。</p>\n<p>这里重点就来了,<code>tree-shaking</code>主要针对<strong>es6 模块</strong>,我们可以使用<code>require</code>语法导入 css,但是这样用起来有点格格不入,所以我们可以配置<code>css</code>文件不是副作用</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">\"sideEffects\"</span>:[</span><br><span class=\"line\">    <span class=\"hljs-string\">\"**/*.css\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在开发环境下默认<code>tree-shaking</code>不会生效, 可以配置标识提示只能在开发模式下使用。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">optimization</span>: {</span><br><span class=\"line\">  <span class=\"hljs-attr\">usedExports</span>: <span class=\"hljs-literal\">true</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-2-Scope-Hoisting\"><a href=\"#4-2-Scope-Hoisting\" class=\"headerlink\" title=\"4.2 Scope Hoisting\"></a>4.2 Scope Hoisting</h3><p>作用域提升,可以减少代码体积，节约内存。（webpack 自带了，无需配置）</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">2</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-number\">3</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> d = a + b + c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 引入d</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> d <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./d\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d);</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>最终打包后的结果会变成 <code>console.log(6)</code></p>\n</blockquote>\n<ul>\n<li>代码量明显减少</li>\n<li>减少多个函数后内存占用也将减少</li>\n</ul>\n<h2 id=\"5-DllPlugin-amp-amp-DllReferencePlugin\"><a href=\"#5-DllPlugin-amp-amp-DllReferencePlugin\" class=\"headerlink\" title=\"5.DllPlugin &amp;&amp; DllReferencePlugin\"></a>5.DllPlugin &amp;&amp; DllReferencePlugin</h2><p>每次构建时第三方模块都需要重新构建，这个性能消耗比较大，我们可以先把第三方库打包成动态链接库，以后构建时只需要查找构建好的库就好了，这样可以大大节约构建时间</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"hljs-string\">\"root\"</span>));</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-1-DllPlugin\"><a href=\"#5-1-DllPlugin\" class=\"headerlink\" title=\"5.1 DllPlugin\"></a>5.1 DllPlugin</h3><blockquote>\n<p>这里我们可以先将<code>react</code>、<code>react-dom</code>单独进行打包</p>\n</blockquote>\n<p>单独打包创建<code>webpack.dll.js</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">DllPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"webpack/lib/DllPlugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">entry</span>: [<span class=\"hljs-string\">\"react\"</span>, <span class=\"hljs-string\">\"react-dom\"</span>],</span><br><span class=\"line\">  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"production\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">output</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"react.dll.js\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"dll\"</span>),</span><br><span class=\"line\">    <span class=\"hljs-attr\">library</span>: <span class=\"hljs-string\">\"react\"</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">DllPlugin</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"react\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 生成的第三方模块映射表，便于快速查找</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"dll/manifest.json\"</span>),</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>执行<code>\"webpack --config webpack.dll.js</code>命令，可以看到 dll 目录下创建了两个文件分别是<code>manifest.json</code>,<code>react.dll.js</code></p>\n<p>关系是这个酱紫的，到时候我们会通过<code>manifest.json</code>找到<code>react.dll.js</code>文件中的模块进行加载</p>\n<h3 id=\"5-2-DllReferencePlugin\"><a href=\"#5-2-DllReferencePlugin\" class=\"headerlink\" title=\"5.2 DllReferencePlugin\"></a>5.2 DllReferencePlugin</h3><p>在我们的项目中可以引用刚才打包好的动态链接库</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">DllReferencePlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"webpack/lib/DllReferencePlugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">AddAssetHtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"add-asset-html-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 构建时会引用动态链接库的内容</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">DllReferencePlugin</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">manifest</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"dll/manifest.json\"</span>),</span><br><span class=\"line\">  }),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 需要手动引入react.dll.js</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">AddAssetHtmlWebpackPlugin</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">filepath</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"dll/react.dll.js\"</span>),</span><br><span class=\"line\">  }),</span><br><span class=\"line\">];</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用 DllPlugin 可以大幅度提高构建速度</p>\n<h2 id=\"6-动态加载\"><a href=\"#6-动态加载\" class=\"headerlink\" title=\"6.动态加载\"></a>6.动态加载</h2><p>实现点击后动态加载文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"hljs-string\">\"button\"</span>);</span><br><span class=\"line\">btn.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">\"点击加载视频\"</span>;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"title function_\">import</span>(<span class=\"hljs-string\">\"./video\"</span>).<span class=\"title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"hljs-property\">default</span>);</span><br><span class=\"line\">  });</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"title function_\">appendChild</span>(btn);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>给动态引入的文件增加名字</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">output</span>: {</span><br><span class=\"line\">  <span class=\"hljs-attr\">chunkFilename</span>: <span class=\"hljs-string\">\"[name].min.js\"</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 下面的注释是魔术字符串</span></span><br><span class=\"line\"><span class=\"title function_\">import</span>(<span class=\"hljs-comment\">/* webpackChunkName: \"video\" */</span> <span class=\"hljs-string\">\"./video\"</span>).<span class=\"title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"hljs-property\">default</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>这样打包后的结果最终的文件就是 <code>video.min.js</code></p>\n</blockquote>\n<h2 id=\"7-打包文件分析工具\"><a href=\"#7-打包文件分析工具\" class=\"headerlink\" title=\"7.打包文件分析工具\"></a>7.打包文件分析工具</h2><p>安装<code>webpack-bundle-analyzer</code>插件</p>\n<figure class=\"highlight q hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> webpack-bundle-analyzer</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用插件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> { <span class=\"title class_\">BundleAnalyzerPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"webpack-bundle-analyzer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mode !== <span class=\"hljs-string\">\"development\"</span> &amp;&amp; <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>();</span><br></pre></td></tr></tbody></table></figure>\n\n<p>默认就会展现当前应用的分析图表</p>\n<h2 id=\"8-SplitChunks\"><a href=\"#8-SplitChunks\" class=\"headerlink\" title=\"8.SplitChunks\"></a>8.SplitChunks</h2><blockquote>\n<p><strong>注意：不要和动态链接库的配置一起写，会有冲突。一般动态链接库在开发模式下用，代码分割在生产模式下用。</strong></p>\n</blockquote>\n<p>我们在来看下 SplitChunks 这个配置，他可以在编译时抽离第三方模块、公共模块</p>\n<p>将项目配置成多入口文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">entry</span>:{</span><br><span class=\"line\">  <span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">'./src/a.js'</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">b</span>:<span class=\"hljs-string\">'./src/b.js'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们让 a,b 两个模块同时引用<code>jquery</code>, 别忘了去掉之前的<code>externals</code>配置</p>\n<p><code>SplitChunks</code>插件的默认配置</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">optimization</span>: {</span><br><span class=\"line\">\t<span class=\"hljs-attr\">splitChunks</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">chunks</span>: <span class=\"hljs-string\">'async'</span>, <span class=\"hljs-comment\">// 分割异步模块。可选参数：inital 同步、async 异步、all 所有</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">minSize</span>: <span class=\"hljs-number\">30000</span>, <span class=\"hljs-comment\">// 分割的文件最小大小，单位：字节</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">maxSize</span>: <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">minChunks</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 引用次数</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">maxAsyncRequests</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">// 最大异步请求数，简单来说，不能用超过五个 script 加载</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">maxInitialRequests</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">// 最大初始化请求数</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">automaticNameDelimiter</span>: <span class=\"hljs-string\">'~'</span>, <span class=\"hljs-comment\">// 抽离的命名分隔符</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">automaticNameMaxLength</span>: <span class=\"hljs-number\">30</span>, <span class=\"hljs-comment\">// 名字最大长度</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">      缓存组：主要用于匹配抽离模块的位置。</span></span><br><span class=\"line\"><span class=\"hljs-comment\">      下面的 vendors 配置，如果在 node_modules 里找不到，就会去 default 里找</span></span><br><span class=\"line\"><span class=\"hljs-comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-attr\">cacheGroups</span>: {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 指定分割 react、react-dom</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">react</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/[\\\\/]node_modules[\\\\/](react)|(react-dom)/</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">priority</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 优先级</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">      ,</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 分割第三方</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">vendors</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">priority</span>: -<span class=\"hljs-number\">10</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 再分割自定义模块</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">default</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">minChunks</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 覆盖原来的配置，至少引用2次才分割</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">priority</span>: -<span class=\"hljs-number\">20</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">reuseExistingChunk</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>我们将<code>async</code>改为<code>initial</code></p>\n</blockquote>\n<p>我们在为每个文件动态导入<code>lodash</code>库,并且改成<code>async</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">import</span>(<span class=\"hljs-string\">\"lodash\"</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>为每个入口引入<code>c.js</code>,并且改造配置文件</p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">splitChunks</span>: {</span><br><span class=\"line\">  <span class=\"hljs-attr\">chunks</span>: <span class=\"hljs-string\">'all'</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">cacheGroups</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">vendors</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">priority</span>: -<span class=\"hljs-number\">10</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">default</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">minSize</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 不是第三方模块，被引入两次也会被抽离</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">minChunks</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">priority</span>: -<span class=\"hljs-number\">20</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>这样再反过来看<code>chunks</code>的参数是不是就了然于胸啦！</p>\n</blockquote>\n<h2 id=\"9-热更新\"><a href=\"#9-热更新\" class=\"headerlink\" title=\"9.热更新\"></a>9.热更新</h2><p>模块热替换（HMR - Hot Module Replacement）是 webpack 提供的最有用的功能之一。它允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面</p>\n<ul>\n<li>保留在完全重新加载页面时丢失的应用程序的状态</li>\n<li>只更新改变的内容，以节省开发时间</li>\n<li>调整样式更加快速，几乎等同于就在浏览器调试器中更改样式</li>\n</ul>\n<p>启用热更新，默认样式可以支持热更新，如果不支持热更新则采用强制刷新</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">devServer</span>:{</span><br><span class=\"line\">  <span class=\"hljs-attr\">hot</span>:<span class=\"hljs-literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> webpack.<span class=\"title class_\">NamedModulesPlugin</span>(),</span><br></pre></td></tr></tbody></table></figure>\n\n<p>让<code>js</code>支持热更新</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> sum <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./sum\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"variable language_\">module</span>.<span class=\"hljs-property\">hot</span>) {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 如果支持热更新</span></span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"title function_\">accept</span>(); <span class=\"hljs-comment\">// 当入口文件变化后重新执行当前入口文件</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"10-IgnorePlugin\"><a href=\"#10-IgnorePlugin\" class=\"headerlink\" title=\"10.IgnorePlugin\"></a>10.IgnorePlugin</h2><p>忽略 <code>import</code>和<code>require</code>语法</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(<span class=\"hljs-regexp\">/^\\.\\/locale$/</span>, <span class=\"hljs-regexp\">/moment$/</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"11-费时分析\"><a href=\"#11-费时分析\" class=\"headerlink\" title=\"11.费时分析\"></a>11.费时分析</h2><p>可以计算每一步模块执行的运行速度</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">SpeedMeasureWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"speed-measure-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> smw = <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">SpeedMeasureWebpackPlugin</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 包裹所有配置</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = smw.<span class=\"title function_\">wrap</span>({});</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"12-noParse\"><a href=\"#12-noParse\" class=\"headerlink\" title=\"12.noParse\"></a>12.noParse</h2><p><code>module.noParse</code>，对类似 jq 这类依赖库，内部不会引用其他库，我们在打包的时候就没有必要去解析，这样能够增加打包速率</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">noParse</span>: <span class=\"hljs-regexp\">/jquery/</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"13-resolve\"><a href=\"#13-resolve\" class=\"headerlink\" title=\"13.resolve\"></a>13.resolve</h2><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">resolve</span>: {</span><br><span class=\"line\">  <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">\".js\"</span>,<span class=\"hljs-string\">\".jsx\"</span>,<span class=\"hljs-string\">\".json\"</span>,<span class=\"hljs-string\">\".css\"</span>],</span><br><span class=\"line\">  <span class=\"hljs-attr\">alias</span>:{}, <span class=\"hljs-comment\">// 配置别名</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">modules</span>:[<span class=\"hljs-string\">'node_modules'</span>]</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"14-include-x2F-exclude\"><a href=\"#14-include-x2F-exclude\" class=\"headerlink\" title=\"14.include/exclude\"></a>14.include/exclude</h2><p>在使用<code>loader</code>时,可以指定哪些文件不通过<code>loader</code>,或者指定哪些文件通过<code>loader</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">\"babel-loader\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// include:path.resolve(__dirname,'src'),</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">exclude</span>:<span class=\"hljs-regexp\">/node_modules/</span></span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"15-多线程打包\"><a href=\"#15-多线程打包\" class=\"headerlink\" title=\"15.多线程打包\"></a>15.多线程打包</h2><p>多线程打包，我们可以将不同的逻辑交给不同的线程来处理。</p>\n<blockquote>\n<p><strong>注意：当项目比较大的时候使用比较和好，因为分配线程本身就需要消耗内存的，如果项目规模很小，一个线程就足够了，那么用更多的线程反而更加浪费。</strong></p>\n</blockquote>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev happypack</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用插件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">HappyPack</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"happypack\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">rules</span>: [</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">\"happypack/loader?id=jsx\"</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\"></span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.less$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">\"happypack/loader?id=styles\"</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HappyPack</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"jsx\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">threads</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">loaders</span>: [<span class=\"hljs-string\">\"babel-loader\"</span>],</span><br><span class=\"line\">}),</span><br><span class=\"line\">  <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HappyPack</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"styles\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">threads</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">loaders</span>: [<span class=\"hljs-string\">\"style-loader\"</span>, <span class=\"hljs-string\">\"css-loader\"</span>, <span class=\"hljs-string\">\"less-loader\"</span>],</span><br><span class=\"line\">  });</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>了解 webpack 常见的配置之后，再来看看如何实现 webpack 中的优化</p></body></html>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: mode,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">          <span class=\"attr\">use</span>: <span class=\"string\">&quot;file-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">          <span class=\"attr\">use</span>: <span class=\"string\">&quot;babel-loader&quot;</span>, <span class=\"comment\">// .babelrc已经配置支持react</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          <span class=\"attr\">use</span>: [</span><br><span class=\"line\">            mode !== <span class=\"string\">&quot;development&quot;</span></span><br><span class=\"line\">              ? <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span></span><br><span class=\"line\">              : <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">PurgecssPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">paths</span>: glob.<span class=\"title function_\">sync</span>(<span class=\"string\">`<span class=\"subst\">$&#123;path.join(__dirname, <span class=\"string\">&quot;src&quot;</span>)&#125;</span>/**/*`</span>, &#123;</span><br><span class=\"line\">          <span class=\"attr\">nodir</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;), <span class=\"comment\">// 不匹配目录，只匹配文件</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      mode !== <span class=\"string\">&quot;development&quot;</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;css/[name].css&quot;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;./src/template.html&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.html&quot;</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>.babelrc</code>配置文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/preset-env&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;@babel/preset-react&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-删除无用的-Css-样式\"><a href=\"#1-删除无用的-Css-样式\" class=\"headerlink\" title=\"1.删除无用的 Css 样式\"></a>1.删除无用的 Css 样式</h2><p>先来看编写的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./style.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的<code>.class1</code>显然是无用的，我们可以搜索<code>src</code>目录下的文件，删除无用的样式</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">PurgecssPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;purgecss-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要配合mini-css-extract-plugin插件</span></span><br><span class=\"line\">mode !== <span class=\"string\">&quot;development&quot;</span> &amp;&amp; <span class=\"keyword\">new</span> <span class=\"title class_\">PurgecssPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">paths</span>: glob.<span class=\"title function_\">sync</span>(<span class=\"string\">`<span class=\"subst\">$&#123;path.join(__dirname, <span class=\"string\">&quot;src&quot;</span>)&#125;</span>/**/*`</span>, &#123; <span class=\"attr\">nodir</span>: <span class=\"literal\">true</span> &#125;) <span class=\"comment\">// 不匹配目录，只匹配文件</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：动态 class 会被删掉</strong></p>\n</blockquote>\n<h2 id=\"2-图片压缩插件\"><a href=\"#2-图片压缩插件\" class=\"headerlink\" title=\"2.图片压缩插件\"></a>2.图片压缩插件</h2><p>将打包后的图片进行优化</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install <span class=\"built_in\">image</span>-webpack-loader --<span class=\"built_in\">save</span>-dev</span><br></pre></td></tr></table></figure>\n\n<p>在 file-loader 之前使用压缩图片插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">loader</span>: <span class=\"string\">&quot;image-webpack-loader&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">mozjpeg</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">quality</span>: <span class=\"number\">65</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">optipng</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">pngquant</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">quality</span>: [<span class=\"number\">0.90</span>, <span class=\"number\">0.95</span>],</span><br><span class=\"line\">      <span class=\"attr\">speed</span>: <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">gifsicle</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">interlaced</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">webp</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">quality</span>: <span class=\"number\">75</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以发现图片大小是有了明显的变化</p>\n</blockquote>\n<h2 id=\"3-CDN-加载文件\"><a href=\"#3-CDN-加载文件\" class=\"headerlink\" title=\"3.CDN 加载文件\"></a>3.CDN 加载文件</h2><p>我们希望通过 cdn 的方式引入资源</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AddAssetHtmlCdnPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;add-asset-html-cdn-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">AddAssetHtmlCdnPlugin</span>(<span class=\"literal\">true</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">jquery</span>: <span class=\"string\">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>但是在代码中还希望引入<code>jquery</code>来获得提示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&quot;jquery&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;$&quot;</span>, $);</span><br></pre></td></tr></table></figure>\n\n<p>但是打包时依然会将<code>jquery</code>进行打包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">externals</span>:&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;jquery&#x27;</span>:<span class=\"string\">&#x27;$&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么就在配置文件中设置 <code>externals</code> ，标注<code>jquery</code>是外部的，这样打包时就不会将 jquery 进行打包了</p>\n<h2 id=\"4-Tree-shaking-amp-amp-Scope-Hoisting\"><a href=\"#4-Tree-shaking-amp-amp-Scope-Hoisting\" class=\"headerlink\" title=\"4.Tree-shaking &amp;&amp; Scope-Hoisting\"></a>4.Tree-shaking &amp;&amp; Scope-Hoisting</h2><h3 id=\"4-1-Tree-shaking\"><a href=\"#4-1-Tree-shaking\" class=\"headerlink\" title=\"4.1 Tree-shaking\"></a>4.1 Tree-shaking</h3><p>顾名思义就是将没用的内容摇晃掉,来看下面代码</p>\n<p><code>main.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; minus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./calc&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">minus</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>calc.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; test &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./test&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"params\">a, b</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + <span class=\"string\">&quot;sum&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">minus</span> = (<span class=\"params\">a, b</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a - b + <span class=\"string\">&quot;minus&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>test.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">test</span>());</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>观察上述代码其实我们主要使用<code>minus</code>方法,<code>test.js</code>代码属于副作用代码!</p>\n</blockquote>\n<p>默认<code>mode:production</code>时，会自动<code>tree-shaking</code>,但是副作用代码却不会清除掉。打包后<code>&#39;hello&#39;</code>依然会被打印出来,这时候我们需要在<code>package.json</code>中，配置不使用副作用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;sideEffects&quot;</span><span class=\"punctuation\">:</span><span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>这样设置后，副作用代码就不会被打包，但是对于<code>css</code>文件就会有影响了，因为我们 <code>css</code> 也是通过<code>import &#39;./style.css&#39;</code>来引入的。</p>\n<p>这里重点就来了,<code>tree-shaking</code>主要针对<strong>es6 模块</strong>,我们可以使用<code>require</code>语法导入 css,但是这样用起来有点格格不入,所以我们可以配置<code>css</code>文件不是副作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;sideEffects&quot;</span>:[</span><br><span class=\"line\">    <span class=\"string\">&quot;**/*.css&quot;</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>在开发环境下默认<code>tree-shaking</code>不会生效, 可以配置标识提示只能在开发模式下使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">usedExports</span>: <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-Scope-Hoisting\"><a href=\"#4-2-Scope-Hoisting\" class=\"headerlink\" title=\"4.2 Scope Hoisting\"></a>4.2 Scope Hoisting</h3><p>作用域提升,可以减少代码体积，节约内存。（webpack 自带了，无需配置）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = a + b + c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入d</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> d <span class=\"keyword\">from</span> <span class=\"string\">&quot;./d&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最终打包后的结果会变成 <code>console.log(6)</code></p>\n</blockquote>\n<ul>\n<li>代码量明显减少</li>\n<li>减少多个函数后内存占用也将减少</li>\n</ul>\n<h2 id=\"5-DllPlugin-amp-amp-DllReferencePlugin\"><a href=\"#5-DllPlugin-amp-amp-DllReferencePlugin\" class=\"headerlink\" title=\"5.DllPlugin &amp;&amp; DllReferencePlugin\"></a>5.DllPlugin &amp;&amp; DllReferencePlugin</h2><p>每次构建时第三方模块都需要重新构建，这个性能消耗比较大，我们可以先把第三方库打包成动态链接库，以后构建时只需要查找构建好的库就好了，这样可以大大节约构建时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-DllPlugin\"><a href=\"#5-1-DllPlugin\" class=\"headerlink\" title=\"5.1 DllPlugin\"></a>5.1 DllPlugin</h3><blockquote>\n<p>这里我们可以先将<code>react</code>、<code>react-dom</code>单独进行打包</p>\n</blockquote>\n<p>单独打包创建<code>webpack.dll.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">DllPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack/lib/DllPlugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: [<span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;react-dom&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;react.dll.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dll&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&quot;react&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">DllPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;react&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 生成的第三方模块映射表，便于快速查找</span></span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dll/manifest.json&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>&quot;webpack --config webpack.dll.js</code>命令，可以看到 dll 目录下创建了两个文件分别是<code>manifest.json</code>,<code>react.dll.js</code></p>\n<p>关系是这个酱紫的，到时候我们会通过<code>manifest.json</code>找到<code>react.dll.js</code>文件中的模块进行加载</p>\n<h3 id=\"5-2-DllReferencePlugin\"><a href=\"#5-2-DllReferencePlugin\" class=\"headerlink\" title=\"5.2 DllReferencePlugin\"></a>5.2 DllReferencePlugin</h3><p>在我们的项目中可以引用刚才打包好的动态链接库</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">DllReferencePlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack/lib/DllReferencePlugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AddAssetHtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;add-asset-html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"comment\">// 构建时会引用动态链接库的内容</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">DllReferencePlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">manifest</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dll/manifest.json&quot;</span>),</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 需要手动引入react.dll.js</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">AddAssetHtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filepath</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dll/react.dll.js&quot;</span>),</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>使用 DllPlugin 可以大幅度提高构建速度</p>\n<h2 id=\"6-动态加载\"><a href=\"#6-动态加载\" class=\"headerlink\" title=\"6.动态加载\"></a>6.动态加载</h2><p>实现点击后动态加载文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;点击加载视频&quot;</span>;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">import</span>(<span class=\"string\">&quot;./video&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">default</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(btn);</span><br></pre></td></tr></table></figure>\n\n<p>给动态引入的文件增加名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&quot;[name].min.js&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的注释是魔术字符串</span></span><br><span class=\"line\"><span class=\"title function_\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;video&quot; */</span> <span class=\"string\">&quot;./video&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">default</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样打包后的结果最终的文件就是 <code>video.min.js</code></p>\n</blockquote>\n<h2 id=\"7-打包文件分析工具\"><a href=\"#7-打包文件分析工具\" class=\"headerlink\" title=\"7.打包文件分析工具\"></a>7.打包文件分析工具</h2><p>安装<code>webpack-bundle-analyzer</code>插件</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n\n<p>使用插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">BundleAnalyzerPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mode !== <span class=\"string\">&quot;development&quot;</span> &amp;&amp; <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>();</span><br></pre></td></tr></table></figure>\n\n<p>默认就会展现当前应用的分析图表</p>\n<h2 id=\"8-SplitChunks\"><a href=\"#8-SplitChunks\" class=\"headerlink\" title=\"8.SplitChunks\"></a>8.SplitChunks</h2><blockquote>\n<p><strong>注意：不要和动态链接库的配置一起写，会有冲突。一般动态链接库在开发模式下用，代码分割在生产模式下用。</strong></p>\n</blockquote>\n<p>我们在来看下 SplitChunks 这个配置，他可以在编译时抽离第三方模块、公共模块</p>\n<p>将项目配置成多入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:<span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>:<span class=\"string\">&#x27;./src/b.js&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们让 a,b 两个模块同时引用<code>jquery</code>, 别忘了去掉之前的<code>externals</code>配置</p>\n<p><code>SplitChunks</code>插件的默认配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;async&#x27;</span>, <span class=\"comment\">// 分割异步模块。可选参数：inital 同步、async 异步、all 所有</span></span><br><span class=\"line\">    <span class=\"attr\">minSize</span>: <span class=\"number\">30000</span>, <span class=\"comment\">// 分割的文件最小大小，单位：字节</span></span><br><span class=\"line\">    <span class=\"attr\">maxSize</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 引用次数</span></span><br><span class=\"line\">    <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 最大异步请求数，简单来说，不能用超过五个 script 加载</span></span><br><span class=\"line\">    <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>, <span class=\"comment\">// 最大初始化请求数</span></span><br><span class=\"line\">    <span class=\"attr\">automaticNameDelimiter</span>: <span class=\"string\">&#x27;~&#x27;</span>, <span class=\"comment\">// 抽离的命名分隔符</span></span><br><span class=\"line\">    <span class=\"attr\">automaticNameMaxLength</span>: <span class=\"number\">30</span>, <span class=\"comment\">// 名字最大长度</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      缓存组：主要用于匹配抽离模块的位置。</span></span><br><span class=\"line\"><span class=\"comment\">      下面的 vendors 配置，如果在 node_modules 里找不到，就会去 default 里找</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定分割 react、react-dom</span></span><br><span class=\"line\">      <span class=\"attr\">react</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](react)|(react-dom)/</span>,</span><br><span class=\"line\">        <span class=\"attr\">priority</span>: <span class=\"number\">1</span> <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ,</span><br><span class=\"line\">      <span class=\"comment\">// 分割第三方</span></span><br><span class=\"line\">      <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        <span class=\"attr\">priority</span>: -<span class=\"number\">10</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 再分割自定义模块</span></span><br><span class=\"line\">      <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 覆盖原来的配置，至少引用2次才分割</span></span><br><span class=\"line\">        <span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们将<code>async</code>改为<code>initial</code></p>\n</blockquote>\n<p>我们在为每个文件动态导入<code>lodash</code>库,并且改成<code>async</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">import</span>(<span class=\"string\">&quot;lodash&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为每个入口引入<code>c.js</code>,并且改造配置文件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">      <span class=\"attr\">priority</span>: -<span class=\"number\">10</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">minSize</span>:<span class=\"number\">1</span>, <span class=\"comment\">// 不是第三方模块，被引入两次也会被抽离</span></span><br><span class=\"line\">      <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样再反过来看<code>chunks</code>的参数是不是就了然于胸啦！</p>\n</blockquote>\n<h2 id=\"9-热更新\"><a href=\"#9-热更新\" class=\"headerlink\" title=\"9.热更新\"></a>9.热更新</h2><p>模块热替换（HMR - Hot Module Replacement）是 webpack 提供的最有用的功能之一。它允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面</p>\n<ul>\n<li>保留在完全重新加载页面时丢失的应用程序的状态</li>\n<li>只更新改变的内容，以节省开发时间</li>\n<li>调整样式更加快速，几乎等同于就在浏览器调试器中更改样式</li>\n</ul>\n<p>启用热更新，默认样式可以支持热更新，如果不支持热更新则采用强制刷新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\">  <span class=\"attr\">hot</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">NamedModulesPlugin</span>(),</span><br></pre></td></tr></table></figure>\n\n<p>让<code>js</code>支持热更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./sum&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持热更新</span></span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>.<span class=\"title function_\">accept</span>(); <span class=\"comment\">// 当入口文件变化后重新执行当前入口文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-IgnorePlugin\"><a href=\"#10-IgnorePlugin\" class=\"headerlink\" title=\"10.IgnorePlugin\"></a>10.IgnorePlugin</h2><p>忽略 <code>import</code>和<code>require</code>语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(<span class=\"regexp\">/^\\.\\/locale$/</span>, <span class=\"regexp\">/moment$/</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-费时分析\"><a href=\"#11-费时分析\" class=\"headerlink\" title=\"11.费时分析\"></a>11.费时分析</h2><p>可以计算每一步模块执行的运行速度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SpeedMeasureWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;speed-measure-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> smw = <span class=\"keyword\">new</span> <span class=\"title class_\">SpeedMeasureWebpackPlugin</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包裹所有配置</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = smw.<span class=\"title function_\">wrap</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-noParse\"><a href=\"#12-noParse\" class=\"headerlink\" title=\"12.noParse\"></a>12.noParse</h2><p><code>module.noParse</code>，对类似 jq 这类依赖库，内部不会引用其他库，我们在打包的时候就没有必要去解析，这样能够增加打包速率</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">noParse</span>: <span class=\"regexp\">/jquery/</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-resolve\"><a href=\"#13-resolve\" class=\"headerlink\" title=\"13.resolve\"></a>13.resolve</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;.js&quot;</span>,<span class=\"string\">&quot;.jsx&quot;</span>,<span class=\"string\">&quot;.json&quot;</span>,<span class=\"string\">&quot;.css&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">alias</span>:&#123;&#125;, <span class=\"comment\">// 配置别名</span></span><br><span class=\"line\">  <span class=\"attr\">modules</span>:[<span class=\"string\">&#x27;node_modules&#x27;</span>]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-include-x2F-exclude\"><a href=\"#14-include-x2F-exclude\" class=\"headerlink\" title=\"14.include&#x2F;exclude\"></a>14.include&#x2F;exclude</h2><p>在使用<code>loader</code>时,可以指定哪些文件不通过<code>loader</code>,或者指定哪些文件通过<code>loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">use</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// include:path.resolve(__dirname,&#x27;src&#x27;),</span></span><br><span class=\"line\">  <span class=\"attr\">exclude</span>:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-多线程打包\"><a href=\"#15-多线程打包\" class=\"headerlink\" title=\"15.多线程打包\"></a>15.多线程打包</h2><p>多线程打包，我们可以将不同的逻辑交给不同的线程来处理。</p>\n<blockquote>\n<p><strong>注意：当项目比较大的时候使用比较和好，因为分配线程本身就需要消耗内存的，如果项目规模很小，一个线程就足够了，那么用更多的线程反而更加浪费。</strong></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev happypack</span><br></pre></td></tr></table></figure>\n\n<p>使用插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HappyPack</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;happypack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: <span class=\"string\">&quot;happypack/loader?id=jsx&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: <span class=\"string\">&quot;happypack/loader?id=styles&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HappyPack</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&quot;jsx&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">threads</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">loaders</span>: [<span class=\"string\">&quot;babel-loader&quot;</span>],</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">HappyPack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;styles&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">threads</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">loaders</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"了解 Webpack 中的配置","toc":true,"date":"2019-11-03T11:30:04.000Z","_content":"\nloader 主要用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块！\n通过使用不同的 Loader，Webpack 可以把不同的文件都转成 JS 文件,比如 CSS、ES6/7、JSX 等。\n\n我们来看看这些我们必须掌握的 loader!\n\n<!-- more -->\n\n## 配置 loader\n\n### loader 的使用\n\n- test：匹配处理文件的扩展名的正则表达式\n- use：loader 名称，就是你要使用模块的名称\n- include/exclude:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹\n- options:为 loaders 提供额外的设置选项\n\n默认`loader`的顺序是**从下到上**、**从右向左**执行，当然执行顺序也可以手动定义的，接下来我们依次介绍常见的 loader，来感受`loader`的魅力!\n\n我们基于这个基础配置来继续编写:\n\n```javascript\nconst path = require(\"path\");\nconst dev = require(\"./webpack.dev\");\nconst prod = require(\"./webpack.prod\");\nconst merge = require(\"webpack-merge\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst base = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, \"../dist\"),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: \"index.html\",\n      template: path.resolve(__dirname, \"../public/template.html\"),\n      hash: true,\n      minify: {\n        removeAttributeQuotes: true,\n      },\n    }),\n    new CleanWebpackPlugin({\n      cleanOnceBeforeBuildPatterns: [path.resolve(\"xxxx/*\"), \"**/*\"],\n    }),\n  ],\n};\nmodule.exports = (env) => {\n  if (env.development) {\n    return merge(base, dev);\n  } else {\n    return merge(base, prod);\n  }\n};\n```\n\n## 处理 CSS 文件\n\n### 解析 css 样式\n\n我们在`js`文件中引入 css 样式！\n\n```javascript\nimport \"./index.css\";\n```\n\n再次执行打包时，会提示 css 无法解析\n\n```bash\nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n```\n\n**安装 loader**\n\n```bash\nnpm install style-loader css-loader --save-dev\n```\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\"style-loader\", \"css-loader\"],\n    },\n  ];\n}\n```\n\n### 抽离样式文件\n\n默认只在打包时进行样式抽离\n\n```javascript\nmodule.exports = (env) => {\n  let isDev = env.development;\n  const base = {\n    /*source...*/\n  };\n  if (isDev) {\n    return merge(base, dev);\n  } else {\n    return merge(base, prod);\n  }\n};\n```\n\n安装抽离插件\n\n```bash\nnpm install mini-css-extract-plugin --save-dev\n```\n\n配置抽离插件\n\n```javascript\n{\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    !isDev && MiniCssExtractPlugin.loader,\n                    isDev && 'style-loader',\n                    \"css-loader\"\n                ].filter(Boolean)\n            }\n        ]\n    },\n    plugins: [\n         !isDev && new MiniCssExtractPlugin({\n            filename: \"css/[name].css\"\n        })\n    ].filter(Boolean)\n}\n\n```\n\n> `plugins` 里的成员，不能是一个布尔值，否则会报错；而上面的配置在开发环境下会是个  `false` 。那么我们就可以通过数组的  `filter`  方法做个简单的过滤处理。\n\n最终文件配置:\n\n```javascript\nconst path = require(\"path\");\nconst dev = require(\"./webpack.dev\");\nconst prod = require(\"./webpack.prod\");\nconst merge = require(\"webpack-merge\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = (env) => {\n  let isDev = env.development;\n  const base = {\n    entry: \"./src/index.js\",\n    output: {\n      filename: \"[name].js\",\n      path: path.resolve(__dirname, \"../dist\"),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            !isDev && MiniCssExtractPlugin.loader,\n            isDev && \"style-loader\",\n            \"css-loader\",\n          ].filter(Boolean),\n        },\n      ],\n    },\n    plugins: [\n      !isDev &&\n        new MiniCssExtractPlugin({\n          filename: \"css/[name].css\",\n        }),\n      new HtmlWebpackPlugin({\n        filename: \"index.html\",\n        template: path.resolve(__dirname, \"../public/template.html\"),\n        hash: true,\n        minify: {\n          removeAttributeQuotes: true,\n        },\n      }),\n    ].filter(Boolean),\n  };\n  if (isDev) {\n    return merge(base, dev);\n  } else {\n    return merge(base, prod);\n  }\n};\n```\n\n### css 预处理器\n\n不同的 css 预处理器要安装不同的 loader 来进行解析\n\n| **预处理器** | **需要的 loader**      |\n| ------------ | ---------------------- |\n| sass         | sass-loader、node-sass |\n| less         | less-loader、less      |\n| stylus       | stylus-loader、stylus  |\n\n使用`sass`\n\n```javascript\n{\n    test:/\\.scss$/,\n    use:[\n        !isDev && MiniCssExtractPlugin.loader,\n        isDev && 'style-loader',\n        \"css-loader\",\n        \"sass-loader\"\n    ].filter(Boolean)\n}\n```\n\n在 css 文件中可能会使用`@import`语法引用`css`文件,被引用的`css`文件中可能还会导入  `scss` 。这样在编译  `css`\n的时候，scss 代码不会被编译；可以这么配置：\n\n```javascript\n{\n    test: /\\.css$/,\n    use: [\n    !isDev && MiniCssExtractPlugin.loader,\n    isDev && 'style-loader',\n    {\n        loader:\"css-loader\",\n        options:{\n            importLoaders: 1\n        }\n    },\n    \"sass-loader\"\n    ].filter(Boolean)\n},\n```\n\n> 把 `css-loader`  的用法改成对象，在配置里面设置  `importLoaders` 。表示在使用  `css-loader`  编译之前，如果  `css`  里面使用了  `@import`  语法引入了一个  `scss`  文件，就先用 **1** 个放置在在后面的  `loader`  先编译一次；也就用  `sass-loader`  编译一次。再继续用  `css-loader`  编译，就会编译引入的那个 `scss`。\n\n### 处理样式前缀\n\n使用`postcss-loader`增加样式前缀\n\n```bash\nnpm install postcss-loader autoprefixer\n```\n\n在处理 css 前先增加前缀\n\n```javascript\n{\n    test: /\\.css$/,\n    use: [\n    !isDev && MiniCssExtractPlugin.loader,\n    isDev && 'style-loader',\n    {\n        loader:\"postcss-loader\",\n        options:{\n            plugins:[require('autoprefixer')]\n        }\n    },\n    \"sass-loader\"\n    ].filter(Boolean)\n}\n```\n\n或者也可以创建`postcss`的配置文件`postcss.config.js`\n\n```javascript\nmodule.exports = {\n  plugins: [require(\"autoprefixer\")],\n};\n```\n\n然后\n\n```javascript\n{\n    test: /\\.css$/,\n    use: [\n    !isDev && MiniCssExtractPlugin.loader,\n    isDev && 'style-loader',\n    \"postcss-loader\",\n    \"sass-loader\"\n    ].filter(Boolean)\n}\n```\n\n可以配置浏览器的兼容性范围，在项目根目录下建一个  [.browserslistrc](https://github.com/browserslist/browserslist)  文件：\n\n```javascript\ncover 99.5%\n```\n\n> 这里表示覆盖的浏览器范围\n\n### css 压缩\n\n在生产环境下我们需要压缩`css`文件,配置`minimizer`选项,安装压缩插件\n\n```bash\nnpm i optimize-css-assets-webpack-plugin terser-webpack-plugin --save-dev\n```\n\n在`webpack.prod.js`文件中配置压缩\n\n```javascript\nconst OptimizeCSSAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\");\nconst TerserJSPlugin = require(\"terser-webpack-plugin\");\noptimization: {\n  minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})];\n}\n```\n\n### 文件指纹\n\n- Hash 整个项目的 hash 值\n- chunkhash 根据入口产生 hash 值\n- contentHash 根据每个文件的内容产生的 hash 值\n\n我们可以合理的使用`hash`戳，进行文件的缓存\n\n```javascript\n!isDev &&\n  new MiniCssExtractPlugin({\n    filename: \"css/[name].[contentHash].css\",\n  });\n```\n\n## 处理文件类型\n\n### 处理引用的图片\n\n```javascript\nimport logo from \"./webpack.png\";\nlet img = document.createElement(\"img\");\nimg.src = logo;\ndocument.body.appendChild(img);\n```\n\n使用`file-loader`,会将图片进行打包，并将打包后的路径返回\n\n```javascript\n{\n    test:/\\.jpe?g|png|gif/,\n    use:{\n        loader:'file-loader',\n        options:{\n            name:`img/[name].[ext]`\n        }\n    }\n}\n```\n\n### 处理 icon\n\n二进制文件也是使用`file-loader`来打包\n\n```javascript\n{\n    test:/woff|ttf|eot|svg|otf/,\n    use:{\n        loader:'file-loader'\n    }\n}\n```\n\n### 转化成 base64\n\n使用`url-loader`将满足条件的图片转化成 base64,不满足条件的`url-loader`会自动调用`file-loader`来进行处理\n\n```javascript\n{\n    test:/\\.jpe?g|png|gif/,\n    use:{\n        loader:'url-loader',\n        options:{\n            limit:100*1024,\n            name:`img/[name].[ext]`\n        }\n    }\n}\n```\n\n## 处理 JS 模块\n\n### 将`es6`代码编译成`es5`代码\n\n代码的转化工作要交给`babel`来处理\n\n```bash\nnpm install @babel/core @babel/preset-env babel-loader --save-dev\n```\n\n`@babel/core`是 babel 中的核心模块，`@babel/preset-env` 的作用是 es6 转化 es5 插件的插件集合，`babel-loader`是`webpack`和`loader`的桥梁。\n\n```javascript\nconst sum = (a, b) => {\n  return a + b;\n};\n```\n\n增加`babel`的配置文件 `.babelrc`\n\n```json\n{\n  \"presets\": [[\"@babel/preset-env\"]]\n}\n```\n\n**配置 loader**\n\n```javascript\nmodule: {\n\trules: [{ test: /\\.js$/, use: \"babel-loader\" }]\n},\n```\n\n现在打包已经可以成功的将 es6 语法转化成 es5 语法！\n\n### 解析装饰器\n\n```bash\nnpm i @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators --save-dev\n```\n\n```json\n\"plugins\": [\n  [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n  [\"@babel/plugin-proposal-class-properties\",{\"loose\":true}]\n]\n```\n\n`legacy:true`表示继续使用装饰器装饰器，loose 为 false 时会采用`Object.defineProperty`定义属性\n\n- Plugin 会运行在 Preset 之前\n- Plugin 会从第一个开始顺序执行，Preset 则是相反的\n\n### polyfill\n\n根据`.browserslistrc`文件，转化使用到的浏览器 api\n\n```javascript\n\"presets\": [\n    [\"@babel/preset-env\",{\n        \"useBuiltIns\":\"usage\", // 按需加载\n        \"corejs\":2 // corejs 替代了以前的pollyfill\n    }]\n]\n```\n\n安装 corejs\n\n```bash\nnpm install core-js@2 --save\n```\n\n> **使用`transform-runtime`**\n> A plugin that enables the re-use of Babel's injected helper code to save on codesize.可以帮我们节省代码\n\n```bash\nnpm install --save-dev @babel/plugin-transform-runtime @babel/runtime\n```\n\n在`.babelrc`中配置插件\n\n```json\n\"plugins\": [\n    \"@babel/plugin-transform-runtime\"\n]\n```\n\n### 添加 eslint\n\n安装`eslint`\n\n```bash\nnpm install eslint\nnpx eslint --init # 初始化配置文件\n```\n\n```\n{\n    test:/\\.js/,\n    enforce:'pre',\n    use:'eslint-loader'\n},\n```\n\n> 配置`eslint-loader`可以实时校验 js 文件的正确性,`pre`表示在所有`loader`执行前执行\n\n## source-map\n\n- eval 生成代码 每个模块都被 eval 执行,每一个打包后的模块后面都增加了包含 sourceURL\n- source-map 产生 map 文件\n- inline 不会生成独立的 .map 文件,会以 dataURL 形式插入\n- cheap 忽略打包后的列信息，不使用 loader 中的 sourcemap\n- module 没有列信息，使用 loader 中的 sourcemap(没有列信息)\n\n```javascript\ndevtool: isDev ? \"cheap-module-eval-source-map\" : false;\n```\n\n> 每个库中采用的`sourcemap`方式不一,可以根据自己的需要自行配置\n\n## resolve 解析\n\n想实现使用 require 或是 import 的时候,可以自动尝试添加扩展名进行匹配\n\n```javascript\nresolve: {\n    extensions: [\".js\", \".jsx\", \".json\", \".css\", \".ts\", \".tsx\", \".vue\"]\n},\n```\n\n## 拷贝静态文件\n\n有些时候在打包时希望将一些静态资源文件进行拷贝,可以使用`copy-webpack-plugin`\n\n安装插件\n\n```bash\nnpm i copy-webpack-plugin --save-dev\n```\n\n使用拷贝插件\n\n```javascript\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nnew CopyWebpackPlugin([\n  { from: path.resolve(\"./src/static\"), to: path.resolve(\"./dist\") },\n]);\n```\n\n## 配置代理\n\n设置服务端接口\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\napp.get(\"/api/list\", (req, res) => {\n  res.send([\"香蕉\", \"苹果\", \"橘子\"]);\n});\napp.listen(4000);\n```\n\n安装`axios`获取数据\n\n```javascript\nnpm install axios --save-dev\n```\n\n配置接口请求\n\n```html\n<template>\n  <div>\n    <div v-for=\"(todo,index) in todos\" :key=\"index\">{{todo}}</div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import axios from \"axios\";\n  import { Component, Vue } from \"vue-property-decorator\";\n  @Component\n  export default class Todo extends Vue {\n    public todos: string[] = [];\n    async mounted() {\n      let { data } = await axios.get(\"/api/list\");\n      this.todos = data;\n    }\n  }\n</script>\n```\n\n配置服务器代理路由\n\n```javascript\nproxy: {\n    '/api': {\n    target: 'http://localhost:4000',\n    },\n}\n```\n","source":"_posts/04_了解 Webpack 中的配置.md","raw":"---\ntitle: 了解 Webpack 中的配置\ntoc: true\ndate: 2019-11-3 19:30:04\ncategories:\n  - 前端\n  - webpack\ntags: webpack\n---\n\nloader 主要用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块！\n通过使用不同的 Loader，Webpack 可以把不同的文件都转成 JS 文件,比如 CSS、ES6/7、JSX 等。\n\n我们来看看这些我们必须掌握的 loader!\n\n<!-- more -->\n\n## 配置 loader\n\n### loader 的使用\n\n- test：匹配处理文件的扩展名的正则表达式\n- use：loader 名称，就是你要使用模块的名称\n- include/exclude:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹\n- options:为 loaders 提供额外的设置选项\n\n默认`loader`的顺序是**从下到上**、**从右向左**执行，当然执行顺序也可以手动定义的，接下来我们依次介绍常见的 loader，来感受`loader`的魅力!\n\n我们基于这个基础配置来继续编写:\n\n```javascript\nconst path = require(\"path\");\nconst dev = require(\"./webpack.dev\");\nconst prod = require(\"./webpack.prod\");\nconst merge = require(\"webpack-merge\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst base = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, \"../dist\"),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: \"index.html\",\n      template: path.resolve(__dirname, \"../public/template.html\"),\n      hash: true,\n      minify: {\n        removeAttributeQuotes: true,\n      },\n    }),\n    new CleanWebpackPlugin({\n      cleanOnceBeforeBuildPatterns: [path.resolve(\"xxxx/*\"), \"**/*\"],\n    }),\n  ],\n};\nmodule.exports = (env) => {\n  if (env.development) {\n    return merge(base, dev);\n  } else {\n    return merge(base, prod);\n  }\n};\n```\n\n## 处理 CSS 文件\n\n### 解析 css 样式\n\n我们在`js`文件中引入 css 样式！\n\n```javascript\nimport \"./index.css\";\n```\n\n再次执行打包时，会提示 css 无法解析\n\n```bash\nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n```\n\n**安装 loader**\n\n```bash\nnpm install style-loader css-loader --save-dev\n```\n\n```javascript\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\"style-loader\", \"css-loader\"],\n    },\n  ];\n}\n```\n\n### 抽离样式文件\n\n默认只在打包时进行样式抽离\n\n```javascript\nmodule.exports = (env) => {\n  let isDev = env.development;\n  const base = {\n    /*source...*/\n  };\n  if (isDev) {\n    return merge(base, dev);\n  } else {\n    return merge(base, prod);\n  }\n};\n```\n\n安装抽离插件\n\n```bash\nnpm install mini-css-extract-plugin --save-dev\n```\n\n配置抽离插件\n\n```javascript\n{\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    !isDev && MiniCssExtractPlugin.loader,\n                    isDev && 'style-loader',\n                    \"css-loader\"\n                ].filter(Boolean)\n            }\n        ]\n    },\n    plugins: [\n         !isDev && new MiniCssExtractPlugin({\n            filename: \"css/[name].css\"\n        })\n    ].filter(Boolean)\n}\n\n```\n\n> `plugins` 里的成员，不能是一个布尔值，否则会报错；而上面的配置在开发环境下会是个  `false` 。那么我们就可以通过数组的  `filter`  方法做个简单的过滤处理。\n\n最终文件配置:\n\n```javascript\nconst path = require(\"path\");\nconst dev = require(\"./webpack.dev\");\nconst prod = require(\"./webpack.prod\");\nconst merge = require(\"webpack-merge\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = (env) => {\n  let isDev = env.development;\n  const base = {\n    entry: \"./src/index.js\",\n    output: {\n      filename: \"[name].js\",\n      path: path.resolve(__dirname, \"../dist\"),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            !isDev && MiniCssExtractPlugin.loader,\n            isDev && \"style-loader\",\n            \"css-loader\",\n          ].filter(Boolean),\n        },\n      ],\n    },\n    plugins: [\n      !isDev &&\n        new MiniCssExtractPlugin({\n          filename: \"css/[name].css\",\n        }),\n      new HtmlWebpackPlugin({\n        filename: \"index.html\",\n        template: path.resolve(__dirname, \"../public/template.html\"),\n        hash: true,\n        minify: {\n          removeAttributeQuotes: true,\n        },\n      }),\n    ].filter(Boolean),\n  };\n  if (isDev) {\n    return merge(base, dev);\n  } else {\n    return merge(base, prod);\n  }\n};\n```\n\n### css 预处理器\n\n不同的 css 预处理器要安装不同的 loader 来进行解析\n\n| **预处理器** | **需要的 loader**      |\n| ------------ | ---------------------- |\n| sass         | sass-loader、node-sass |\n| less         | less-loader、less      |\n| stylus       | stylus-loader、stylus  |\n\n使用`sass`\n\n```javascript\n{\n    test:/\\.scss$/,\n    use:[\n        !isDev && MiniCssExtractPlugin.loader,\n        isDev && 'style-loader',\n        \"css-loader\",\n        \"sass-loader\"\n    ].filter(Boolean)\n}\n```\n\n在 css 文件中可能会使用`@import`语法引用`css`文件,被引用的`css`文件中可能还会导入  `scss` 。这样在编译  `css`\n的时候，scss 代码不会被编译；可以这么配置：\n\n```javascript\n{\n    test: /\\.css$/,\n    use: [\n    !isDev && MiniCssExtractPlugin.loader,\n    isDev && 'style-loader',\n    {\n        loader:\"css-loader\",\n        options:{\n            importLoaders: 1\n        }\n    },\n    \"sass-loader\"\n    ].filter(Boolean)\n},\n```\n\n> 把 `css-loader`  的用法改成对象，在配置里面设置  `importLoaders` 。表示在使用  `css-loader`  编译之前，如果  `css`  里面使用了  `@import`  语法引入了一个  `scss`  文件，就先用 **1** 个放置在在后面的  `loader`  先编译一次；也就用  `sass-loader`  编译一次。再继续用  `css-loader`  编译，就会编译引入的那个 `scss`。\n\n### 处理样式前缀\n\n使用`postcss-loader`增加样式前缀\n\n```bash\nnpm install postcss-loader autoprefixer\n```\n\n在处理 css 前先增加前缀\n\n```javascript\n{\n    test: /\\.css$/,\n    use: [\n    !isDev && MiniCssExtractPlugin.loader,\n    isDev && 'style-loader',\n    {\n        loader:\"postcss-loader\",\n        options:{\n            plugins:[require('autoprefixer')]\n        }\n    },\n    \"sass-loader\"\n    ].filter(Boolean)\n}\n```\n\n或者也可以创建`postcss`的配置文件`postcss.config.js`\n\n```javascript\nmodule.exports = {\n  plugins: [require(\"autoprefixer\")],\n};\n```\n\n然后\n\n```javascript\n{\n    test: /\\.css$/,\n    use: [\n    !isDev && MiniCssExtractPlugin.loader,\n    isDev && 'style-loader',\n    \"postcss-loader\",\n    \"sass-loader\"\n    ].filter(Boolean)\n}\n```\n\n可以配置浏览器的兼容性范围，在项目根目录下建一个  [.browserslistrc](https://github.com/browserslist/browserslist)  文件：\n\n```javascript\ncover 99.5%\n```\n\n> 这里表示覆盖的浏览器范围\n\n### css 压缩\n\n在生产环境下我们需要压缩`css`文件,配置`minimizer`选项,安装压缩插件\n\n```bash\nnpm i optimize-css-assets-webpack-plugin terser-webpack-plugin --save-dev\n```\n\n在`webpack.prod.js`文件中配置压缩\n\n```javascript\nconst OptimizeCSSAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\");\nconst TerserJSPlugin = require(\"terser-webpack-plugin\");\noptimization: {\n  minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})];\n}\n```\n\n### 文件指纹\n\n- Hash 整个项目的 hash 值\n- chunkhash 根据入口产生 hash 值\n- contentHash 根据每个文件的内容产生的 hash 值\n\n我们可以合理的使用`hash`戳，进行文件的缓存\n\n```javascript\n!isDev &&\n  new MiniCssExtractPlugin({\n    filename: \"css/[name].[contentHash].css\",\n  });\n```\n\n## 处理文件类型\n\n### 处理引用的图片\n\n```javascript\nimport logo from \"./webpack.png\";\nlet img = document.createElement(\"img\");\nimg.src = logo;\ndocument.body.appendChild(img);\n```\n\n使用`file-loader`,会将图片进行打包，并将打包后的路径返回\n\n```javascript\n{\n    test:/\\.jpe?g|png|gif/,\n    use:{\n        loader:'file-loader',\n        options:{\n            name:`img/[name].[ext]`\n        }\n    }\n}\n```\n\n### 处理 icon\n\n二进制文件也是使用`file-loader`来打包\n\n```javascript\n{\n    test:/woff|ttf|eot|svg|otf/,\n    use:{\n        loader:'file-loader'\n    }\n}\n```\n\n### 转化成 base64\n\n使用`url-loader`将满足条件的图片转化成 base64,不满足条件的`url-loader`会自动调用`file-loader`来进行处理\n\n```javascript\n{\n    test:/\\.jpe?g|png|gif/,\n    use:{\n        loader:'url-loader',\n        options:{\n            limit:100*1024,\n            name:`img/[name].[ext]`\n        }\n    }\n}\n```\n\n## 处理 JS 模块\n\n### 将`es6`代码编译成`es5`代码\n\n代码的转化工作要交给`babel`来处理\n\n```bash\nnpm install @babel/core @babel/preset-env babel-loader --save-dev\n```\n\n`@babel/core`是 babel 中的核心模块，`@babel/preset-env` 的作用是 es6 转化 es5 插件的插件集合，`babel-loader`是`webpack`和`loader`的桥梁。\n\n```javascript\nconst sum = (a, b) => {\n  return a + b;\n};\n```\n\n增加`babel`的配置文件 `.babelrc`\n\n```json\n{\n  \"presets\": [[\"@babel/preset-env\"]]\n}\n```\n\n**配置 loader**\n\n```javascript\nmodule: {\n\trules: [{ test: /\\.js$/, use: \"babel-loader\" }]\n},\n```\n\n现在打包已经可以成功的将 es6 语法转化成 es5 语法！\n\n### 解析装饰器\n\n```bash\nnpm i @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators --save-dev\n```\n\n```json\n\"plugins\": [\n  [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n  [\"@babel/plugin-proposal-class-properties\",{\"loose\":true}]\n]\n```\n\n`legacy:true`表示继续使用装饰器装饰器，loose 为 false 时会采用`Object.defineProperty`定义属性\n\n- Plugin 会运行在 Preset 之前\n- Plugin 会从第一个开始顺序执行，Preset 则是相反的\n\n### polyfill\n\n根据`.browserslistrc`文件，转化使用到的浏览器 api\n\n```javascript\n\"presets\": [\n    [\"@babel/preset-env\",{\n        \"useBuiltIns\":\"usage\", // 按需加载\n        \"corejs\":2 // corejs 替代了以前的pollyfill\n    }]\n]\n```\n\n安装 corejs\n\n```bash\nnpm install core-js@2 --save\n```\n\n> **使用`transform-runtime`**\n> A plugin that enables the re-use of Babel's injected helper code to save on codesize.可以帮我们节省代码\n\n```bash\nnpm install --save-dev @babel/plugin-transform-runtime @babel/runtime\n```\n\n在`.babelrc`中配置插件\n\n```json\n\"plugins\": [\n    \"@babel/plugin-transform-runtime\"\n]\n```\n\n### 添加 eslint\n\n安装`eslint`\n\n```bash\nnpm install eslint\nnpx eslint --init # 初始化配置文件\n```\n\n```\n{\n    test:/\\.js/,\n    enforce:'pre',\n    use:'eslint-loader'\n},\n```\n\n> 配置`eslint-loader`可以实时校验 js 文件的正确性,`pre`表示在所有`loader`执行前执行\n\n## source-map\n\n- eval 生成代码 每个模块都被 eval 执行,每一个打包后的模块后面都增加了包含 sourceURL\n- source-map 产生 map 文件\n- inline 不会生成独立的 .map 文件,会以 dataURL 形式插入\n- cheap 忽略打包后的列信息，不使用 loader 中的 sourcemap\n- module 没有列信息，使用 loader 中的 sourcemap(没有列信息)\n\n```javascript\ndevtool: isDev ? \"cheap-module-eval-source-map\" : false;\n```\n\n> 每个库中采用的`sourcemap`方式不一,可以根据自己的需要自行配置\n\n## resolve 解析\n\n想实现使用 require 或是 import 的时候,可以自动尝试添加扩展名进行匹配\n\n```javascript\nresolve: {\n    extensions: [\".js\", \".jsx\", \".json\", \".css\", \".ts\", \".tsx\", \".vue\"]\n},\n```\n\n## 拷贝静态文件\n\n有些时候在打包时希望将一些静态资源文件进行拷贝,可以使用`copy-webpack-plugin`\n\n安装插件\n\n```bash\nnpm i copy-webpack-plugin --save-dev\n```\n\n使用拷贝插件\n\n```javascript\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nnew CopyWebpackPlugin([\n  { from: path.resolve(\"./src/static\"), to: path.resolve(\"./dist\") },\n]);\n```\n\n## 配置代理\n\n设置服务端接口\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\napp.get(\"/api/list\", (req, res) => {\n  res.send([\"香蕉\", \"苹果\", \"橘子\"]);\n});\napp.listen(4000);\n```\n\n安装`axios`获取数据\n\n```javascript\nnpm install axios --save-dev\n```\n\n配置接口请求\n\n```html\n<template>\n  <div>\n    <div v-for=\"(todo,index) in todos\" :key=\"index\">{{todo}}</div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import axios from \"axios\";\n  import { Component, Vue } from \"vue-property-decorator\";\n  @Component\n  export default class Todo extends Vue {\n    public todos: string[] = [];\n    async mounted() {\n      let { data } = await axios.get(\"/api/list\");\n      this.todos = data;\n    }\n  }\n</script>\n```\n\n配置服务器代理路由\n\n```javascript\nproxy: {\n    '/api': {\n    target: 'http://localhost:4000',\n    },\n}\n```\n","slug":"04_了解 Webpack 中的配置","published":1,"updated":"2022-04-21T02:02:38.839Z","_id":"cl28cyew0000veou9bf4u67u7","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>loader 主要用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块！<br>通过使用不同的 Loader，Webpack 可以把不同的文件都转成 JS 文件,比如 CSS、ES6/7、JSX 等。</p>\n<p>我们来看看这些我们必须掌握的 loader!</p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置-loader\"><a href=\"#配置-loader\" class=\"headerlink\" title=\"配置 loader\"></a>配置 loader</h2><h3 id=\"loader-的使用\"><a href=\"#loader-的使用\" class=\"headerlink\" title=\"loader 的使用\"></a>loader 的使用</h3><ul>\n<li>test：匹配处理文件的扩展名的正则表达式</li>\n<li>use：loader 名称，就是你要使用模块的名称</li>\n<li>include/exclude:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹</li>\n<li>options:为 loaders 提供额外的设置选项</li>\n</ul>\n<p>默认<code>loader</code>的顺序是<strong>从下到上</strong>、<strong>从右向左</strong>执行，当然执行顺序也可以手动定义的，接下来我们依次介绍常见的 loader，来感受<code>loader</code>的魅力!</p>\n<p>我们基于这个基础配置来继续编写:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> dev = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./webpack.dev\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> prod = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./webpack.prod\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"webpack-merge\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> { <span class=\"title class_\">CleanWebpackPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"clean-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> base = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">output</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"[name].js\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../dist\"</span>),</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"index.html\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../public/template.html\"</span>),</span><br><span class=\"line\">      <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">minify</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      },</span><br><span class=\"line\">    }),</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">cleanOnceBeforeBuildPatterns</span>: [path.<span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">\"xxxx/*\"</span>), <span class=\"hljs-string\">\"**/*\"</span>],</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">env</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (env.<span class=\"hljs-property\">development</span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">merge</span>(base, dev);</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">merge</span>(base, prod);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"处理-CSS-文件\"><a href=\"#处理-CSS-文件\" class=\"headerlink\" title=\"处理 CSS 文件\"></a>处理 CSS 文件</h2><h3 id=\"解析-css-样式\"><a href=\"#解析-css-样式\" class=\"headerlink\" title=\"解析 css 样式\"></a>解析 css 样式</h3><p>我们在<code>js</code>文件中引入 css 样式！</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./index.css\"</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>再次执行打包时，会提示 css 无法解析</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR <span class=\"hljs-keyword\">in</span> ./src/index.css 1:4</span><br><span class=\"line\">Module parse failed: Unexpected token (1:4)</span><br><span class=\"line\">You may need an appropriate loader to handle this file <span class=\"hljs-built_in\">type</span>, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class=\"hljs-comment\">#loaders</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>安装 loader</strong></p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">module</span>: {</span><br><span class=\"line\">  <span class=\"hljs-attr\">rules</span>: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">\"style-loader\"</span>, <span class=\"hljs-string\">\"css-loader\"</span>],</span><br><span class=\"line\">    },</span><br><span class=\"line\">  ];</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"抽离样式文件\"><a href=\"#抽离样式文件\" class=\"headerlink\" title=\"抽离样式文件\"></a>抽离样式文件</h3><p>默认只在打包时进行样式抽离</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">env</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> isDev = env.<span class=\"hljs-property\">development</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> base = {</span><br><span class=\"line\">    <span class=\"hljs-comment\">/*source...*/</span></span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isDev) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">merge</span>(base, dev);</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">merge</span>(base, prod);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装抽离插件</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置抽离插件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">module</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">rules</span>: [</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"hljs-attr\">use</span>: [</span><br><span class=\"line\">                    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,</span><br><span class=\"line\">                    isDev &amp;&amp; <span class=\"hljs-string\">'style-loader'</span>,</span><br><span class=\"line\">                    <span class=\"hljs-string\">\"css-loader\"</span></span><br><span class=\"line\">                ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">            }</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">         !isDev &amp;&amp; <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>({</span><br><span class=\"line\">            <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"css/[name].css\"</span></span><br><span class=\"line\">        })</span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><code>plugins</code> 里的成员，不能是一个布尔值，否则会报错；而上面的配置在开发环境下会是个 &nbsp;<code>false</code>&nbsp;。那么我们就可以通过数组的 &nbsp;<code>filter</code>&nbsp; 方法做个简单的过滤处理。</p>\n</blockquote>\n<p>最终文件配置:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> dev = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./webpack.dev\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> prod = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./webpack.prod\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"webpack-merge\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mini-css-extract-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">env</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> isDev = env.<span class=\"hljs-property\">development</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> base = {</span><br><span class=\"line\">    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">output</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"[name].js\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../dist\"</span>),</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">module</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">rules</span>: [</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          <span class=\"hljs-attr\">use</span>: [</span><br><span class=\"line\">            !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,</span><br><span class=\"line\">            isDev &amp;&amp; <span class=\"hljs-string\">\"style-loader\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"css-loader\"</span>,</span><br><span class=\"line\">          ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>),</span><br><span class=\"line\">        },</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">plugins</span>: [</span><br><span class=\"line\">      !isDev &amp;&amp;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>({</span><br><span class=\"line\">          <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"css/[name].css\"</span>,</span><br><span class=\"line\">        }),</span><br><span class=\"line\">      <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>({</span><br><span class=\"line\">        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"index.html\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"../public/template.html\"</span>),</span><br><span class=\"line\">        <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">minify</span>: {</span><br><span class=\"line\">          <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">        },</span><br><span class=\"line\">      }),</span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>),</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isDev) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">merge</span>(base, dev);</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"title function_\">merge</span>(base, prod);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"css-预处理器\"><a href=\"#css-预处理器\" class=\"headerlink\" title=\"css 预处理器\"></a>css 预处理器</h3><p>不同的 css 预处理器要安装不同的 loader 来进行解析</p>\n<table>\n<thead>\n<tr>\n<th><strong>预处理器</strong></th>\n<th><strong>需要的 loader</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sass</td>\n<td>sass-loader、node-sass</td>\n</tr>\n<tr>\n<td>less</td>\n<td>less-loader、less</td>\n</tr>\n<tr>\n<td>stylus</td>\n<td>stylus-loader、stylus</td>\n</tr>\n</tbody></table>\n<p>使用<code>sass</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>:[</span><br><span class=\"line\">        !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,</span><br><span class=\"line\">        isDev &amp;&amp; <span class=\"hljs-string\">'style-loader'</span>,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"css-loader\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"sass-loader\"</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 css 文件中可能会使用<code>@import</code>语法引用<code>css</code>文件,被引用的<code>css</code>文件中可能还会导入 &nbsp;<code>scss</code>&nbsp;。这样在编译 &nbsp;<code>css</code><br>的时候，scss 代码不会被编译；可以这么配置：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: [</span><br><span class=\"line\">    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,</span><br><span class=\"line\">    isDev &amp;&amp; <span class=\"hljs-string\">'style-loader'</span>,</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">\"css-loader\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">options</span>:{</span><br><span class=\"line\">            <span class=\"hljs-attr\">importLoaders</span>: <span class=\"hljs-number\">1</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-string\">\"sass-loader\"</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>把 <code>css-loader</code>&nbsp; 的用法改成对象，在配置里面设置 &nbsp;<code>importLoaders</code>&nbsp;。表示在使用 &nbsp;<code>css-loader</code>&nbsp; 编译之前，如果 &nbsp;<code>css</code>&nbsp; 里面使用了 &nbsp;<code>@import</code>&nbsp; 语法引入了一个 &nbsp;<code>scss</code>&nbsp; 文件，就先用 <strong>1</strong> 个放置在在后面的 &nbsp;<code>loader</code>&nbsp; 先编译一次；也就用 &nbsp;<code>sass-loader</code>&nbsp; 编译一次。再继续用 &nbsp;<code>css-loader</code>&nbsp; 编译，就会编译引入的那个 <code>scss</code>。</p>\n</blockquote>\n<h3 id=\"处理样式前缀\"><a href=\"#处理样式前缀\" class=\"headerlink\" title=\"处理样式前缀\"></a>处理样式前缀</h3><p>使用<code>postcss-loader</code>增加样式前缀</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader autoprefixer</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在处理 css 前先增加前缀</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: [</span><br><span class=\"line\">    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,</span><br><span class=\"line\">    isDev &amp;&amp; <span class=\"hljs-string\">'style-loader'</span>,</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">\"postcss-loader\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">options</span>:{</span><br><span class=\"line\">            <span class=\"hljs-attr\">plugins</span>:[<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'autoprefixer'</span>)]</span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-string\">\"sass-loader\"</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>或者也可以创建<code>postcss</code>的配置文件<code>postcss.config.js</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"autoprefixer\"</span>)],</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: [</span><br><span class=\"line\">    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,</span><br><span class=\"line\">    isDev &amp;&amp; <span class=\"hljs-string\">'style-loader'</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"postcss-loader\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"sass-loader\"</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>可以配置浏览器的兼容性范围，在项目根目录下建一个 &nbsp;<a href=\"https://github.com/browserslist/browserslist\">.browserslistrc</a>&nbsp; 文件：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cover <span class=\"hljs-number\">99.5</span>%</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>这里表示覆盖的浏览器范围</p>\n</blockquote>\n<h3 id=\"css-压缩\"><a href=\"#css-压缩\" class=\"headerlink\" title=\"css 压缩\"></a>css 压缩</h3><p>在生产环境下我们需要压缩<code>css</code>文件,配置<code>minimizer</code>选项,安装压缩插件</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i optimize-css-assets-webpack-plugin terser-webpack-plugin --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在<code>webpack.prod.js</code>文件中配置压缩</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">OptimizeCSSAssetsPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"optimize-css-assets-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">TerserJSPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"terser-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-attr\">optimization</span>: {</span><br><span class=\"line\">  <span class=\"hljs-attr\">minimizer</span>: [<span class=\"hljs-keyword\">new</span> <span class=\"title class_\">TerserJSPlugin</span>({}), <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">OptimizeCSSAssetsPlugin</span>({})];</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h3><ul>\n<li>Hash 整个项目的 hash 值</li>\n<li>chunkhash 根据入口产生 hash 值</li>\n<li>contentHash 根据每个文件的内容产生的 hash 值</li>\n</ul>\n<p>我们可以合理的使用<code>hash</code>戳，进行文件的缓存</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!isDev &amp;&amp;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\"css/[name].[contentHash].css\"</span>,</span><br><span class=\"line\">  });</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"处理文件类型\"><a href=\"#处理文件类型\" class=\"headerlink\" title=\"处理文件类型\"></a>处理文件类型</h2><h3 id=\"处理引用的图片\"><a href=\"#处理引用的图片\" class=\"headerlink\" title=\"处理引用的图片\"></a>处理引用的图片</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./webpack.png\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"hljs-string\">\"img\"</span>);</span><br><span class=\"line\">img.<span class=\"hljs-property\">src</span> = logo;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"title function_\">appendChild</span>(img);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用<code>file-loader</code>,会将图片进行打包，并将打包后的路径返回</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.jpe?g|png|gif/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>:{</span><br><span class=\"line\">        <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">'file-loader'</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">options</span>:{</span><br><span class=\"line\">            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">`img/[name].[ext]`</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"处理-icon\"><a href=\"#处理-icon\" class=\"headerlink\" title=\"处理 icon\"></a>处理 icon</h3><p>二进制文件也是使用<code>file-loader</code>来打包</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/woff|ttf|eot|svg|otf/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>:{</span><br><span class=\"line\">        <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">'file-loader'</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"转化成-base64\"><a href=\"#转化成-base64\" class=\"headerlink\" title=\"转化成 base64\"></a>转化成 base64</h3><p>使用<code>url-loader</code>将满足条件的图片转化成 base64,不满足条件的<code>url-loader</code>会自动调用<code>file-loader</code>来进行处理</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.jpe?g|png|gif/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>:{</span><br><span class=\"line\">        <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">'url-loader'</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">options</span>:{</span><br><span class=\"line\">            <span class=\"hljs-attr\">limit</span>:<span class=\"hljs-number\">100</span>*<span class=\"hljs-number\">1024</span>,</span><br><span class=\"line\">            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">`img/[name].[ext]`</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"处理-JS-模块\"><a href=\"#处理-JS-模块\" class=\"headerlink\" title=\"处理 JS 模块\"></a>处理 JS 模块</h2><h3 id=\"将es6代码编译成es5代码\"><a href=\"#将es6代码编译成es5代码\" class=\"headerlink\" title=\"将es6代码编译成es5代码\"></a>将<code>es6</code>代码编译成<code>es5</code>代码</h3><p>代码的转化工作要交给<code>babel</code>来处理</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/core @babel/preset-env babel-loader --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>@babel/core</code>是 babel 中的核心模块，<code>@babel/preset-env</code> 的作用是 es6 转化 es5 插件的插件集合，<code>babel-loader</code>是<code>webpack</code>和<code>loader</code>的桥梁。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> a + b;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>增加<code>babel</code>的配置文件 <code>.babelrc</code></p>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"presets\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@babel/preset-env\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>配置 loader</strong></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">module</span>: {</span><br><span class=\"line\">\t<span class=\"hljs-attr\">rules</span>: [{ <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>, <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">\"babel-loader\"</span> }]</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>现在打包已经可以成功的将 es6 语法转化成 es5 语法！</p>\n<h3 id=\"解析装饰器\"><a href=\"#解析装饰器\" class=\"headerlink\" title=\"解析装饰器\"></a>解析装饰器</h3><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">\"plugins\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@babel/plugin-proposal-decorators\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"legacy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@babel/plugin-proposal-class-properties\"</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-punctuation\">{</span><span class=\"hljs-attr\">\"loose\"</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>legacy:true</code>表示继续使用装饰器装饰器，loose 为 false 时会采用<code>Object.defineProperty</code>定义属性</p>\n<ul>\n<li>Plugin 会运行在 Preset 之前</li>\n<li>Plugin 会从第一个开始顺序执行，Preset 则是相反的</li>\n</ul>\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>根据<code>.browserslistrc</code>文件，转化使用到的浏览器 api</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">\"presets\"</span>: [</span><br><span class=\"line\">    [<span class=\"hljs-string\">\"@babel/preset-env\"</span>,{</span><br><span class=\"line\">        <span class=\"hljs-string\">\"useBuiltIns\"</span>:<span class=\"hljs-string\">\"usage\"</span>, <span class=\"hljs-comment\">// 按需加载</span></span><br><span class=\"line\">        <span class=\"hljs-string\">\"corejs\"</span>:<span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// corejs 替代了以前的pollyfill</span></span><br><span class=\"line\">    }]</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装 corejs</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install core-js@2 --save</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><strong>使用<code>transform-runtime</code></strong><br>A plugin that enables the re-use of Babel’s injected helper code to save on codesize.可以帮我们节省代码</p>\n</blockquote>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @babel/plugin-transform-runtime @babel/runtime</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在<code>.babelrc</code>中配置插件</p>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">\"plugins\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">    <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"添加-eslint\"><a href=\"#添加-eslint\" class=\"headerlink\" title=\"添加 eslint\"></a>添加 eslint</h3><p>安装<code>eslint</code></p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install eslint</span><br><span class=\"line\">npx eslint --init <span class=\"hljs-comment\"># 初始化配置文件</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight arcade hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.js/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">enforce</span>:<span class=\"hljs-string\">'pre'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>:<span class=\"hljs-string\">'eslint-loader'</span></span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>配置<code>eslint-loader</code>可以实时校验 js 文件的正确性,<code>pre</code>表示在所有<code>loader</code>执行前执行</p>\n</blockquote>\n<h2 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source-map\"></a>source-map</h2><ul>\n<li>eval 生成代码 每个模块都被 eval 执行,每一个打包后的模块后面都增加了包含 sourceURL</li>\n<li>source-map 产生 map 文件</li>\n<li>inline 不会生成独立的 .map 文件,会以 dataURL 形式插入</li>\n<li>cheap 忽略打包后的列信息，不使用 loader 中的 sourcemap</li>\n<li>module 没有列信息，使用 loader 中的 sourcemap(没有列信息)</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">devtool</span>: isDev ? <span class=\"hljs-string\">\"cheap-module-eval-source-map\"</span> : <span class=\"hljs-literal\">false</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>每个库中采用的<code>sourcemap</code>方式不一,可以根据自己的需要自行配置</p>\n</blockquote>\n<h2 id=\"resolve-解析\"><a href=\"#resolve-解析\" class=\"headerlink\" title=\"resolve 解析\"></a>resolve 解析</h2><p>想实现使用 require 或是 import 的时候,可以自动尝试添加扩展名进行匹配</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">resolve</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">\".js\"</span>, <span class=\"hljs-string\">\".jsx\"</span>, <span class=\"hljs-string\">\".json\"</span>, <span class=\"hljs-string\">\".css\"</span>, <span class=\"hljs-string\">\".ts\"</span>, <span class=\"hljs-string\">\".tsx\"</span>, <span class=\"hljs-string\">\".vue\"</span>]</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"拷贝静态文件\"><a href=\"#拷贝静态文件\" class=\"headerlink\" title=\"拷贝静态文件\"></a>拷贝静态文件</h2><p>有些时候在打包时希望将一些静态资源文件进行拷贝,可以使用<code>copy-webpack-plugin</code></p>\n<p>安装插件</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i copy-webpack-plugin --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用拷贝插件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">CopyWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"copy-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> <span class=\"title class_\">CopyWebpackPlugin</span>([</span><br><span class=\"line\">  { <span class=\"hljs-attr\">from</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">\"./src/static\"</span>), <span class=\"hljs-attr\">to</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"hljs-string\">\"./dist\"</span>) },</span><br><span class=\"line\">]);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><p>设置服务端接口</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">\"/api/list\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>([<span class=\"hljs-string\">\"香蕉\"</span>, <span class=\"hljs-string\">\"苹果\"</span>, <span class=\"hljs-string\">\"橘子\"</span>]);</span><br><span class=\"line\">});</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"hljs-number\">4000</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装<code>axios</code>获取数据</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置接口请求</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(todo,index) in todos\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>{{todo}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>&gt;</span><span class=\"hljs-language-javascript\"></span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  <span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"axios\"</span>;</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  <span class=\"hljs-keyword\">import</span> { <span class=\"title class_\">Component</span>, <span class=\"title class_\">Vue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-property-decorator\"</span>;</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  @<span class=\"title class_\">Component</span></span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">Todo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">Vue</span> {</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">    public <span class=\"hljs-attr\">todos</span>: string[] = [];</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">    <span class=\"hljs-keyword\">async</span> <span class=\"title function_\">mounted</span>(<span class=\"hljs-params\"></span>) {</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">      <span class=\"hljs-keyword\">let</span> { data } = <span class=\"hljs-keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">\"/api/list\"</span>);</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">todos</span> = data;</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置服务器代理路由</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">proxy</span>: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'/api'</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'http://localhost:4000'</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>loader 主要用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块！<br>通过使用不同的 Loader，Webpack 可以把不同的文件都转成 JS 文件,比如 CSS、ES6/7、JSX 等。</p>\n<p>我们来看看这些我们必须掌握的 loader!</p></body></html>","more":"<h2 id=\"配置-loader\"><a href=\"#配置-loader\" class=\"headerlink\" title=\"配置 loader\"></a>配置 loader</h2><h3 id=\"loader-的使用\"><a href=\"#loader-的使用\" class=\"headerlink\" title=\"loader 的使用\"></a>loader 的使用</h3><ul>\n<li>test：匹配处理文件的扩展名的正则表达式</li>\n<li>use：loader 名称，就是你要使用模块的名称</li>\n<li>include&#x2F;exclude:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹</li>\n<li>options:为 loaders 提供额外的设置选项</li>\n</ul>\n<p>默认<code>loader</code>的顺序是<strong>从下到上</strong>、<strong>从右向左</strong>执行，当然执行顺序也可以手动定义的，接下来我们依次介绍常见的 loader，来感受<code>loader</code>的魅力!</p>\n<p>我们基于这个基础配置来继续编写:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dev = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.dev&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> prod = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.prod&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-merge&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> base = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../dist&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.html&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">      <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">cleanOnceBeforeBuildPatterns</span>: [path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;xxxx/*&quot;</span>), <span class=\"string\">&quot;**/*&quot;</span>],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">env</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env.<span class=\"property\">development</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(base, dev);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(base, prod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理-CSS-文件\"><a href=\"#处理-CSS-文件\" class=\"headerlink\" title=\"处理 CSS 文件\"></a>处理 CSS 文件</h2><h3 id=\"解析-css-样式\"><a href=\"#解析-css-样式\" class=\"headerlink\" title=\"解析 css 样式\"></a>解析 css 样式</h3><p>我们在<code>js</code>文件中引入 css 样式！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>再次执行打包时，会提示 css 无法解析</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR <span class=\"keyword\">in</span> ./src/index.css 1:4</span><br><span class=\"line\">Module parse failed: Unexpected token (1:4)</span><br><span class=\"line\">You may need an appropriate loader to handle this file <span class=\"built_in\">type</span>, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class=\"comment\">#loaders</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>安装 loader</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抽离样式文件\"><a href=\"#抽离样式文件\" class=\"headerlink\" title=\"抽离样式文件\"></a>抽离样式文件</h3><p>默认只在打包时进行样式抽离</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">env</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDev = env.<span class=\"property\">development</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> base = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*source...*/</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDev) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(base, dev);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(base, prod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>安装抽离插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>配置抽离插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">                    isDev &amp;&amp; <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;css-loader&quot;</span></span><br><span class=\"line\">                ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">         !isDev &amp;&amp; <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&quot;css/[name].css&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>plugins</code> 里的成员，不能是一个布尔值，否则会报错；而上面的配置在开发环境下会是个  <code>false</code> 。那么我们就可以通过数组的  <code>filter</code>  方法做个简单的过滤处理。</p>\n</blockquote>\n<p>最终文件配置:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dev = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.dev&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> prod = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.prod&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-merge&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">env</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDev = env.<span class=\"property\">development</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> base = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../dist&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          <span class=\"attr\">use</span>: [</span><br><span class=\"line\">            !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">            isDev &amp;&amp; <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">          ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">      !isDev &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;css/[name].css&quot;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.html&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">removeAttributeQuotes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDev) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(base, dev);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(base, prod);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-预处理器\"><a href=\"#css-预处理器\" class=\"headerlink\" title=\"css 预处理器\"></a>css 预处理器</h3><p>不同的 css 预处理器要安装不同的 loader 来进行解析</p>\n<table>\n<thead>\n<tr>\n<th><strong>预处理器</strong></th>\n<th><strong>需要的 loader</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sass</td>\n<td>sass-loader、node-sass</td>\n</tr>\n<tr>\n<td>less</td>\n<td>less-loader、less</td>\n</tr>\n<tr>\n<td>stylus</td>\n<td>stylus-loader、stylus</td>\n</tr>\n</tbody></table>\n<p>使用<code>sass</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>:[</span><br><span class=\"line\">        !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">        isDev &amp;&amp; <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;sass-loader&quot;</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 css 文件中可能会使用<code>@import</code>语法引用<code>css</code>文件,被引用的<code>css</code>文件中可能还会导入  <code>scss</code> 。这样在编译  <code>css</code><br>的时候，scss 代码不会被编译；可以这么配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">    isDev &amp;&amp; <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>:<span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">importLoaders</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;sass-loader&quot;</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>把 <code>css-loader</code>  的用法改成对象，在配置里面设置  <code>importLoaders</code> 。表示在使用  <code>css-loader</code>  编译之前，如果  <code>css</code>  里面使用了  <code>@import</code>  语法引入了一个  <code>scss</code>  文件，就先用 <strong>1</strong> 个放置在在后面的  <code>loader</code>  先编译一次；也就用  <code>sass-loader</code>  编译一次。再继续用  <code>css-loader</code>  编译，就会编译引入的那个 <code>scss</code>。</p>\n</blockquote>\n<h3 id=\"处理样式前缀\"><a href=\"#处理样式前缀\" class=\"headerlink\" title=\"处理样式前缀\"></a>处理样式前缀</h3><p>使用<code>postcss-loader</code>增加样式前缀</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n\n<p>在处理 css 前先增加前缀</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">    isDev &amp;&amp; <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>:<span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">plugins</span>:[<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;sass-loader&quot;</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者也可以创建<code>postcss</code>的配置文件<code>postcss.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"built_in\">require</span>(<span class=\"string\">&quot;autoprefixer&quot;</span>)],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">    !isDev &amp;&amp; <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">    isDev &amp;&amp; <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sass-loader&quot;</span></span><br><span class=\"line\">    ].<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以配置浏览器的兼容性范围，在项目根目录下建一个  <a href=\"https://github.com/browserslist/browserslist\">.browserslistrc</a>  文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cover <span class=\"number\">99.5</span>%</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里表示覆盖的浏览器范围</p>\n</blockquote>\n<h3 id=\"css-压缩\"><a href=\"#css-压缩\" class=\"headerlink\" title=\"css 压缩\"></a>css 压缩</h3><p>在生产环境下我们需要压缩<code>css</code>文件,配置<code>minimizer</code>选项,安装压缩插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i optimize-css-assets-webpack-plugin terser-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.prod.js</code>文件中配置压缩</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">OptimizeCSSAssetsPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;optimize-css-assets-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserJSPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">minimizer</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">TerserJSPlugin</span>(&#123;&#125;), <span class=\"keyword\">new</span> <span class=\"title class_\">OptimizeCSSAssetsPlugin</span>(&#123;&#125;)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h3><ul>\n<li>Hash 整个项目的 hash 值</li>\n<li>chunkhash 根据入口产生 hash 值</li>\n<li>contentHash 根据每个文件的内容产生的 hash 值</li>\n</ul>\n<p>我们可以合理的使用<code>hash</code>戳，进行文件的缓存</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!isDev &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;css/[name].[contentHash].css&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理文件类型\"><a href=\"#处理文件类型\" class=\"headerlink\" title=\"处理文件类型\"></a>处理文件类型</h2><h3 id=\"处理引用的图片\"><a href=\"#处理引用的图片\" class=\"headerlink\" title=\"处理引用的图片\"></a>处理引用的图片</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">&quot;./webpack.png&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">img.<span class=\"property\">src</span> = logo;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(img);</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>file-loader</code>,会将图片进行打包，并将打包后的路径返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.jpe?g|png|gif/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">`img/[name].[ext]`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理-icon\"><a href=\"#处理-icon\" class=\"headerlink\" title=\"处理 icon\"></a>处理 icon</h3><p>二进制文件也是使用<code>file-loader</code>来打包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/woff|ttf|eot|svg|otf/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转化成-base64\"><a href=\"#转化成-base64\" class=\"headerlink\" title=\"转化成 base64\"></a>转化成 base64</h3><p>使用<code>url-loader</code>将满足条件的图片转化成 base64,不满足条件的<code>url-loader</code>会自动调用<code>file-loader</code>来进行处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.jpe?g|png|gif/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">limit</span>:<span class=\"number\">100</span>*<span class=\"number\">1024</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">`img/[name].[ext]`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理-JS-模块\"><a href=\"#处理-JS-模块\" class=\"headerlink\" title=\"处理 JS 模块\"></a>处理 JS 模块</h2><h3 id=\"将es6代码编译成es5代码\"><a href=\"#将es6代码编译成es5代码\" class=\"headerlink\" title=\"将es6代码编译成es5代码\"></a>将<code>es6</code>代码编译成<code>es5</code>代码</h3><p>代码的转化工作要交给<code>babel</code>来处理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/core @babel/preset-env babel-loader --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><code>@babel/core</code>是 babel 中的核心模块，<code>@babel/preset-env</code> 的作用是 es6 转化 es5 插件的插件集合，<code>babel-loader</code>是<code>webpack</code>和<code>loader</code>的桥梁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">sum</span> = (<span class=\"params\">a, b</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>增加<code>babel</code>的配置文件 <code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/preset-env&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置 loader</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: [&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>现在打包已经可以成功的将 es6 语法转化成 es5 语法！</p>\n<h3 id=\"解析装饰器\"><a href=\"#解析装饰器\" class=\"headerlink\" title=\"解析装饰器\"></a>解析装饰器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/plugin-proposal-decorators&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;legacy&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class=\"punctuation\">,</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;loose&quot;</span><span class=\"punctuation\">:</span><span class=\"keyword\">true</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>legacy:true</code>表示继续使用装饰器装饰器，loose 为 false 时会采用<code>Object.defineProperty</code>定义属性</p>\n<ul>\n<li>Plugin 会运行在 Preset 之前</li>\n<li>Plugin 会从第一个开始顺序执行，Preset 则是相反的</li>\n</ul>\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>根据<code>.browserslistrc</code>文件，转化使用到的浏览器 api</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&quot;@babel/preset-env&quot;</span>,&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;useBuiltIns&quot;</span>:<span class=\"string\">&quot;usage&quot;</span>, <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\">        <span class=\"string\">&quot;corejs&quot;</span>:<span class=\"number\">2</span> <span class=\"comment\">// corejs 替代了以前的pollyfill</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>安装 corejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install core-js@2 --save</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>使用<code>transform-runtime</code></strong><br>A plugin that enables the re-use of Babel’s injected helper code to save on codesize.可以帮我们节省代码</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @babel/plugin-transform-runtime @babel/runtime</span><br></pre></td></tr></table></figure>\n\n<p>在<code>.babelrc</code>中配置插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-eslint\"><a href=\"#添加-eslint\" class=\"headerlink\" title=\"添加 eslint\"></a>添加 eslint</h3><p>安装<code>eslint</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install eslint</span><br><span class=\"line\">npx eslint --init <span class=\"comment\"># 初始化配置文件</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">    <span class=\"attr\">enforce</span>:<span class=\"string\">&#x27;pre&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>:<span class=\"string\">&#x27;eslint-loader&#x27;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置<code>eslint-loader</code>可以实时校验 js 文件的正确性,<code>pre</code>表示在所有<code>loader</code>执行前执行</p>\n</blockquote>\n<h2 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source-map\"></a>source-map</h2><ul>\n<li>eval 生成代码 每个模块都被 eval 执行,每一个打包后的模块后面都增加了包含 sourceURL</li>\n<li>source-map 产生 map 文件</li>\n<li>inline 不会生成独立的 .map 文件,会以 dataURL 形式插入</li>\n<li>cheap 忽略打包后的列信息，不使用 loader 中的 sourcemap</li>\n<li>module 没有列信息，使用 loader 中的 sourcemap(没有列信息)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devtool</span>: isDev ? <span class=\"string\">&quot;cheap-module-eval-source-map&quot;</span> : <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>每个库中采用的<code>sourcemap</code>方式不一,可以根据自己的需要自行配置</p>\n</blockquote>\n<h2 id=\"resolve-解析\"><a href=\"#resolve-解析\" class=\"headerlink\" title=\"resolve 解析\"></a>resolve 解析</h2><p>想实现使用 require 或是 import 的时候,可以自动尝试添加扩展名进行匹配</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.jsx&quot;</span>, <span class=\"string\">&quot;.json&quot;</span>, <span class=\"string\">&quot;.css&quot;</span>, <span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.tsx&quot;</span>, <span class=\"string\">&quot;.vue&quot;</span>]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拷贝静态文件\"><a href=\"#拷贝静态文件\" class=\"headerlink\" title=\"拷贝静态文件\"></a>拷贝静态文件</h2><p>有些时候在打包时希望将一些静态资源文件进行拷贝,可以使用<code>copy-webpack-plugin</code></p>\n<p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i copy-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>使用拷贝插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CopyWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CopyWebpackPlugin</span>([</span><br><span class=\"line\">  &#123; <span class=\"attr\">from</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;./src/static&quot;</span>), <span class=\"attr\">to</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;./dist&quot;</span>) &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><p>设置服务端接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/list&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>([<span class=\"string\">&quot;香蕉&quot;</span>, <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;橘子&quot;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">4000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>安装<code>axios</code>获取数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>配置接口请求</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(todo,index) in todos&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Vue</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-property-decorator&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  @<span class=\"title class_\">Component</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Todo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Vue</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    public <span class=\"attr\">todos</span>: string[] = [];</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">async</span> <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/list&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span> = data;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置服务器代理路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://localhost:4000&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"进程与集群","toc":true,"date":"2019-12-03T00:18:35.000Z","_content":"\n进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。\n线程（Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。\n\n<!-- more -->\n\n**Node 特点主线程是单线程的，**一个进程只开一个主线程,基于事件驱动的、异步非阻塞 I/O，可以应用于高并发场景\nNodejs 中没有多线程，为了充分利用多核 cpu,可以使用子进程实现内核的负载均衡\n\n**那我们就要解决以下问题**\n\n- Node.js 做耗时的计算时候阻塞问题\n- Node.js 如何开启多进程\n- 开发过程中如何实现进程守护\n\n## 单线程的问题\n\n```javascript\nconst http = require(\"http\");\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === \"/sum\") {\n      // 求和\n      let sum = 0;\n      for (let i = 0; i < 10000000000; i++) {\n        sum += i;\n      }\n      res.end(sum + \"\");\n    } else {\n      res.end(\"end\");\n    }\n  })\n  .listen(3000);\n```\n\n> 访问  `/sum`  这个路径时，再新建一个浏览器页卡访问  `/` 会发现新的页卡需要要等待  `/sum` 路径的逻辑处理好后，才能处理  `/` 路径的逻辑\n\n## spawn 操作进程\n\n> 适合很大的输出操作时使用\n\n### 开启进程\n\nNode.js 可以通过 `child_process` 创建子进程\n\n- child_process.spawn(） 异步生成子进程\n- child_process.fork() 产生一个新的 Node.js 进程，并使用建立的 IPC 通信通道调用指定的模块，该通道允许在父级和子级之间发送消息。\n- child_process.exec() 产生一个 shell 并在该 shell 中运行命令\n- child_process.execFile() 无需产生 shell\n\n#### spawn\n\n```javascript\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\n// 通过node命令执行sub_process.js文件\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"), // 指定执行文件的父目录\n  stdio: [0, 1, 2],\n});\n\n// 监控错误\nchildProcess.on(\"error\", function (err) {\n  console.log(err);\n});\n\n// 监听关闭事件\nchildProcess.on(\"close\", function () {\n  console.log(\"close\");\n});\n\n// 监听退出事件\nchildProcess.on(\"exit\", function () {\n  console.log(\"exit\");\n});\n```\n\n> `stdio` 的 0、1、2 分别对应当前主进程的  `process.stdin`, `process.stdout`, `process.stderr`, 可以写成数字也可以写成属性。还可以写成  `inherit` ，作用和前面等价，默认写法。也可以设置忽略这些流，设置  `stdio: 'inherit'`  或者  `stdio: ['inherit', 'inherit', 'inherit']` 。\n>\n> **这样就意味着子进程在运行时，使用的  `process` 是主进程的。**\n\n### 读取子进程的打印结果\n\n通过管道的方式通信\n\n```javascript\n// 主进程\n\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"),\n  stdio: \"pipe\", // 等价于 ['pipe', 'pipe', 'pipe']\n});\n\n// 监听标准输出\nchildProcess.stdout.on(\"data\", function (data) {\n  console.log(data);\n});\n```\n\n> 通过管道的方式，监听子进程的可写流，从而可以拿到子进程打印的结果\n\n```javascript\n// 子进程 test/sub_process.js\n\nlet total = 0;\n\nfor (let i = 0; i < 10000000000; i++) {\n  total += i;\n}\n\n// 铜鼓\nprocess.stdout.write(total + \"\"); // 只能输出字符串或者 buffer\n```\n\n### 进程通信\n\n#### 子进程向主进程发送数据\n\n```javascript\n// 主进程\n\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"),\n  stdio: [0, 1, 2, \"ipc\"],\n});\n\n// 监听子进程发送过来的数据\nchildProcess.on(\"message\", function (data) {\n  console.log(data);\n});\n```\n\n> `stdio`  的参数设置比较特殊，可以写成上面那样。还可以把 0、1、2 中的任意一个替换成 ipc  也可以。注意结合 0、1、2 代表的实际意义来决定使用方式。\n\n```javascript\n// 子进程 test/sub_process.js\n\nlet total = 0;\n\nfor (let i = 0; i < 10000000000; i++) {\n  total += i;\n}\n\nprocess.send(total); // 向主进程发送意数据类型\n```\n\n### 主进程向子进程发送数据\n\n```javascript\nchildProcess.send(666);\n```\n\n```javascript\nlet total = 0;\n\nfor (let i = 0; i < 10000000000; i++) {\n  total += i;\n}\n\nprocess.send(total); // 向主进程发送意数据类型\n\nprocess.on(\"message\", (data) => {\n  console.log(data);\n});\n```\n\n**注意：**\n**上面主进程向子进程通信的逻辑会正确执行，但是主进程和子进程都会保持运行状态。因为子进程在持续监听 `message`  事件；对于子进程而言，它并不知道主进程什么时候会发送消息过来，从而一直保持监听状态。导致整个程序，即主进程和子进程都维持这运行状态。**\n**可以在  `message`  事件里面，设置  `process.exit()` 。监听事件被执行后，就关闭主进程。**\n\n### 缺陷\n\n上面的进程操作，子进程必须听主进程的；一旦主进程挂了，子进程就会挂。\n\n### 独立运行的子进程\n\n```javascript\n// 主进程\n\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"),\n  stdio: \"ingnore\", // 忽略子进程的“三流”\n  detached: true, // 创建独立的进程\n});\n\nchildProcess.unref(); // 切断与子进程的关系\n```\n\n```javascript\nsetInterval(() => {\n  fs.readFileSync(\"a.txt\", \"1\");\n}, 1000);\n```\n\n> 可以在子进程里打印下进程号  `process.pid` ，方便 `kill`\n\n### 解决单线程的问题\n\n```javascript\nconst http = require(\"http\");\nconst { spawn } = require(\"child_process\");\nconst path = require(\"path\");\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === \"/sum\") {\n      let cp = spawn(\"node\", [\"sub_process.js\"], {\n        cwd: path.resolve(__dirname, \"test\"),\n        stdio: [0, 1, 2, \"ipc\"],\n      });\n      cp.on(\"message\", function (total) {\n        res.end(\"total:\" + total);\n      });\n    } else {\n      res.end(\"end ok\");\n    }\n  })\n  .listen(3000);\n```\n\n```javascript\nlet sum = 0;\nfor (let i = 0; i < 10000000000; i++) {\n  sum += i;\n}\n\nprocess.send(sum);\n```\n\n## child_process 的其它 API 操作进程\n\n### 执行文件\n\n> 只执行某个文件，不做其他的操作时适合使用。默认使用了  `ipc`  通信。\n\n```javascript\nfork(\"sum.js\", {\n  cwd: path.resolve(__dirname, \"test\"),\n  silent: true, // true: 管道通信、false: 等价于 spawn 的 stdio 的默认值\n});\n```\n\n### 执行命令\n\n> 适合数据小于 200k 的操作场景\n\n方式一：\n\n```javascript\n// 不会产生默认的 shell 窗口\nexec(\"ls -ll\", (err, stdout, stderr) => {\n  console.log(stdout);\n});\n```\n\n方式二：\n\n```javascript\n// 会产生默认的 shell 窗口\nexecFile(\"ls\", [\"-ll\"], (err, stdout, stderr) => {\n  console.log(stdout);\n});\n```\n\n## 集群\n\n集群：多个人去实现一个功能\n分布式：把一个功能拆分成多个，放到不同的地方\n\n### 实现\n\n#### fork\n\n开启多个进程，并同时监听一个服务。当请求到来时，会让空闲的进程去处理。实现负载均衡\n\n```javascript\nconst { fork } = require(\"child_process\");\nconst cpus = require(\"os\").cpus().length - 1; // 拿到 cpu 核数（当前脚本会占一个进程）\nconst http = require(\"http\");\n\nlet server = http\n  .createServer((req, res) => {\n    res.end(\"parent:\" + process.pid);\n  })\n  .listen(3000);\n\nconsole.log(process.pid); // 当前进程\n\nfor (let i = 0; i < cpus; i++) {\n  let child = fork(\"server.js\");\n\n  // server 的名字固定，传入一个http服务，即其他集成需要监听的服务\n  child.send(\"server\", server);\n}\n```\n\n```javascript\n// server.js\nconst http = require(\"http\");\n\nprocess.on(\"message\", (data, server) => {\n  http\n    .createServer((req, res) => {\n      res.end(\"processPID:\" + process.pid);\n    })\n    .listen(server);\n});\n```\n\n#### 内置模块\n\n```javascript\nconst cluster = require(\"cluster\");\nconst cpus = require(\"os\").cpus().length;\nconst http = require(\"http\");\n\nif (cluster.isMaster) {\n  cluster.on(\"exit\", function (worker) {\n    // 每当有进程挂掉时\n    console.log(worker.process.pid); // 打印这个进程的 pid\n    cluster.fork(); // 重启进程\n  });\n\n  for (let i = 0; i < cpus; i++) {\n    cluster.fork(); // 开启进程\n  }\n} else {\n  http\n    .createServer((req, res) => {\n      // 模拟错误请求\n      if (Math.random() > 0.5) {\n        aa();\n      }\n      res.end(\"process\" + process.pid);\n    })\n    .listen(3000);\n\n  console.log(process.pid);\n}\n```\n\n原理是给予  `fork`  实现的，但好处显而易见。上面的程序在第一次运行的时候，`isMaster`  是 true；监听进程的状态再开启多进程。每开启一个进程(执行一次`fork`)，这个程序就被自动执行一次；并且每次的  `isMaster`  是 false。然后在下面的逻辑里，开启多个进程对一个服务的监听。\n\n> **注意：当前的进程，可以视为守护进程。**\n\n### pm2\n\npm2 可以把你的应用部署到服务器所有的 CPU 上,实现了多进程管理、监控、及负载均衡\n\n#### 安装 pm2\n\n```bash\nnpm install pm2 -g # 安装pm2\npm2 start server.js --watch -i max # 启动进程\npm2 list # 显示进程状态\npm2 kill # 杀死全部进程\n```\n\n```bash\npm2 start npm -- run dev # 启动npm脚本\n```\n\n#### pm2 配置文件\n\n```bash\npm2 ecosystem\n```\n\n配置项目自动部署\n\n```javascript\nmodule.exports = {\n  apps: [\n    {\n      name: \"my-project\",\n      script: \"server.js\",\n      // Options reference: https://pm2.io/doc/en/runtime/reference/ecosystem-file/\n      args: \"one two\",\n      instances: 2,\n      autorestart: true,\n      watch: false,\n      max_memory_restart: \"1G\",\n      env: {\n        NODE_ENV: \"development\",\n      },\n      env_production: {\n        NODE_ENV: \"production\",\n      },\n    },\n  ],\n  deploy: {\n    production: {\n      user: \"root\",\n      host: \"39.106.14.146\",\n      ref: \"origin/master\",\n      repo: \"https://github.com/wakeupmypig/pm2-deploy.git\",\n      path: \"/home\",\n      \"post-deploy\":\n        \"npm install && pm2 reload ecosystem.config.js --env production\",\n    },\n  },\n};\n```\n\n```shell\npm2 deploy ecosystem.config.js production setup # 执行git clone\n```\n\n上面执行 git clone 的命令去掉 setup，即可启动 pm2\n","source":"_posts/06_进程与集群.md","raw":"---\ntitle: 进程与集群\ntoc: true\ndate: 2019-12-3 8:18:35\ncategories:\n  - Node\n  - 进程\ntags: NodeJS\n---\n\n进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。\n线程（Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。\n\n<!-- more -->\n\n**Node 特点主线程是单线程的，**一个进程只开一个主线程,基于事件驱动的、异步非阻塞 I/O，可以应用于高并发场景\nNodejs 中没有多线程，为了充分利用多核 cpu,可以使用子进程实现内核的负载均衡\n\n**那我们就要解决以下问题**\n\n- Node.js 做耗时的计算时候阻塞问题\n- Node.js 如何开启多进程\n- 开发过程中如何实现进程守护\n\n## 单线程的问题\n\n```javascript\nconst http = require(\"http\");\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === \"/sum\") {\n      // 求和\n      let sum = 0;\n      for (let i = 0; i < 10000000000; i++) {\n        sum += i;\n      }\n      res.end(sum + \"\");\n    } else {\n      res.end(\"end\");\n    }\n  })\n  .listen(3000);\n```\n\n> 访问  `/sum`  这个路径时，再新建一个浏览器页卡访问  `/` 会发现新的页卡需要要等待  `/sum` 路径的逻辑处理好后，才能处理  `/` 路径的逻辑\n\n## spawn 操作进程\n\n> 适合很大的输出操作时使用\n\n### 开启进程\n\nNode.js 可以通过 `child_process` 创建子进程\n\n- child_process.spawn(） 异步生成子进程\n- child_process.fork() 产生一个新的 Node.js 进程，并使用建立的 IPC 通信通道调用指定的模块，该通道允许在父级和子级之间发送消息。\n- child_process.exec() 产生一个 shell 并在该 shell 中运行命令\n- child_process.execFile() 无需产生 shell\n\n#### spawn\n\n```javascript\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\n// 通过node命令执行sub_process.js文件\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"), // 指定执行文件的父目录\n  stdio: [0, 1, 2],\n});\n\n// 监控错误\nchildProcess.on(\"error\", function (err) {\n  console.log(err);\n});\n\n// 监听关闭事件\nchildProcess.on(\"close\", function () {\n  console.log(\"close\");\n});\n\n// 监听退出事件\nchildProcess.on(\"exit\", function () {\n  console.log(\"exit\");\n});\n```\n\n> `stdio` 的 0、1、2 分别对应当前主进程的  `process.stdin`, `process.stdout`, `process.stderr`, 可以写成数字也可以写成属性。还可以写成  `inherit` ，作用和前面等价，默认写法。也可以设置忽略这些流，设置  `stdio: 'inherit'`  或者  `stdio: ['inherit', 'inherit', 'inherit']` 。\n>\n> **这样就意味着子进程在运行时，使用的  `process` 是主进程的。**\n\n### 读取子进程的打印结果\n\n通过管道的方式通信\n\n```javascript\n// 主进程\n\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"),\n  stdio: \"pipe\", // 等价于 ['pipe', 'pipe', 'pipe']\n});\n\n// 监听标准输出\nchildProcess.stdout.on(\"data\", function (data) {\n  console.log(data);\n});\n```\n\n> 通过管道的方式，监听子进程的可写流，从而可以拿到子进程打印的结果\n\n```javascript\n// 子进程 test/sub_process.js\n\nlet total = 0;\n\nfor (let i = 0; i < 10000000000; i++) {\n  total += i;\n}\n\n// 铜鼓\nprocess.stdout.write(total + \"\"); // 只能输出字符串或者 buffer\n```\n\n### 进程通信\n\n#### 子进程向主进程发送数据\n\n```javascript\n// 主进程\n\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"),\n  stdio: [0, 1, 2, \"ipc\"],\n});\n\n// 监听子进程发送过来的数据\nchildProcess.on(\"message\", function (data) {\n  console.log(data);\n});\n```\n\n> `stdio`  的参数设置比较特殊，可以写成上面那样。还可以把 0、1、2 中的任意一个替换成 ipc  也可以。注意结合 0、1、2 代表的实际意义来决定使用方式。\n\n```javascript\n// 子进程 test/sub_process.js\n\nlet total = 0;\n\nfor (let i = 0; i < 10000000000; i++) {\n  total += i;\n}\n\nprocess.send(total); // 向主进程发送意数据类型\n```\n\n### 主进程向子进程发送数据\n\n```javascript\nchildProcess.send(666);\n```\n\n```javascript\nlet total = 0;\n\nfor (let i = 0; i < 10000000000; i++) {\n  total += i;\n}\n\nprocess.send(total); // 向主进程发送意数据类型\n\nprocess.on(\"message\", (data) => {\n  console.log(data);\n});\n```\n\n**注意：**\n**上面主进程向子进程通信的逻辑会正确执行，但是主进程和子进程都会保持运行状态。因为子进程在持续监听 `message`  事件；对于子进程而言，它并不知道主进程什么时候会发送消息过来，从而一直保持监听状态。导致整个程序，即主进程和子进程都维持这运行状态。**\n**可以在  `message`  事件里面，设置  `process.exit()` 。监听事件被执行后，就关闭主进程。**\n\n### 缺陷\n\n上面的进程操作，子进程必须听主进程的；一旦主进程挂了，子进程就会挂。\n\n### 独立运行的子进程\n\n```javascript\n// 主进程\n\nlet { spawn } = require(\"child_process\");\nlet path = require(\"path\");\n\nlet childProcess = spawn(\"node\", [\"sub_process.js\"], {\n  cwd: path.resolve(__dirname, \"test\"),\n  stdio: \"ingnore\", // 忽略子进程的“三流”\n  detached: true, // 创建独立的进程\n});\n\nchildProcess.unref(); // 切断与子进程的关系\n```\n\n```javascript\nsetInterval(() => {\n  fs.readFileSync(\"a.txt\", \"1\");\n}, 1000);\n```\n\n> 可以在子进程里打印下进程号  `process.pid` ，方便 `kill`\n\n### 解决单线程的问题\n\n```javascript\nconst http = require(\"http\");\nconst { spawn } = require(\"child_process\");\nconst path = require(\"path\");\n\nhttp\n  .createServer((req, res) => {\n    if (req.url === \"/sum\") {\n      let cp = spawn(\"node\", [\"sub_process.js\"], {\n        cwd: path.resolve(__dirname, \"test\"),\n        stdio: [0, 1, 2, \"ipc\"],\n      });\n      cp.on(\"message\", function (total) {\n        res.end(\"total:\" + total);\n      });\n    } else {\n      res.end(\"end ok\");\n    }\n  })\n  .listen(3000);\n```\n\n```javascript\nlet sum = 0;\nfor (let i = 0; i < 10000000000; i++) {\n  sum += i;\n}\n\nprocess.send(sum);\n```\n\n## child_process 的其它 API 操作进程\n\n### 执行文件\n\n> 只执行某个文件，不做其他的操作时适合使用。默认使用了  `ipc`  通信。\n\n```javascript\nfork(\"sum.js\", {\n  cwd: path.resolve(__dirname, \"test\"),\n  silent: true, // true: 管道通信、false: 等价于 spawn 的 stdio 的默认值\n});\n```\n\n### 执行命令\n\n> 适合数据小于 200k 的操作场景\n\n方式一：\n\n```javascript\n// 不会产生默认的 shell 窗口\nexec(\"ls -ll\", (err, stdout, stderr) => {\n  console.log(stdout);\n});\n```\n\n方式二：\n\n```javascript\n// 会产生默认的 shell 窗口\nexecFile(\"ls\", [\"-ll\"], (err, stdout, stderr) => {\n  console.log(stdout);\n});\n```\n\n## 集群\n\n集群：多个人去实现一个功能\n分布式：把一个功能拆分成多个，放到不同的地方\n\n### 实现\n\n#### fork\n\n开启多个进程，并同时监听一个服务。当请求到来时，会让空闲的进程去处理。实现负载均衡\n\n```javascript\nconst { fork } = require(\"child_process\");\nconst cpus = require(\"os\").cpus().length - 1; // 拿到 cpu 核数（当前脚本会占一个进程）\nconst http = require(\"http\");\n\nlet server = http\n  .createServer((req, res) => {\n    res.end(\"parent:\" + process.pid);\n  })\n  .listen(3000);\n\nconsole.log(process.pid); // 当前进程\n\nfor (let i = 0; i < cpus; i++) {\n  let child = fork(\"server.js\");\n\n  // server 的名字固定，传入一个http服务，即其他集成需要监听的服务\n  child.send(\"server\", server);\n}\n```\n\n```javascript\n// server.js\nconst http = require(\"http\");\n\nprocess.on(\"message\", (data, server) => {\n  http\n    .createServer((req, res) => {\n      res.end(\"processPID:\" + process.pid);\n    })\n    .listen(server);\n});\n```\n\n#### 内置模块\n\n```javascript\nconst cluster = require(\"cluster\");\nconst cpus = require(\"os\").cpus().length;\nconst http = require(\"http\");\n\nif (cluster.isMaster) {\n  cluster.on(\"exit\", function (worker) {\n    // 每当有进程挂掉时\n    console.log(worker.process.pid); // 打印这个进程的 pid\n    cluster.fork(); // 重启进程\n  });\n\n  for (let i = 0; i < cpus; i++) {\n    cluster.fork(); // 开启进程\n  }\n} else {\n  http\n    .createServer((req, res) => {\n      // 模拟错误请求\n      if (Math.random() > 0.5) {\n        aa();\n      }\n      res.end(\"process\" + process.pid);\n    })\n    .listen(3000);\n\n  console.log(process.pid);\n}\n```\n\n原理是给予  `fork`  实现的，但好处显而易见。上面的程序在第一次运行的时候，`isMaster`  是 true；监听进程的状态再开启多进程。每开启一个进程(执行一次`fork`)，这个程序就被自动执行一次；并且每次的  `isMaster`  是 false。然后在下面的逻辑里，开启多个进程对一个服务的监听。\n\n> **注意：当前的进程，可以视为守护进程。**\n\n### pm2\n\npm2 可以把你的应用部署到服务器所有的 CPU 上,实现了多进程管理、监控、及负载均衡\n\n#### 安装 pm2\n\n```bash\nnpm install pm2 -g # 安装pm2\npm2 start server.js --watch -i max # 启动进程\npm2 list # 显示进程状态\npm2 kill # 杀死全部进程\n```\n\n```bash\npm2 start npm -- run dev # 启动npm脚本\n```\n\n#### pm2 配置文件\n\n```bash\npm2 ecosystem\n```\n\n配置项目自动部署\n\n```javascript\nmodule.exports = {\n  apps: [\n    {\n      name: \"my-project\",\n      script: \"server.js\",\n      // Options reference: https://pm2.io/doc/en/runtime/reference/ecosystem-file/\n      args: \"one two\",\n      instances: 2,\n      autorestart: true,\n      watch: false,\n      max_memory_restart: \"1G\",\n      env: {\n        NODE_ENV: \"development\",\n      },\n      env_production: {\n        NODE_ENV: \"production\",\n      },\n    },\n  ],\n  deploy: {\n    production: {\n      user: \"root\",\n      host: \"39.106.14.146\",\n      ref: \"origin/master\",\n      repo: \"https://github.com/wakeupmypig/pm2-deploy.git\",\n      path: \"/home\",\n      \"post-deploy\":\n        \"npm install && pm2 reload ecosystem.config.js --env production\",\n    },\n  },\n};\n```\n\n```shell\npm2 deploy ecosystem.config.js production setup # 执行git clone\n```\n\n上面执行 git clone 的命令去掉 setup，即可启动 pm2\n","slug":"06_进程与集群","published":1,"updated":"2022-04-21T02:02:58.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl28d0de3000zeou9h7xm8u02","content":"<html><head></head><body><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。<br>线程（Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p>\n<span id=\"more\"></span>\n\n<p><strong>Node 特点主线程是单线程的，</strong>一个进程只开一个主线程,基于事件驱动的、异步非阻塞 I/O，可以应用于高并发场景<br>Nodejs 中没有多线程，为了充分利用多核 cpu,可以使用子进程实现内核的负载均衡</p>\n<p><strong>那我们就要解决以下问题</strong></p>\n<ul>\n<li>Node.js 做耗时的计算时候阻塞问题</li>\n<li>Node.js 如何开启多进程</li>\n<li>开发过程中如何实现进程守护</li>\n</ul>\n<h2 id=\"单线程的问题\"><a href=\"#单线程的问题\" class=\"headerlink\" title=\"单线程的问题\"></a>单线程的问题</h2><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">url</span> === <span class=\"hljs-string\">\"/sum\"</span>) {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 求和</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000000000</span>; i++) {</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">      }</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(sum + <span class=\"hljs-string\">\"\"</span>);</span><br><span class=\"line\">    } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"hljs-string\">\"end\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  })</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>访问 &nbsp;<code>/sum</code>&nbsp; 这个路径时，再新建一个浏览器页卡访问 &nbsp;<code>/</code> 会发现新的页卡需要要等待 &nbsp;<code>/sum</code> 路径的逻辑处理好后，才能处理 &nbsp;<code>/</code> 路径的逻辑</p>\n</blockquote>\n<h2 id=\"spawn-操作进程\"><a href=\"#spawn-操作进程\" class=\"headerlink\" title=\"spawn 操作进程\"></a>spawn 操作进程</h2><blockquote>\n<p>适合很大的输出操作时使用</p>\n</blockquote>\n<h3 id=\"开启进程\"><a href=\"#开启进程\" class=\"headerlink\" title=\"开启进程\"></a>开启进程</h3><p>Node.js 可以通过 <code>child_process</code> 创建子进程</p>\n<ul>\n<li>child_process.spawn(） 异步生成子进程</li>\n<li>child_process.fork() 产生一个新的 Node.js 进程，并使用建立的 IPC 通信通道调用指定的模块，该通道允许在父级和子级之间发送消息。</li>\n<li>child_process.exec() 产生一个 shell 并在该 shell 中运行命令</li>\n<li>child_process.execFile() 无需产生 shell</li>\n</ul>\n<h4 id=\"spawn\"><a href=\"#spawn\" class=\"headerlink\" title=\"spawn\"></a>spawn</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> { spawn } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 通过node命令执行sub_process.js文件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"hljs-string\">\"node\"</span>, [<span class=\"hljs-string\">\"sub_process.js\"</span>], {</span><br><span class=\"line\">  <span class=\"hljs-attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"test\"</span>), <span class=\"hljs-comment\">// 指定执行文件的父目录</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">stdio</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 监控错误</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"error\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 监听关闭事件</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"close\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">\"close\"</span>);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 监听退出事件</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"exit\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">\"exit\"</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><code>stdio</code> 的 0、1、2 分别对应当前主进程的 &nbsp;<code>process.stdin</code>,&nbsp;<code>process.stdout</code>,&nbsp;<code>process.stderr</code>, 可以写成数字也可以写成属性。还可以写成 &nbsp;<code>inherit</code>&nbsp;，作用和前面等价，默认写法。也可以设置忽略这些流，设置 &nbsp;<code>stdio: 'inherit'</code>&nbsp; 或者 &nbsp;<code>stdio: ['inherit', 'inherit', 'inherit']</code>&nbsp;。</p>\n<p><strong>这样就意味着子进程在运行时，使用的 &nbsp;<code>process</code> 是主进程的。</strong></p>\n</blockquote>\n<h3 id=\"读取子进程的打印结果\"><a href=\"#读取子进程的打印结果\" class=\"headerlink\" title=\"读取子进程的打印结果\"></a>读取子进程的打印结果</h3><p>通过管道的方式通信</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 主进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> { spawn } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"hljs-string\">\"node\"</span>, [<span class=\"hljs-string\">\"sub_process.js\"</span>], {</span><br><span class=\"line\">  <span class=\"hljs-attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"test\"</span>),</span><br><span class=\"line\">  <span class=\"hljs-attr\">stdio</span>: <span class=\"hljs-string\">\"pipe\"</span>, <span class=\"hljs-comment\">// 等价于 ['pipe', 'pipe', 'pipe']</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 监听标准输出</span></span><br><span class=\"line\">childProcess.<span class=\"hljs-property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"data\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>通过管道的方式，监听子进程的可写流，从而可以拿到子进程打印的结果</p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 子进程 test/sub_process.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000000000</span>; i++) {</span><br><span class=\"line\">  total += i;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 铜鼓</span></span><br><span class=\"line\">process.<span class=\"hljs-property\">stdout</span>.<span class=\"title function_\">write</span>(total + <span class=\"hljs-string\">\"\"</span>); <span class=\"hljs-comment\">// 只能输出字符串或者 buffer</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h3><h4 id=\"子进程向主进程发送数据\"><a href=\"#子进程向主进程发送数据\" class=\"headerlink\" title=\"子进程向主进程发送数据\"></a>子进程向主进程发送数据</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 主进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> { spawn } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"hljs-string\">\"node\"</span>, [<span class=\"hljs-string\">\"sub_process.js\"</span>], {</span><br><span class=\"line\">  <span class=\"hljs-attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"test\"</span>),</span><br><span class=\"line\">  <span class=\"hljs-attr\">stdio</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"ipc\"</span>],</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 监听子进程发送过来的数据</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><code>stdio</code>&nbsp; 的参数设置比较特殊，可以写成上面那样。还可以把 0、1、2 中的任意一个替换成 ipc&nbsp; 也可以。注意结合 0、1、2 代表的实际意义来决定使用方式。</p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 子进程 test/sub_process.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000000000</span>; i++) {</span><br><span class=\"line\">  total += i;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">send</span>(total); <span class=\"hljs-comment\">// 向主进程发送意数据类型</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"主进程向子进程发送数据\"><a href=\"#主进程向子进程发送数据\" class=\"headerlink\" title=\"主进程向子进程发送数据\"></a>主进程向子进程发送数据</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">childProcess.<span class=\"title function_\">send</span>(<span class=\"hljs-number\">666</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000000000</span>; i++) {</span><br><span class=\"line\">  total += i;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">send</span>(total); <span class=\"hljs-comment\">// 向主进程发送意数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>注意：</strong><br><strong>上面主进程向子进程通信的逻辑会正确执行，但是主进程和子进程都会保持运行状态。因为子进程在持续监听 <code>message</code>&nbsp; 事件；对于子进程而言，它并不知道主进程什么时候会发送消息过来，从而一直保持监听状态。导致整个程序，即主进程和子进程都维持这运行状态。</strong><br><strong>可以在 &nbsp;<code>message</code>&nbsp; 事件里面，设置 &nbsp;<code>process.exit()</code>&nbsp;。监听事件被执行后，就关闭主进程。</strong></p>\n<h3 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><p>上面的进程操作，子进程必须听主进程的；一旦主进程挂了，子进程就会挂。</p>\n<h3 id=\"独立运行的子进程\"><a href=\"#独立运行的子进程\" class=\"headerlink\" title=\"独立运行的子进程\"></a>独立运行的子进程</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 主进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> { spawn } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"hljs-string\">\"node\"</span>, [<span class=\"hljs-string\">\"sub_process.js\"</span>], {</span><br><span class=\"line\">  <span class=\"hljs-attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"test\"</span>),</span><br><span class=\"line\">  <span class=\"hljs-attr\">stdio</span>: <span class=\"hljs-string\">\"ingnore\"</span>, <span class=\"hljs-comment\">// 忽略子进程的“三流”</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">detached</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 创建独立的进程</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">childProcess.<span class=\"title function_\">unref</span>(); <span class=\"hljs-comment\">// 切断与子进程的关系</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFileSync</span>(<span class=\"hljs-string\">\"a.txt\"</span>, <span class=\"hljs-string\">\"1\"</span>);</span><br><span class=\"line\">}, <span class=\"hljs-number\">1000</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>可以在子进程里打印下进程号 &nbsp;<code>process.pid</code>&nbsp;，方便 <code>kill</code></p>\n</blockquote>\n<h3 id=\"解决单线程的问题\"><a href=\"#解决单线程的问题\" class=\"headerlink\" title=\"解决单线程的问题\"></a>解决单线程的问题</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> { spawn } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">url</span> === <span class=\"hljs-string\">\"/sum\"</span>) {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> cp = <span class=\"title function_\">spawn</span>(<span class=\"hljs-string\">\"node\"</span>, [<span class=\"hljs-string\">\"sub_process.js\"</span>], {</span><br><span class=\"line\">        <span class=\"hljs-attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"test\"</span>),</span><br><span class=\"line\">        <span class=\"hljs-attr\">stdio</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"ipc\"</span>],</span><br><span class=\"line\">      });</span><br><span class=\"line\">      cp.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">total</span>) {</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(<span class=\"hljs-string\">\"total:\"</span> + total);</span><br><span class=\"line\">      });</span><br><span class=\"line\">    } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"hljs-string\">\"end ok\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  })</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000000000</span>; i++) {</span><br><span class=\"line\">  sum += i;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">send</span>(sum);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"child-process-的其它-API-操作进程\"><a href=\"#child-process-的其它-API-操作进程\" class=\"headerlink\" title=\"child_process 的其它 API 操作进程\"></a>child_process 的其它 API 操作进程</h2><h3 id=\"执行文件\"><a href=\"#执行文件\" class=\"headerlink\" title=\"执行文件\"></a>执行文件</h3><blockquote>\n<p>只执行某个文件，不做其他的操作时适合使用。默认使用了 &nbsp;<code>ipc</code>&nbsp; 通信。</p>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fork</span>(<span class=\"hljs-string\">\"sum.js\"</span>, {</span><br><span class=\"line\">  <span class=\"hljs-attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">\"test\"</span>),</span><br><span class=\"line\">  <span class=\"hljs-attr\">silent</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// true: 管道通信、false: 等价于 spawn 的 stdio 的默认值</span></span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><blockquote>\n<p>适合数据小于 200k 的操作场景</p>\n</blockquote>\n<p>方式一：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 不会产生默认的 shell 窗口</span></span><br><span class=\"line\"><span class=\"title function_\">exec</span>(<span class=\"hljs-string\">\"ls -ll\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stdout);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>方式二：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 会产生默认的 shell 窗口</span></span><br><span class=\"line\"><span class=\"title function_\">execFile</span>(<span class=\"hljs-string\">\"ls\"</span>, [<span class=\"hljs-string\">\"-ll\"</span>], <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stdout);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><p>集群：多个人去实现一个功能<br>分布式：把一个功能拆分成多个，放到不同的地方</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h4><p>开启多个进程，并同时监听一个服务。当请求到来时，会让空闲的进程去处理。实现负载均衡</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> { fork } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> cpus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"os\"</span>).<span class=\"title function_\">cpus</span>().<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 拿到 cpu 核数（当前脚本会占一个进程）</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> server = http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"hljs-string\">\"parent:\"</span> + process.<span class=\"hljs-property\">pid</span>);</span><br><span class=\"line\">  })</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"hljs-property\">pid</span>); <span class=\"hljs-comment\">// 当前进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; cpus; i++) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> child = <span class=\"title function_\">fork</span>(<span class=\"hljs-string\">\"server.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// server 的名字固定，传入一个http服务，即其他集成需要监听的服务</span></span><br><span class=\"line\">  child.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">\"server\"</span>, server);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// server.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data, server</span>) =&gt;</span> {</span><br><span class=\"line\">  http</span><br><span class=\"line\">    .<span class=\"title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"hljs-string\">\"processPID:\"</span> + process.<span class=\"hljs-property\">pid</span>);</span><br><span class=\"line\">    })</span><br><span class=\"line\">    .<span class=\"title function_\">listen</span>(server);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"内置模块\"><a href=\"#内置模块\" class=\"headerlink\" title=\"内置模块\"></a>内置模块</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> cluster = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"cluster\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> cpus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"os\"</span>).<span class=\"title function_\">cpus</span>().<span class=\"hljs-property\">length</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (cluster.<span class=\"hljs-property\">isMaster</span>) {</span><br><span class=\"line\">  cluster.<span class=\"title function_\">on</span>(<span class=\"hljs-string\">\"exit\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">worker</span>) {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 每当有进程挂掉时</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(worker.<span class=\"hljs-property\">process</span>.<span class=\"hljs-property\">pid</span>); <span class=\"hljs-comment\">// 打印这个进程的 pid</span></span><br><span class=\"line\">    cluster.<span class=\"title function_\">fork</span>(); <span class=\"hljs-comment\">// 重启进程</span></span><br><span class=\"line\">  });</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; cpus; i++) {</span><br><span class=\"line\">    cluster.<span class=\"title function_\">fork</span>(); <span class=\"hljs-comment\">// 开启进程</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">} <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">  http</span><br><span class=\"line\">    .<span class=\"title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 模拟错误请求</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt; <span class=\"hljs-number\">0.5</span>) {</span><br><span class=\"line\">        <span class=\"title function_\">aa</span>();</span><br><span class=\"line\">      }</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"hljs-string\">\"process\"</span> + process.<span class=\"hljs-property\">pid</span>);</span><br><span class=\"line\">    })</span><br><span class=\"line\">    .<span class=\"title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"hljs-property\">pid</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>原理是给予 &nbsp;<code>fork</code>&nbsp; 实现的，但好处显而易见。上面的程序在第一次运行的时候，<code>isMaster</code>&nbsp; 是 true；监听进程的状态再开启多进程。每开启一个进程(执行一次<code>fork</code>)，这个程序就被自动执行一次；并且每次的 &nbsp;<code>isMaster</code>&nbsp; 是 false。然后在下面的逻辑里，开启多个进程对一个服务的监听。</p>\n<blockquote>\n<p><strong>注意：当前的进程，可以视为守护进程。</strong></p>\n</blockquote>\n<h3 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h3><p>pm2 可以把你的应用部署到服务器所有的 CPU 上,实现了多进程管理、监控、及负载均衡</p>\n<h4 id=\"安装-pm2\"><a href=\"#安装-pm2\" class=\"headerlink\" title=\"安装 pm2\"></a>安装 pm2</h4><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g <span class=\"hljs-comment\"># 安装pm2</span></span><br><span class=\"line\">pm2 start server.js --watch -i max <span class=\"hljs-comment\"># 启动进程</span></span><br><span class=\"line\">pm2 list <span class=\"hljs-comment\"># 显示进程状态</span></span><br><span class=\"line\">pm2 <span class=\"hljs-built_in\">kill</span> <span class=\"hljs-comment\"># 杀死全部进程</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start npm -- run dev <span class=\"hljs-comment\"># 启动npm脚本</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"pm2-配置文件\"><a href=\"#pm2-配置文件\" class=\"headerlink\" title=\"pm2 配置文件\"></a>pm2 配置文件</h4><figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 ecosystem</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置项目自动部署</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">apps</span>: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"my-project\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">script</span>: <span class=\"hljs-string\">\"server.js\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-comment\">// Options reference: https://pm2.io/doc/en/runtime/reference/ecosystem-file/</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">args</span>: <span class=\"hljs-string\">\"one two\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">instances</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">autorestart</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">max_memory_restart</span>: <span class=\"hljs-string\">\"1G\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">env</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">NODE_ENV</span>: <span class=\"hljs-string\">\"development\"</span>,</span><br><span class=\"line\">      },</span><br><span class=\"line\">      <span class=\"hljs-attr\">env_production</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">NODE_ENV</span>: <span class=\"hljs-string\">\"production\"</span>,</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">deploy</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">production</span>: {</span><br><span class=\"line\">      <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">\"root\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"39.106.14.146\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">\"origin/master\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">repo</span>: <span class=\"hljs-string\">\"https://github.com/wakeupmypig/pm2-deploy.git\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/home\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">\"post-deploy\"</span>:</span><br><span class=\"line\">        <span class=\"hljs-string\">\"npm install &amp;&amp; pm2 reload ecosystem.config.js --env production\"</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 deploy ecosystem.config.js production setup # 执行git clone</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面执行 git clone 的命令去掉 setup，即可启动 pm2</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。<br>线程（Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p></body></html>","more":"<p><strong>Node 特点主线程是单线程的，</strong>一个进程只开一个主线程,基于事件驱动的、异步非阻塞 I&#x2F;O，可以应用于高并发场景<br>Nodejs 中没有多线程，为了充分利用多核 cpu,可以使用子进程实现内核的负载均衡</p>\n<p><strong>那我们就要解决以下问题</strong></p>\n<ul>\n<li>Node.js 做耗时的计算时候阻塞问题</li>\n<li>Node.js 如何开启多进程</li>\n<li>开发过程中如何实现进程守护</li>\n</ul>\n<h2 id=\"单线程的问题\"><a href=\"#单线程的问题\" class=\"headerlink\" title=\"单线程的问题\"></a>单线程的问题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/sum&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 求和</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000000</span>; i++) &#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(sum + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>访问  <code>/sum</code>  这个路径时，再新建一个浏览器页卡访问  <code>/</code> 会发现新的页卡需要要等待  <code>/sum</code> 路径的逻辑处理好后，才能处理  <code>/</code> 路径的逻辑</p>\n</blockquote>\n<h2 id=\"spawn-操作进程\"><a href=\"#spawn-操作进程\" class=\"headerlink\" title=\"spawn 操作进程\"></a>spawn 操作进程</h2><blockquote>\n<p>适合很大的输出操作时使用</p>\n</blockquote>\n<h3 id=\"开启进程\"><a href=\"#开启进程\" class=\"headerlink\" title=\"开启进程\"></a>开启进程</h3><p>Node.js 可以通过 <code>child_process</code> 创建子进程</p>\n<ul>\n<li>child_process.spawn(） 异步生成子进程</li>\n<li>child_process.fork() 产生一个新的 Node.js 进程，并使用建立的 IPC 通信通道调用指定的模块，该通道允许在父级和子级之间发送消息。</li>\n<li>child_process.exec() 产生一个 shell 并在该 shell 中运行命令</li>\n<li>child_process.execFile() 无需产生 shell</li>\n</ul>\n<h4 id=\"spawn\"><a href=\"#spawn\" class=\"headerlink\" title=\"spawn\"></a>spawn</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过node命令执行sub_process.js文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [<span class=\"string\">&quot;sub_process.js&quot;</span>], &#123;</span><br><span class=\"line\">  <span class=\"attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;test&quot;</span>), <span class=\"comment\">// 指定执行文件的父目录</span></span><br><span class=\"line\">  <span class=\"attr\">stdio</span>: [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监控错误</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听关闭事件</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;close&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听退出事件</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;exit&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;exit&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>stdio</code> 的 0、1、2 分别对应当前主进程的  <code>process.stdin</code>, <code>process.stdout</code>, <code>process.stderr</code>, 可以写成数字也可以写成属性。还可以写成  <code>inherit</code> ，作用和前面等价，默认写法。也可以设置忽略这些流，设置  <code>stdio: &#39;inherit&#39;</code>  或者  <code>stdio: [&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]</code> 。</p>\n<p><strong>这样就意味着子进程在运行时，使用的  <code>process</code> 是主进程的。</strong></p>\n</blockquote>\n<h3 id=\"读取子进程的打印结果\"><a href=\"#读取子进程的打印结果\" class=\"headerlink\" title=\"读取子进程的打印结果\"></a>读取子进程的打印结果</h3><p>通过管道的方式通信</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [<span class=\"string\">&quot;sub_process.js&quot;</span>], &#123;</span><br><span class=\"line\">  <span class=\"attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;test&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">stdio</span>: <span class=\"string\">&quot;pipe&quot;</span>, <span class=\"comment\">// 等价于 [&#x27;pipe&#x27;, &#x27;pipe&#x27;, &#x27;pipe&#x27;]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听标准输出</span></span><br><span class=\"line\">childProcess.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过管道的方式，监听子进程的可写流，从而可以拿到子进程打印的结果</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子进程 test/sub_process.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000000</span>; i++) &#123;</span><br><span class=\"line\">  total += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 铜鼓</span></span><br><span class=\"line\">process.<span class=\"property\">stdout</span>.<span class=\"title function_\">write</span>(total + <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 只能输出字符串或者 buffer</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h3><h4 id=\"子进程向主进程发送数据\"><a href=\"#子进程向主进程发送数据\" class=\"headerlink\" title=\"子进程向主进程发送数据\"></a>子进程向主进程发送数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [<span class=\"string\">&quot;sub_process.js&quot;</span>], &#123;</span><br><span class=\"line\">  <span class=\"attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;test&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">stdio</span>: [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;ipc&quot;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听子进程发送过来的数据</span></span><br><span class=\"line\">childProcess.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>stdio</code>  的参数设置比较特殊，可以写成上面那样。还可以把 0、1、2 中的任意一个替换成 ipc  也可以。注意结合 0、1、2 代表的实际意义来决定使用方式。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子进程 test/sub_process.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000000</span>; i++) &#123;</span><br><span class=\"line\">  total += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">send</span>(total); <span class=\"comment\">// 向主进程发送意数据类型</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主进程向子进程发送数据\"><a href=\"#主进程向子进程发送数据\" class=\"headerlink\" title=\"主进程向子进程发送数据\"></a>主进程向子进程发送数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">childProcess.<span class=\"title function_\">send</span>(<span class=\"number\">666</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000000</span>; i++) &#123;</span><br><span class=\"line\">  total += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">send</span>(total); <span class=\"comment\">// 向主进程发送意数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong><br><strong>上面主进程向子进程通信的逻辑会正确执行，但是主进程和子进程都会保持运行状态。因为子进程在持续监听 <code>message</code>  事件；对于子进程而言，它并不知道主进程什么时候会发送消息过来，从而一直保持监听状态。导致整个程序，即主进程和子进程都维持这运行状态。</strong><br><strong>可以在  <code>message</code>  事件里面，设置  <code>process.exit()</code> 。监听事件被执行后，就关闭主进程。</strong></p>\n<h3 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><p>上面的进程操作，子进程必须听主进程的；一旦主进程挂了，子进程就会挂。</p>\n<h3 id=\"独立运行的子进程\"><a href=\"#独立运行的子进程\" class=\"headerlink\" title=\"独立运行的子进程\"></a>独立运行的子进程</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> childProcess = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [<span class=\"string\">&quot;sub_process.js&quot;</span>], &#123;</span><br><span class=\"line\">  <span class=\"attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;test&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">stdio</span>: <span class=\"string\">&quot;ingnore&quot;</span>, <span class=\"comment\">// 忽略子进程的“三流”</span></span><br><span class=\"line\">  <span class=\"attr\">detached</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 创建独立的进程</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">childProcess.<span class=\"title function_\">unref</span>(); <span class=\"comment\">// 切断与子进程的关系</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;a.txt&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以在子进程里打印下进程号  <code>process.pid</code> ，方便 <code>kill</code></p>\n</blockquote>\n<h3 id=\"解决单线程的问题\"><a href=\"#解决单线程的问题\" class=\"headerlink\" title=\"解决单线程的问题\"></a>解决单线程的问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/sum&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cp = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [<span class=\"string\">&quot;sub_process.js&quot;</span>], &#123;</span><br><span class=\"line\">        <span class=\"attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;test&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">stdio</span>: [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;ipc&quot;</span>],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      cp.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">total</span>) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;total:&quot;</span> + total);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;end ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000000</span>; i++) &#123;</span><br><span class=\"line\">  sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">send</span>(sum);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"child-process-的其它-API-操作进程\"><a href=\"#child-process-的其它-API-操作进程\" class=\"headerlink\" title=\"child_process 的其它 API 操作进程\"></a>child_process 的其它 API 操作进程</h2><h3 id=\"执行文件\"><a href=\"#执行文件\" class=\"headerlink\" title=\"执行文件\"></a>执行文件</h3><blockquote>\n<p>只执行某个文件，不做其他的操作时适合使用。默认使用了  <code>ipc</code>  通信。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fork</span>(<span class=\"string\">&quot;sum.js&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">cwd</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;test&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">silent</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// true: 管道通信、false: 等价于 spawn 的 stdio 的默认值</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><blockquote>\n<p>适合数据小于 200k 的操作场景</p>\n</blockquote>\n<p>方式一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会产生默认的 shell 窗口</span></span><br><span class=\"line\"><span class=\"title function_\">exec</span>(<span class=\"string\">&quot;ls -ll&quot;</span>, <span class=\"function\">(<span class=\"params\">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stdout);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>方式二：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 会产生默认的 shell 窗口</span></span><br><span class=\"line\"><span class=\"title function_\">execFile</span>(<span class=\"string\">&quot;ls&quot;</span>, [<span class=\"string\">&quot;-ll&quot;</span>], <span class=\"function\">(<span class=\"params\">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stdout);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><p>集群：多个人去实现一个功能<br>分布式：把一个功能拆分成多个，放到不同的地方</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h4><p>开启多个进程，并同时监听一个服务。当请求到来时，会让空闲的进程去处理。实现负载均衡</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span> - <span class=\"number\">1</span>; <span class=\"comment\">// 拿到 cpu 核数（当前脚本会占一个进程）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = http</span><br><span class=\"line\">  .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;parent:&quot;</span> + process.<span class=\"property\">pid</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">pid</span>); <span class=\"comment\">// 当前进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cpus; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> child = <span class=\"title function_\">fork</span>(<span class=\"string\">&quot;server.js&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// server 的名字固定，传入一个http服务，即其他集成需要监听的服务</span></span><br><span class=\"line\">  child.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;server&quot;</span>, server);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">data, server</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  http</span><br><span class=\"line\">    .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;processPID:&quot;</span> + process.<span class=\"property\">pid</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">listen</span>(server);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置模块\"><a href=\"#内置模块\" class=\"headerlink\" title=\"内置模块\"></a>内置模块</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cluster&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cluster.<span class=\"property\">isMaster</span>) &#123;</span><br><span class=\"line\">  cluster.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;exit&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">worker</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每当有进程挂掉时</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(worker.<span class=\"property\">process</span>.<span class=\"property\">pid</span>); <span class=\"comment\">// 打印这个进程的 pid</span></span><br><span class=\"line\">    cluster.<span class=\"title function_\">fork</span>(); <span class=\"comment\">// 重启进程</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cpus; i++) &#123;</span><br><span class=\"line\">    cluster.<span class=\"title function_\">fork</span>(); <span class=\"comment\">// 开启进程</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  http</span><br><span class=\"line\">    .<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 模拟错误请求</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">aa</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;process&quot;</span> + process.<span class=\"property\">pid</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">pid</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理是给予  <code>fork</code>  实现的，但好处显而易见。上面的程序在第一次运行的时候，<code>isMaster</code>  是 true；监听进程的状态再开启多进程。每开启一个进程(执行一次<code>fork</code>)，这个程序就被自动执行一次；并且每次的  <code>isMaster</code>  是 false。然后在下面的逻辑里，开启多个进程对一个服务的监听。</p>\n<blockquote>\n<p><strong>注意：当前的进程，可以视为守护进程。</strong></p>\n</blockquote>\n<h3 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h3><p>pm2 可以把你的应用部署到服务器所有的 CPU 上,实现了多进程管理、监控、及负载均衡</p>\n<h4 id=\"安装-pm2\"><a href=\"#安装-pm2\" class=\"headerlink\" title=\"安装 pm2\"></a>安装 pm2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g <span class=\"comment\"># 安装pm2</span></span><br><span class=\"line\">pm2 start server.js --watch -i max <span class=\"comment\"># 启动进程</span></span><br><span class=\"line\">pm2 list <span class=\"comment\"># 显示进程状态</span></span><br><span class=\"line\">pm2 <span class=\"built_in\">kill</span> <span class=\"comment\"># 杀死全部进程</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start npm -- run dev <span class=\"comment\"># 启动npm脚本</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pm2-配置文件\"><a href=\"#pm2-配置文件\" class=\"headerlink\" title=\"pm2 配置文件\"></a>pm2 配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 ecosystem</span><br></pre></td></tr></table></figure>\n\n<p>配置项目自动部署</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">apps</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;my-project&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">script</span>: <span class=\"string\">&quot;server.js&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// Options reference: https://pm2.io/doc/en/runtime/reference/ecosystem-file/</span></span><br><span class=\"line\">      <span class=\"attr\">args</span>: <span class=\"string\">&quot;one two&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">instances</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"attr\">autorestart</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">watch</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">max_memory_restart</span>: <span class=\"string\">&quot;1G&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">env_production</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">deploy</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">production</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">user</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&quot;39.106.14.146&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">ref</span>: <span class=\"string\">&quot;origin/master&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">repo</span>: <span class=\"string\">&quot;https://github.com/wakeupmypig/pm2-deploy.git&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;post-deploy&quot;</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 deploy ecosystem.config.js production setup # 执行git clone</span><br></pre></td></tr></table></figure>\n\n<p>上面执行 git clone 的命令去掉 setup，即可启动 pm2</p>"},{"title":"TypeScript 环境配置","toc":true,"date":"2020-01-02T11:47:48.000Z","_content":"\n纯 ts 开发配置和前端框架配合 ts 的方法\n\n<!-- more -->\n\n## 配置 TS 环境到 webpack\n\n### 使用 ts-loader\n\n使用`ts`需要安装`ts`相关配置\n\n```bash\nnpm install typescript ts-loader --save-dev\n```\n\n生成`ts`的配置文件\n\n```bash\nnpx tsc --init\n```\n\n配置`ts-loader`\n\n```javascript\n{\n    test:/\\.tsx?/,\n    use: ['ts-loader'],\n    exclude: /node_modules/\n}\n```\n\n将入口文件更改成`ts`文件\n\n```javascript\nlet a: string = \"hello\";\nconsole.log(a);\n```\n\n执行`npm run dev`发现已经可以正常的解析`ts`文件啦！\n\n### 使用 preset-typescript\n\n不需要借助`typescript`\n\n```bash\nnpm install @babel/preset-typescript\n```\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": 2\n      }\n    ],\n    \"@babel/preset-react\",\n    [\n      \"@babel/preset-typescript\",\n      {\n        \"allExtensions\": true\n      }\n    ]\n  ],\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }],\n    \"@babel/plugin-transform-runtime\"\n  ]\n}\n```\n\n## 配置 ts+react 环境\n\n安装`react`相关模块\n\n```bash\nnpm i @babel/preset-react --save # 解析jsx语法\nnpm i react @types/react @types/react-dom react react-dom typescript\n```\n\n```typescript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nconst state = { number: 0 };\ntype State = Readonly<typeof state>;\nclass Counter extends React.Component<object, State> {\n  state: State = state;\n  handleClick = () => {\n    this.setState({ number: this.state.number + 1 });\n  };\n  render() {\n    const { number } = this.state;\n    return (\n      <div>\n        <button onClick={this.handleClick}>点击</button>\n        {number}\n      </div>\n    );\n  }\n}\nReactDOM.render(<Counter></Counter>, document.getElementById(\"root\"));\n```\n\n## 配置 ts+vue 环境\n\n安装`vue`所需要的模块\n\n```\nnpm install vue-loader  vue-template-compiler --save-dev\nnpm install vue vue-property-decorator\n```\n\n配置`ts-loader`\n\n```javascript\n{\n    test: /\\.tsx?/,\n    use: {\n        loader:'ts-loader',\n        options: {\n            appendTsSuffixTo: [/\\.vue$/],\n        },\n    },\n    exclude: /node_modules/\n}\n```\n\n使用`vue-loader`插件\n\n```javascript\nconst VueLoaderPlugin = require(\"vue-loader/lib/plugin\");\nnew VueLoaderPlugin();\n```\n\n配置解析`.vue`文件\n\n```javascript\n{\n    test:/\\.vue$/,\n    use:'vue-loader'\n}\n```\n\n增加`vue-shims.d.ts`，可以识别`.vue`文件\n\n```\ndeclare module '*.vue' {\n    import Vue from 'vue';\n    export default Vue;\n}\n```\n\n`index.tsx`文件\n\n```javascript\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nlet vm = new Vue({\n  render: (h) => h(App),\n}).$mount(\"#root\");\n```\n\n`App.vue文件`\n\n```html\n<template>\n  <div>\n    <div v-for=\"(todo,index) in todos\" :key=\"index\">{{todo}}</div>\n  </div>\n</template>\n<script lang=\"ts\">\n  import { Component, Vue } from \"vue-property-decorator\";\n  @Component\n  export default class Todo extends Vue {\n    public todos = [\"香蕉\", \"苹果\", \"橘子\"];\n  }\n</script>\n```\n","source":"_posts/07_TypeScript 环境.md","raw":"---\ntitle: TypeScript 环境配置\ntoc: true\ndate: 2020-01-02 19:47:48\ncategories:\n  - 前端\n  - TypeScript\ntags: TypeScript\n---\n\n纯 ts 开发配置和前端框架配合 ts 的方法\n\n<!-- more -->\n\n## 配置 TS 环境到 webpack\n\n### 使用 ts-loader\n\n使用`ts`需要安装`ts`相关配置\n\n```bash\nnpm install typescript ts-loader --save-dev\n```\n\n生成`ts`的配置文件\n\n```bash\nnpx tsc --init\n```\n\n配置`ts-loader`\n\n```javascript\n{\n    test:/\\.tsx?/,\n    use: ['ts-loader'],\n    exclude: /node_modules/\n}\n```\n\n将入口文件更改成`ts`文件\n\n```javascript\nlet a: string = \"hello\";\nconsole.log(a);\n```\n\n执行`npm run dev`发现已经可以正常的解析`ts`文件啦！\n\n### 使用 preset-typescript\n\n不需要借助`typescript`\n\n```bash\nnpm install @babel/preset-typescript\n```\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": 2\n      }\n    ],\n    \"@babel/preset-react\",\n    [\n      \"@babel/preset-typescript\",\n      {\n        \"allExtensions\": true\n      }\n    ]\n  ],\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }],\n    \"@babel/plugin-transform-runtime\"\n  ]\n}\n```\n\n## 配置 ts+react 环境\n\n安装`react`相关模块\n\n```bash\nnpm i @babel/preset-react --save # 解析jsx语法\nnpm i react @types/react @types/react-dom react react-dom typescript\n```\n\n```typescript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nconst state = { number: 0 };\ntype State = Readonly<typeof state>;\nclass Counter extends React.Component<object, State> {\n  state: State = state;\n  handleClick = () => {\n    this.setState({ number: this.state.number + 1 });\n  };\n  render() {\n    const { number } = this.state;\n    return (\n      <div>\n        <button onClick={this.handleClick}>点击</button>\n        {number}\n      </div>\n    );\n  }\n}\nReactDOM.render(<Counter></Counter>, document.getElementById(\"root\"));\n```\n\n## 配置 ts+vue 环境\n\n安装`vue`所需要的模块\n\n```\nnpm install vue-loader  vue-template-compiler --save-dev\nnpm install vue vue-property-decorator\n```\n\n配置`ts-loader`\n\n```javascript\n{\n    test: /\\.tsx?/,\n    use: {\n        loader:'ts-loader',\n        options: {\n            appendTsSuffixTo: [/\\.vue$/],\n        },\n    },\n    exclude: /node_modules/\n}\n```\n\n使用`vue-loader`插件\n\n```javascript\nconst VueLoaderPlugin = require(\"vue-loader/lib/plugin\");\nnew VueLoaderPlugin();\n```\n\n配置解析`.vue`文件\n\n```javascript\n{\n    test:/\\.vue$/,\n    use:'vue-loader'\n}\n```\n\n增加`vue-shims.d.ts`，可以识别`.vue`文件\n\n```\ndeclare module '*.vue' {\n    import Vue from 'vue';\n    export default Vue;\n}\n```\n\n`index.tsx`文件\n\n```javascript\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nlet vm = new Vue({\n  render: (h) => h(App),\n}).$mount(\"#root\");\n```\n\n`App.vue文件`\n\n```html\n<template>\n  <div>\n    <div v-for=\"(todo,index) in todos\" :key=\"index\">{{todo}}</div>\n  </div>\n</template>\n<script lang=\"ts\">\n  import { Component, Vue } from \"vue-property-decorator\";\n  @Component\n  export default class Todo extends Vue {\n    public todos = [\"香蕉\", \"苹果\", \"橘子\"];\n  }\n</script>\n```\n","slug":"07_TypeScript 环境","published":1,"updated":"2022-04-21T02:03:58.699Z","_id":"cl28d12d80013eou9a7vhenmn","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>纯 ts 开发配置和前端框架配合 ts 的方法</p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置-TS-环境到-webpack\"><a href=\"#配置-TS-环境到-webpack\" class=\"headerlink\" title=\"配置 TS 环境到 webpack\"></a>配置 TS 环境到 webpack</h2><h3 id=\"使用-ts-loader\"><a href=\"#使用-ts-loader\" class=\"headerlink\" title=\"使用 ts-loader\"></a>使用 ts-loader</h3><p>使用<code>ts</code>需要安装<code>ts</code>相关配置</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install typescript ts-loader --save-dev</span><br></pre></td></tr></tbody></table></figure>\n\n<p>生成<code>ts</code>的配置文件</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tsc --init</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置<code>ts-loader</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.tsx?/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">'ts-loader'</span>],</span><br><span class=\"line\">    <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>将入口文件更改成<code>ts</code>文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>: string = <span class=\"hljs-string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>执行<code>npm run dev</code>发现已经可以正常的解析<code>ts</code>文件啦！</p>\n<h3 id=\"使用-preset-typescript\"><a href=\"#使用-preset-typescript\" class=\"headerlink\" title=\"使用 preset-typescript\"></a>使用 preset-typescript</h3><p>不需要借助<code>typescript</code></p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/preset-typescript</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"presets\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"@babel/preset-env\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">      <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"useBuiltIns\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"usage\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"corejs\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span></span><br><span class=\"line\">      <span class=\"hljs-punctuation\">}</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-string\">\"@babel/preset-react\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">      <span class=\"hljs-string\">\"@babel/preset-typescript\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">      <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"allExtensions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span></span><br><span class=\"line\">      <span class=\"hljs-punctuation\">}</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"plugins\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@babel/plugin-proposal-decorators\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"legacy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@babel/plugin-proposal-class-properties\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"loose\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置-ts-react-环境\"><a href=\"#配置-ts-react-环境\" class=\"headerlink\" title=\"配置 ts+react 环境\"></a>配置 ts+react 环境</h2><p>安装<code>react</code>相关模块</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/preset-react --save <span class=\"hljs-comment\"># 解析jsx语法</span></span><br><span class=\"line\">npm i react @types/react @types/react-dom react react-dom typescript</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> state = { <span class=\"hljs-attr\">number</span>: <span class=\"hljs-number\">0</span> };</span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">State</span> = <span class=\"title class_\">Readonly</span>&lt;<span class=\"hljs-keyword\">typeof</span> state&gt;;</span><br><span class=\"line\"><span class=\"hljs-keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"hljs-built_in\">object</span>, <span class=\"title class_\">State</span>&gt; {</span><br><span class=\"line\">  <span class=\"hljs-attr\">state</span>: <span class=\"title class_\">State</span> = state;</span><br><span class=\"line\">  handleClick = <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>({ <span class=\"hljs-attr\">number</span>: <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">number</span> + <span class=\"hljs-number\">1</span> });</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-built_in\">number</span> } = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">state</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.handleClick}</span>&gt;</span>点击<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">        {number}</span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Counter</span>&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"hljs-string\">\"root\"</span>));</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置-ts-vue-环境\"><a href=\"#配置-ts-vue-环境\" class=\"headerlink\" title=\"配置 ts+vue 环境\"></a>配置 ts+vue 环境</h2><p>安装<code>vue</code>所需要的模块</p>\n<figure class=\"highlight applescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-loader  vue-template-compiler <span class=\"hljs-comment\">--save-dev</span></span><br><span class=\"line\">npm install vue vue-<span class=\"hljs-keyword\">property</span>-decorator</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置<code>ts-loader</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.tsx?/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">'ts-loader'</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">options</span>: {</span><br><span class=\"line\">            <span class=\"hljs-attr\">appendTsSuffixTo</span>: [<span class=\"hljs-regexp\">/\\.vue$/</span>],</span><br><span class=\"line\">        },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用<code>vue-loader</code>插件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">VueLoaderPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"vue-loader/lib/plugin\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>();</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置解析<code>.vue</code>文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">use</span>:<span class=\"hljs-string\">'vue-loader'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>增加<code>vue-shims.d.ts</code>，可以识别<code>.vue</code>文件</p>\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"hljs-string\">'*.vue'</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"title class_\">Vue</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>index.tsx</code>文件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App.vue\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">Vue</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">h</span>) =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">}).$mount(<span class=\"hljs-string\">\"#root\"</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>App.vue文件</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(todo,index) in todos\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>{{todo}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>&gt;</span><span class=\"hljs-language-javascript\"></span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  <span class=\"hljs-keyword\">import</span> { <span class=\"title class_\">Component</span>, <span class=\"title class_\">Vue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-property-decorator\"</span>;</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  @<span class=\"title class_\">Component</span></span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">Todo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">Vue</span> {</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">    public todos = [<span class=\"hljs-string\">\"香蕉\"</span>, <span class=\"hljs-string\">\"苹果\"</span>, <span class=\"hljs-string\">\"橘子\"</span>];</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"hljs-language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>纯 ts 开发配置和前端框架配合 ts 的方法</p></body></html>","more":"<h2 id=\"配置-TS-环境到-webpack\"><a href=\"#配置-TS-环境到-webpack\" class=\"headerlink\" title=\"配置 TS 环境到 webpack\"></a>配置 TS 环境到 webpack</h2><h3 id=\"使用-ts-loader\"><a href=\"#使用-ts-loader\" class=\"headerlink\" title=\"使用 ts-loader\"></a>使用 ts-loader</h3><p>使用<code>ts</code>需要安装<code>ts</code>相关配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install typescript ts-loader --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>ts</code>的配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tsc --init</span><br></pre></td></tr></table></figure>\n\n<p>配置<code>ts-loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.tsx?/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;ts-loader&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将入口文件更改成<code>ts</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: string = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>npm run dev</code>发现已经可以正常的解析<code>ts</code>文件啦！</p>\n<h3 id=\"使用-preset-typescript\"><a href=\"#使用-preset-typescript\" class=\"headerlink\" title=\"使用 preset-typescript\"></a>使用 preset-typescript</h3><p>不需要借助<code>typescript</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/preset-typescript</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;useBuiltIns&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;usage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;corejs&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/preset-react&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-typescript&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;allExtensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/plugin-proposal-decorators&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;legacy&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;loose&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-ts-react-环境\"><a href=\"#配置-ts-react-环境\" class=\"headerlink\" title=\"配置 ts+react 环境\"></a>配置 ts+react 环境</h2><p>安装<code>react</code>相关模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/preset-react --save <span class=\"comment\"># 解析jsx语法</span></span><br><span class=\"line\">npm i react @types/react @types/react-dom react react-dom typescript</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123; <span class=\"attr\">number</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">State</span> = <span class=\"title class_\">Readonly</span>&lt;<span class=\"keyword\">typeof</span> state&gt;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"built_in\">object</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"title class_\">State</span> = state;</span><br><span class=\"line\">  handleClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">number</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">number</span> + <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"built_in\">number</span> &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Counter</span>&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-ts-vue-环境\"><a href=\"#配置-ts-vue-环境\" class=\"headerlink\" title=\"配置 ts+vue 环境\"></a>配置 ts+vue 环境</h2><p>安装<code>vue</code>所需要的模块</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-loader  vue-template-compiler <span class=\"comment\">--save-dev</span></span><br><span class=\"line\">npm install vue vue-<span class=\"keyword\">property</span>-decorator</span><br></pre></td></tr></table></figure>\n\n<p>配置<code>ts-loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;ts-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">appendTsSuffixTo</span>: [<span class=\"regexp\">/\\.vue$/</span>],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>vue-loader</code>插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">VueLoaderPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;vue-loader/lib/plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>();</span><br></pre></td></tr></table></figure>\n\n<p>配置解析<code>.vue</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>:<span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加<code>vue-shims.d.ts</code>，可以识别<code>.vue</code>文件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;*.vue&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Vue</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.tsx</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#root&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>App.vue文件</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(todo,index) in todos&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Vue</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-property-decorator&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  @<span class=\"title class_\">Component</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Todo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Vue</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    public todos = [<span class=\"string\">&quot;香蕉&quot;</span>, <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;橘子&quot;</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Google reCAPTCHA","date":"2022-04-19T01:47:21.000Z","_content":"\n单独说 Google reCAPTCHA，可能鲜有人知道具体是什么。但是见过下面这个验证的，大概知道是啥了。\n\n<!-- more -->\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e287bfa863384be6b92145537fb30caf~tplv-k3u1fbpfcp-watermark.image?)\n\n如果还不够的话，再看看这个\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00308dbd84ad4a1a8be7236d756900a0~tplv-k3u1fbpfcp-watermark.image?)\n\n笔者经常和这个验证器打交道，用多了时就会觉得它太难了。但细细一想也很人性化，因为它确实需要人用心去验证，才会大概率验证通过。这也是笔者采用这个产品，来做安全防护的原因。\n\n## 背景\n\n公司对根据 ip 给用户提供的激活码，有人通过模拟 ip 的手段，瞬间刷走了几千个。原因在于领取激活码的接口，只对 ip 做了限制。再一个就是接口本身，可以直接通过调用来获取，原本应该从页面上获取的。在和同事的讨论下决定，采用 Google reCAPTCHA v2 的 Checkbox 来进行安全防护，就是上图中的控件。\n\n## 获取 API key\n\n首先需要前往 https://www.google.com/recaptcha/admin/create ，为网站创建一个**第 2 版“进行人机身份验证”复选框的** 配置。创建完成后，我们会得到两个密钥。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9f6dbdce634470a8d058365177c0cb~tplv-k3u1fbpfcp-watermark.image?)\n\n网站密钥，是在客户端发起验证使用的。而下面的通信密钥，则是为了在服务端做 [Verifying the user's response](https://developers.google.com/recaptcha/docs/verify?hl=en) 用的。\n\n## 客户端\n\n### 控件的结构与简单样式\n\n```html\n<div id=\"robot\"></div>\n```\n\n```css\n#robot {\n  position: fixed;\n  left: 50%;\n  transform: translate(-50%, 0);\n  bottom: 270px;\n}\n\n@media screen and (max-width: 768px) {\n  #robot {\n    bottom: 200px;\n  }\n}\n```\n\n> 样式可以自行根据页面需要来调整\n\n### 脚本\n\n在编写 js 之前，需要先加载一个资源进来。\n\n```html\n<script\n  src=\"https://www.google.com/recaptcha/api.js?render=explicit\"\n  async\n  defer\n></script>\n```\n\n之后就可以编写代码了\n\n```javascript\nexport const googleVerify = () => {\n  if (!grecaptcha.render) return;\n\n  grecaptcha.render(\"robot\", {\n    sitekey: \"网站密钥\",\n    callback: function (token) {\n      // 验证通过\n    },\n  });\n};\n```\n\n`googleVerify` 方法被调用时，它会通过 `render` 方法渲染控件到页面上。当验证通过时，`callback` 会被执行，并回传一个 `token` 过来，要做好一个完备的安全防护，就需要把它传递给后端，做最后的验证。\n\n## 服务端\n\n参考 https://developers.google.com/recaptcha/docs/verify?hl=en#api_request 即可知道，服务端要做的就是使用 Google reCAPTCHA 的一个 API 发送验证请求。以 Express 的中间件为例，具体处理过程为：\n\n```TypeScript\nconst verifyGoogleToken: RequestHandler = async (req, res, next) => {\n  const { token } = req.body;\n\n  const { data } = await axios({\n    url: \"https://www.google.com/recaptcha/api/siteverify\",\n    method: \"post\",\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    data: `secret=${通信密钥}&response=${token}`,\n  });\n\n  if (data && data.success) {\n    next();\n  } else {\n    res.send(\"google verify failed\");\n  }\n};\n\n```\n\n这样一个完整的验证过程就完成了。\n","source":"_posts/08_Google-reCAPTCHA.md","raw":"---\ntitle: Google reCAPTCHA\ndate: 2022-04-19 09:47:21\ntags: Google Product\ncategories:\n  - 互联网产品\n  - Google Product\n---\n\n单独说 Google reCAPTCHA，可能鲜有人知道具体是什么。但是见过下面这个验证的，大概知道是啥了。\n\n<!-- more -->\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e287bfa863384be6b92145537fb30caf~tplv-k3u1fbpfcp-watermark.image?)\n\n如果还不够的话，再看看这个\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00308dbd84ad4a1a8be7236d756900a0~tplv-k3u1fbpfcp-watermark.image?)\n\n笔者经常和这个验证器打交道，用多了时就会觉得它太难了。但细细一想也很人性化，因为它确实需要人用心去验证，才会大概率验证通过。这也是笔者采用这个产品，来做安全防护的原因。\n\n## 背景\n\n公司对根据 ip 给用户提供的激活码，有人通过模拟 ip 的手段，瞬间刷走了几千个。原因在于领取激活码的接口，只对 ip 做了限制。再一个就是接口本身，可以直接通过调用来获取，原本应该从页面上获取的。在和同事的讨论下决定，采用 Google reCAPTCHA v2 的 Checkbox 来进行安全防护，就是上图中的控件。\n\n## 获取 API key\n\n首先需要前往 https://www.google.com/recaptcha/admin/create ，为网站创建一个**第 2 版“进行人机身份验证”复选框的** 配置。创建完成后，我们会得到两个密钥。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9f6dbdce634470a8d058365177c0cb~tplv-k3u1fbpfcp-watermark.image?)\n\n网站密钥，是在客户端发起验证使用的。而下面的通信密钥，则是为了在服务端做 [Verifying the user's response](https://developers.google.com/recaptcha/docs/verify?hl=en) 用的。\n\n## 客户端\n\n### 控件的结构与简单样式\n\n```html\n<div id=\"robot\"></div>\n```\n\n```css\n#robot {\n  position: fixed;\n  left: 50%;\n  transform: translate(-50%, 0);\n  bottom: 270px;\n}\n\n@media screen and (max-width: 768px) {\n  #robot {\n    bottom: 200px;\n  }\n}\n```\n\n> 样式可以自行根据页面需要来调整\n\n### 脚本\n\n在编写 js 之前，需要先加载一个资源进来。\n\n```html\n<script\n  src=\"https://www.google.com/recaptcha/api.js?render=explicit\"\n  async\n  defer\n></script>\n```\n\n之后就可以编写代码了\n\n```javascript\nexport const googleVerify = () => {\n  if (!grecaptcha.render) return;\n\n  grecaptcha.render(\"robot\", {\n    sitekey: \"网站密钥\",\n    callback: function (token) {\n      // 验证通过\n    },\n  });\n};\n```\n\n`googleVerify` 方法被调用时，它会通过 `render` 方法渲染控件到页面上。当验证通过时，`callback` 会被执行，并回传一个 `token` 过来，要做好一个完备的安全防护，就需要把它传递给后端，做最后的验证。\n\n## 服务端\n\n参考 https://developers.google.com/recaptcha/docs/verify?hl=en#api_request 即可知道，服务端要做的就是使用 Google reCAPTCHA 的一个 API 发送验证请求。以 Express 的中间件为例，具体处理过程为：\n\n```TypeScript\nconst verifyGoogleToken: RequestHandler = async (req, res, next) => {\n  const { token } = req.body;\n\n  const { data } = await axios({\n    url: \"https://www.google.com/recaptcha/api/siteverify\",\n    method: \"post\",\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    data: `secret=${通信密钥}&response=${token}`,\n  });\n\n  if (data && data.success) {\n    next();\n  } else {\n    res.send(\"google verify failed\");\n  }\n};\n\n```\n\n这样一个完整的验证过程就完成了。\n","slug":"08_Google-reCAPTCHA","published":1,"updated":"2022-04-20T06:02:02.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl28d1qfy0017eou9cbnb458a","content":"<html><head></head><body><p>单独说 Google reCAPTCHA，可能鲜有人知道具体是什么。但是见过下面这个验证的，大概知道是啥了。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e287bfa863384be6b92145537fb30caf~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>如果还不够的话，再看看这个</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00308dbd84ad4a1a8be7236d756900a0~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>笔者经常和这个验证器打交道，用多了时就会觉得它太难了。但细细一想也很人性化，因为它确实需要人用心去验证，才会大概率验证通过。这也是笔者采用这个产品，来做安全防护的原因。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司对根据 ip 给用户提供的激活码，有人通过模拟 ip 的手段，瞬间刷走了几千个。原因在于领取激活码的接口，只对 ip 做了限制。再一个就是接口本身，可以直接通过调用来获取，原本应该从页面上获取的。在和同事的讨论下决定，采用 Google reCAPTCHA v2 的 Checkbox 来进行安全防护，就是上图中的控件。</p>\n<h2 id=\"获取-API-key\"><a href=\"#获取-API-key\" class=\"headerlink\" title=\"获取 API key\"></a>获取 API key</h2><p>首先需要前往 <a href=\"https://www.google.com/recaptcha/admin/create\">https://www.google.com/recaptcha/admin/create</a> ，为网站创建一个<strong>第 2 版“进行人机身份验证”复选框的</strong> 配置。创建完成后，我们会得到两个密钥。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9f6dbdce634470a8d058365177c0cb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>网站密钥，是在客户端发起验证使用的。而下面的通信密钥，则是为了在服务端做 <a href=\"https://developers.google.com/recaptcha/docs/verify?hl=en\">Verifying the user’s response</a> 用的。</p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h3 id=\"控件的结构与简单样式\"><a href=\"#控件的结构与简单样式\" class=\"headerlink\" title=\"控件的结构与简单样式\"></a>控件的结构与简单样式</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"robot\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-id\">#robot</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">50%</span>, <span class=\"hljs-number\">0</span>);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">270px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">768px</span>) {</span><br><span class=\"line\">  <span class=\"hljs-selector-id\">#robot</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>样式可以自行根据页面需要来调整</p>\n</blockquote>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>在编写 js 之前，需要先加载一个资源进来。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">  <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.google.com/recaptcha/api.js?render=explicit\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">  <span class=\"hljs-attr\">async</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">  <span class=\"hljs-attr\">defer</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>之后就可以编写代码了</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"title function_\">googleVerify</span> = (<span class=\"hljs-params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!grecaptcha.<span class=\"hljs-property\">render</span>) <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  grecaptcha.<span class=\"title function_\">render</span>(<span class=\"hljs-string\">\"robot\"</span>, {</span><br><span class=\"line\">    <span class=\"hljs-attr\">sitekey</span>: <span class=\"hljs-string\">\"网站密钥\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">callback</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">token</span>) {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 验证通过</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  });</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>googleVerify</code> 方法被调用时，它会通过 <code>render</code> 方法渲染控件到页面上。当验证通过时，<code>callback</code> 会被执行，并回传一个 <code>token</code> 过来，要做好一个完备的安全防护，就需要把它传递给后端，做最后的验证。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><p>参考 <a href=\"https://developers.google.com/recaptcha/docs/verify?hl=en#api_request\">https://developers.google.com/recaptcha/docs/verify?hl=en#api_request</a> 即可知道，服务端要做的就是使用 Google reCAPTCHA 的一个 API 发送验证请求。以 Express 的中间件为例，具体处理过程为：</p>\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">verifyGoogleToken</span>: <span class=\"title class_\">RequestHandler</span> = <span class=\"hljs-keyword\">async</span> (req, res, next) =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> { token } = req.<span class=\"hljs-property\">body</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> <span class=\"title function_\">axios</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"https://www.google.com/recaptcha/api/siteverify\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"post\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/x-www-form-urlencoded\"</span> },</span><br><span class=\"line\">    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">`secret=<span class=\"hljs-subst\">${通信密钥}</span>&amp;response=<span class=\"hljs-subst\">${token}</span>`</span>,</span><br><span class=\"line\">  });</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (data &amp;&amp; data.<span class=\"hljs-property\">success</span>) {</span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"hljs-string\">\"google verify failed\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这样一个完整的验证过程就完成了。</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>单独说 Google reCAPTCHA，可能鲜有人知道具体是什么。但是见过下面这个验证的，大概知道是啥了。</p></body></html>","more":"<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e287bfa863384be6b92145537fb30caf~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>如果还不够的话，再看看这个</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00308dbd84ad4a1a8be7236d756900a0~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>笔者经常和这个验证器打交道，用多了时就会觉得它太难了。但细细一想也很人性化，因为它确实需要人用心去验证，才会大概率验证通过。这也是笔者采用这个产品，来做安全防护的原因。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司对根据 ip 给用户提供的激活码，有人通过模拟 ip 的手段，瞬间刷走了几千个。原因在于领取激活码的接口，只对 ip 做了限制。再一个就是接口本身，可以直接通过调用来获取，原本应该从页面上获取的。在和同事的讨论下决定，采用 Google reCAPTCHA v2 的 Checkbox 来进行安全防护，就是上图中的控件。</p>\n<h2 id=\"获取-API-key\"><a href=\"#获取-API-key\" class=\"headerlink\" title=\"获取 API key\"></a>获取 API key</h2><p>首先需要前往 <a href=\"https://www.google.com/recaptcha/admin/create\">https://www.google.com/recaptcha/admin/create</a> ，为网站创建一个<strong>第 2 版“进行人机身份验证”复选框的</strong> 配置。创建完成后，我们会得到两个密钥。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9f6dbdce634470a8d058365177c0cb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>网站密钥，是在客户端发起验证使用的。而下面的通信密钥，则是为了在服务端做 <a href=\"https://developers.google.com/recaptcha/docs/verify?hl=en\">Verifying the user’s response</a> 用的。</p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h3 id=\"控件的结构与简单样式\"><a href=\"#控件的结构与简单样式\" class=\"headerlink\" title=\"控件的结构与简单样式\"></a>控件的结构与简单样式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;robot&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#robot</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">270px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-id\">#robot</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>样式可以自行根据页面需要来调整</p>\n</blockquote>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>在编写 js 之前，需要先加载一个资源进来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.google.com/recaptcha/api.js?render=explicit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">async</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">defer</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>之后就可以编写代码了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">googleVerify</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!grecaptcha.<span class=\"property\">render</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  grecaptcha.<span class=\"title function_\">render</span>(<span class=\"string\">&quot;robot&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">sitekey</span>: <span class=\"string\">&quot;网站密钥&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"keyword\">function</span> (<span class=\"params\">token</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 验证通过</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>googleVerify</code> 方法被调用时，它会通过 <code>render</code> 方法渲染控件到页面上。当验证通过时，<code>callback</code> 会被执行，并回传一个 <code>token</code> 过来，要做好一个完备的安全防护，就需要把它传递给后端，做最后的验证。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><p>参考 <a href=\"https://developers.google.com/recaptcha/docs/verify?hl=en#api_request\">https://developers.google.com/recaptcha/docs/verify?hl=en#api_request</a> 即可知道，服务端要做的就是使用 Google reCAPTCHA 的一个 API 发送验证请求。以 Express 的中间件为例，具体处理过程为：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">verifyGoogleToken</span>: <span class=\"title class_\">RequestHandler</span> = <span class=\"keyword\">async</span> (req, res, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; token &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://www.google.com/recaptcha/api/siteverify&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123; <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"string\">`secret=<span class=\"subst\">$&#123;通信密钥&#125;</span>&amp;response=<span class=\"subst\">$&#123;token&#125;</span>`</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">success</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;google verify failed&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样一个完整的验证过程就完成了。</p>"},{"title":"通用性能优化方案","date":"2022-04-20T02:17:20.000Z","_content":"\n## 前言\n\n比较通用的性能优化，就是将数据存储在内存中。内存直接由 cpu 控制，所以它的读取速度非常快。而像文件系统那样存储在硬盘上的数据，是通过桥接芯片与 CPU 相连，所以对比下来会稍微慢一点。\n\n<!-- more -->\n\n通常我们都知道，数据应该存储在数据库中。但是数据库中的数据具体在哪，我们很少关心。**它是以文件的形式，存储在硬盘上的数据。**知道这一点就可以知道，数据库的访问速度是没有访问内存快的。\n\n## 案例\n\n以 `js` 为例，假设我们有一个用户列表的数据表，通过内存存储，就可以做到性能提升。\n\n```JavaScript\nconst userListMap = new Map();\n\nconst getUserList = async = () => {\n  // 从数据库获取用户列表\n}\n\n// 服务启动时执行一次\nconst startup = async () => {\n  const userList = await getUserList();\n\n  userList.forEach(user => {\n    // 把每个用户数据，存储在内存上\n    userListMap.set(user.id, user);\n  });\n}\n```\n\n这么做的好处就是，用户数据的 CURD 操作，可以直接通过内存获取，再进行调整。结合相关的库做异步更新，可以很大幅度缓解服务端压力。\n\n> 值得反思的是，这么做会有一个很明显的问题：内存崩溃了怎么办？\n","source":"_posts/09_性能优化方案.md","raw":"---\ntitle: 通用性能优化方案\ndate: 2022-04-20 10:17:20\ntags: 性能优化\ncategories:\n  - 软件基础\n  - 性能优化\n---\n\n## 前言\n\n比较通用的性能优化，就是将数据存储在内存中。内存直接由 cpu 控制，所以它的读取速度非常快。而像文件系统那样存储在硬盘上的数据，是通过桥接芯片与 CPU 相连，所以对比下来会稍微慢一点。\n\n<!-- more -->\n\n通常我们都知道，数据应该存储在数据库中。但是数据库中的数据具体在哪，我们很少关心。**它是以文件的形式，存储在硬盘上的数据。**知道这一点就可以知道，数据库的访问速度是没有访问内存快的。\n\n## 案例\n\n以 `js` 为例，假设我们有一个用户列表的数据表，通过内存存储，就可以做到性能提升。\n\n```JavaScript\nconst userListMap = new Map();\n\nconst getUserList = async = () => {\n  // 从数据库获取用户列表\n}\n\n// 服务启动时执行一次\nconst startup = async () => {\n  const userList = await getUserList();\n\n  userList.forEach(user => {\n    // 把每个用户数据，存储在内存上\n    userListMap.set(user.id, user);\n  });\n}\n```\n\n这么做的好处就是，用户数据的 CURD 操作，可以直接通过内存获取，再进行调整。结合相关的库做异步更新，可以很大幅度缓解服务端压力。\n\n> 值得反思的是，这么做会有一个很明显的问题：内存崩溃了怎么办？\n","slug":"09_性能优化方案","published":1,"updated":"2022-04-20T06:01:40.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl28d1t6f001beou93spzewej","content":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>比较通用的性能优化，就是将数据存储在内存中。内存直接由 cpu 控制，所以它的读取速度非常快。而像文件系统那样存储在硬盘上的数据，是通过桥接芯片与 CPU 相连，所以对比下来会稍微慢一点。</p>\n<span id=\"more\"></span>\n\n<p>通常我们都知道，数据应该存储在数据库中。但是数据库中的数据具体在哪，我们很少关心。<strong>它是以文件的形式，存储在硬盘上的数据。</strong>知道这一点就可以知道，数据库的访问速度是没有访问内存快的。</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>以 <code>js</code> 为例，假设我们有一个用户列表的数据表，通过内存存储，就可以做到性能提升。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> userListMap = <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> getUserList = <span class=\"hljs-keyword\">async</span> = <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 从数据库获取用户列表</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 服务启动时执行一次</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title function_\">startup</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> userList = <span class=\"hljs-keyword\">await</span> <span class=\"title function_\">getUserList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  userList.<span class=\"title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 把每个用户数据，存储在内存上</span></span><br><span class=\"line\">    userListMap.<span class=\"title function_\">set</span>(user.<span class=\"hljs-property\">id</span>, user);</span><br><span class=\"line\">  });</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这么做的好处就是，用户数据的 CURD 操作，可以直接通过内存获取，再进行调整。结合相关的库做异步更新，可以很大幅度缓解服务端压力。</p>\n<blockquote>\n<p>值得反思的是，这么做会有一个很明显的问题：内存崩溃了怎么办？</p>\n</blockquote>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>比较通用的性能优化，就是将数据存储在内存中。内存直接由 cpu 控制，所以它的读取速度非常快。而像文件系统那样存储在硬盘上的数据，是通过桥接芯片与 CPU 相连，所以对比下来会稍微慢一点。</p></body></html>","more":"<p>通常我们都知道，数据应该存储在数据库中。但是数据库中的数据具体在哪，我们很少关心。<strong>它是以文件的形式，存储在硬盘上的数据。</strong>知道这一点就可以知道，数据库的访问速度是没有访问内存快的。</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>以 <code>js</code> 为例，假设我们有一个用户列表的数据表，通过内存存储，就可以做到性能提升。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> userListMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserList = <span class=\"keyword\">async</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从数据库获取用户列表</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务启动时执行一次</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">startup</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userList = <span class=\"keyword\">await</span> <span class=\"title function_\">getUserList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  userList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把每个用户数据，存储在内存上</span></span><br><span class=\"line\">    userListMap.<span class=\"title function_\">set</span>(user.<span class=\"property\">id</span>, user);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么做的好处就是，用户数据的 CURD 操作，可以直接通过内存获取，再进行调整。结合相关的库做异步更新，可以很大幅度缓解服务端压力。</p>\n<blockquote>\n<p>值得反思的是，这么做会有一个很明显的问题：内存崩溃了怎么办？</p>\n</blockquote>"},{"title":"discord bot 开发","date":"2022-04-21T01:57:53.000Z","_content":"\n本文围绕 `discord.js` 来为 discord 的社区编写机器人脚本。\n\n<!-- more -->\n","source":"_posts/10_discord-bot-开发.md","raw":"---\ntitle: discord bot 开发\ndate: 2022-04-21 09:57:53\ncategories:\n  - 机器人脚本\n  - discord\ntags: Discord\n---\n\n本文围绕 `discord.js` 来为 discord 的社区编写机器人脚本。\n\n<!-- more -->\n","slug":"10_discord-bot-开发","published":1,"updated":"2022-04-21T02:08:45.706Z","_id":"cl28d1vhr001feou9d5fv53wg","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>本文围绕 <code>discord.js</code> 来为 discord 的社区编写机器人脚本。</p>\n<span id=\"more\"></span>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body><p>本文围绕 <code>discord.js</code> 来为 discord 的社区编写机器人脚本。</p></body></html>","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cl28cxhqa0007eou93jdw20aq","category_id":"cl27aeooe0007y2u97u1a0h62","_id":"cl28cxhqb0009eou9du4s226f"},{"post_id":"cl28cxhqa0007eou93jdw20aq","category_id":"cl27aeoor001cy2u940969h32","_id":"cl28cxhqb000aeou90j5ogaoc"},{"post_id":"cl28cxtk8000beou99sj67mgx","category_id":"cl27aeoog000cy2u9h4oe1qry","_id":"cl28cxtka000deou9gq3afjd8"},{"post_id":"cl28cxtk8000beou99sj67mgx","category_id":"cl27aeooq0015y2u9eacx1vic","_id":"cl28cxtka000eeou99bmz41oy"},{"post_id":"cl28cy3uz000feou9294naege","category_id":"cl27aeooe0007y2u97u1a0h62","_id":"cl28cy3v0000heou939oe51v4"},{"post_id":"cl28cy3uz000feou9294naege","category_id":"cl27aeooo000yy2u91mf56q82","_id":"cl28cy3v1000ieou93krh7juh"},{"post_id":"cl28cyc8o000reou9g1nace7s","category_id":"cl27aeooe0007y2u97u1a0h62","_id":"cl28cyc8p000teou9ezxb9ec9"},{"post_id":"cl28cyc8o000reou9g1nace7s","category_id":"cl27aeooo000yy2u91mf56q82","_id":"cl28cyc8p000ueou93qb7bskz"},{"post_id":"cl28cyew0000veou9bf4u67u7","category_id":"cl27aeooe0007y2u97u1a0h62","_id":"cl28cyew1000xeou94yf8f7qw"},{"post_id":"cl28cyew0000veou9bf4u67u7","category_id":"cl27aeooo000yy2u91mf56q82","_id":"cl28cyew1000yeou9d2d4a4zv"},{"post_id":"cl28d0de3000zeou9h7xm8u02","category_id":"cl27aeoog000cy2u9h4oe1qry","_id":"cl28d0de40011eou9507i7lfz"},{"post_id":"cl28d0de3000zeou9h7xm8u02","category_id":"cl27aeoor0019y2u9gq98fgfw","_id":"cl28d0de40012eou9htsg51kr"},{"post_id":"cl28d12d80013eou9a7vhenmn","category_id":"cl27aeooe0007y2u97u1a0h62","_id":"cl28d12d90015eou9azn1egqm"},{"post_id":"cl28d12d80013eou9a7vhenmn","category_id":"cl27aeoon000vy2u9bxk5g3hy","_id":"cl28d12d90016eou9a9anh0hs"},{"post_id":"cl28d1qfy0017eou9cbnb458a","category_id":"cl27aeoo90002y2u96bdy5bs9","_id":"cl28d1qfz0019eou9hts0gkcn"},{"post_id":"cl28d1qfy0017eou9cbnb458a","category_id":"cl27aeool000ky2u9f5y2acae","_id":"cl28d1qfz001aeou9aqkn1w4p"},{"post_id":"cl28d1t6f001beou93spzewej","category_id":"cl27aeoom000qy2u92jq878sz","_id":"cl28d1t6g001deou90d9d62vi"},{"post_id":"cl28d1t6f001beou93spzewej","category_id":"cl27aeoos001hy2u9e27tedq9","_id":"cl28d1t6g001eeou99hdg6q5v"},{"post_id":"cl28d1vhr001feou9d5fv53wg","category_id":"cl28cv92q0001eou9ffqi66xt","_id":"cl28d1vhs001heou9boj4aw12"},{"post_id":"cl28d1vhr001feou9d5fv53wg","category_id":"cl28cv92s0004eou9c9m886um","_id":"cl28d1vhs001ieou94de1bm4x"}],"PostTag":[{"post_id":"cl28cxhqa0007eou93jdw20aq","tag_id":"cl27aeooj000iy2u91agcbkzt","_id":"cl28cxhqb0008eou99wqna1c8"},{"post_id":"cl28cxtk8000beou99sj67mgx","tag_id":"cl27aeooh000dy2u95suzh59a","_id":"cl28cxtka000ceou9dm8yfl2h"},{"post_id":"cl28cy3uz000feou9294naege","tag_id":"cl27aeool000ly2u9fub39bhg","_id":"cl28cy3v0000geou9fob94ry3"},{"post_id":"cl28cyc8o000reou9g1nace7s","tag_id":"cl27aeool000ly2u9fub39bhg","_id":"cl28cyc8p000seou9cn22f9yn"},{"post_id":"cl28cyew0000veou9bf4u67u7","tag_id":"cl27aeool000ly2u9fub39bhg","_id":"cl28cyew1000weou901caa71n"},{"post_id":"cl28d0de3000zeou9h7xm8u02","tag_id":"cl27aeooj000iy2u91agcbkzt","_id":"cl28d0de40010eou92c569ooz"},{"post_id":"cl28d12d80013eou9a7vhenmn","tag_id":"cl27aeooe0008y2u95o6m8u9y","_id":"cl28d12d90014eou96d5c8jqc"},{"post_id":"cl28d1qfy0017eou9cbnb458a","tag_id":"cl27aeooa0003y2u94o9c3izl","_id":"cl28d1qfz0018eou9e5sd3dmo"},{"post_id":"cl28d1t6f001beou93spzewej","tag_id":"cl27aeoom000oy2u91xo15n0s","_id":"cl28d1t6g001ceou99mn0g4e9"},{"post_id":"cl28d1vhr001feou9d5fv53wg","tag_id":"cl28cv92r0002eou9gt7h21tp","_id":"cl28d1vhs001geou90vpghw3h"}],"Tag":[{"name":"Google Product","_id":"cl27aeooa0003y2u94o9c3izl"},{"name":"TypeScript","_id":"cl27aeooe0008y2u95o6m8u9y"},{"name":"模板引擎","_id":"cl27aeooh000dy2u95suzh59a"},{"name":"NodeJS","_id":"cl27aeooj000iy2u91agcbkzt"},{"name":"webpack","_id":"cl27aeool000ly2u9fub39bhg"},{"name":"性能优化","_id":"cl27aeoom000oy2u91xo15n0s"},{"name":"Discord","_id":"cl28cv92r0002eou9gt7h21tp"}]}}